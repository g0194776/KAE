1.	创建了Compressor的命名空间。
2.	建立了抽象父类Compressor, 并创建了一个新的机遇GZip的压缩器，GZipCompressor (未完成)。








=========================================
=KJFramework 4月21日项目进度
=========================================
1. 增加了PerformanceCounterAttribute， 用于使一个自定义的类型标记自己想要的性能计数器
2. 增加了IPerformanceCounterOwner接口，用于标示处一个性能计数器的拥有者。
3. 创建了PerformanceCounterExtend扩展类，用于以第三方的形式通过一个契约来获取性能计数器
4. 创建了PerformanceCounters类，用于从全局的角度去初始化性能计数器
5. 但是还不支持自定义性能计数器的类型，我会在日后给加上对于此类的支持~




=========================================
=KJFramework 4月25日项目进度
=========================================
1. 通过性能计数器的初始化改造，已经完美的支持了自定义性能计数器




=========================================
=KJFramework 5月26日项目进度
=========================================
1. 修改了初始化性能计数器时的模式BUG， 改为单件模式




=========================================
=KJFramework 5月27日项目进度
=========================================
1. 将性能计数器的实例模式改为多实例模式



=========================================
=KJFramework 2011年7月20日项目进度
=========================================
1. 更新了LightTimer的内部逻辑，增加了多出空引用的检测。



=========================================
=KJFramework 2011年10月09日项目进度
=========================================
1. 移除了整个Checker和PerformanceProvider类库
2. 移除了对于KJFramework.Net项目的引用