using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;

namespace KJFramework.ServiceModel.Bussiness.VSPlugin.Generators
{
    /// <summary>
    ///     CONNECT.技术源代码文件生成器
    /// </summary>
    public class DefaultSourceFileGenerator : ISourceFileGenerator
    {
        #region Members

        private readonly string _className;
        private readonly string _path;
        private readonly CodeCompileUnit _unit = new CodeCompileUnit();
        private readonly CodeNamespace _nameSpaces = new CodeNamespace("KJFramework.ServiceModel.AutoGenerated");
        private readonly CodeTypeDeclaration _type;

        #endregion

        #region Constructor

        /// <summary>
        ///     CONNECT.技术源代码文件生成器
        /// </summary>
        /// <param name="className">类名</param>
        /// <param name="path">
        ///      保存地址
        ///     <para>比如: c:\</para>
        /// </param>
        public DefaultSourceFileGenerator(string className, string path)
        {
            if (className == null) throw new ArgumentNullException("className");
            if (path == null) throw new ArgumentNullException("path");
            if (!Directory.Exists(path)) throw new DirectoryNotFoundException("path");
            _type = new CodeTypeDeclaration(className);
            _className = className;
            _path = path + _className + ".cs";
            _nameSpaces.Imports.Add(new CodeNamespaceImport("System"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("System.IO"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("KJFramework.Messages"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("KJFramework.Messages.Attributes"));
            _type.IsClass = true;
            _type.BaseTypes.Add(new CodeTypeReference("KJFramework.Messages.Contracts.IntellectObject"));
        }

        #endregion

        #region Implementation of ISourceFileGenerator

        /// <summary>
        ///     创建一个字段
        /// </summary>
        public void GenerateProperty(string type, string name, int id, bool isRequire)
        {
            string privFieldName = "_" + name.ToLower();
            CodeMemberField field = new CodeMemberField(type, privFieldName);
            field.Attributes = MemberAttributes.Private;
            _type.Members.Add(field);
            CodeMemberProperty property = new CodeMemberProperty();
            property.Name = name;
            property.Type = new CodeTypeReference(type);
            property.Attributes = MemberAttributes.Public;
            //codeMemberProperty.HasGet = codeMemberProperty.HasSet = true;
            property.GetStatements.Add(new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), privFieldName)));
            property.SetStatements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), privFieldName), new CodePropertySetValueReferenceExpression()));
            property.CustomAttributes.Add(new CodeAttributeDeclaration("IntellectProperty",
                                                                                 new CodeAttributeArgument(new CodePrimitiveExpression(id)),
                                                                                 new CodeAttributeArgument("IsRequire", new CodePrimitiveExpression(isRequire))));
            _type.Members.Add(property);
        }

        /// <summary>
        ///     生成文件
        /// </summary>
        public void Generate()
        {
            try
            {
                _nameSpaces.Types.Add(_type);
                _unit.Namespaces.Add(_nameSpaces);
                CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
                CodeGeneratorOptions options = new CodeGeneratorOptions { BracingStyle = "C" };
                options.BlankLinesBetweenMembers = true;
                using (StreamWriter sw = new StreamWriter(_path))
                    provider.GenerateCodeFromCompileUnit(_unit, sw, options);
                //add to sol.
                Connect.CurrentProject.ProjectItems.AddFromFileCopy(_path);
            }
            catch
            {
            }
        }

        #endregion
    }
}