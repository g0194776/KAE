<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KJFramework.Net</name>
    </assembly>
    <members>
        <member name="T:KJFramework.Net.Session.BasicSession">
            <summary>
                基础的会话对象, 提供了相关的基本操作。
            </summary>
            <remarks>
                本会话对象仅支持基础的通讯。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Session.ISession">
            <summary>
                会话元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.ISession.Dispose">
            <summary>
                 销毁当前会话
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.ISession.BuildCode">
            <summary>
                 构建会话码
            </summary>
            <returns>返回构建后的唯一会话码</returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISession.BuildCode(KJFramework.Net.Builder.ISessionBuilder)">
            <summary>
                通过一个会话构造器来构造会话
            </summary>
            <param name="sessionBuilder" type="KJFramework.Net.Session.Builder.ISessionBuilder">
                <para>
                    会话构造器
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.StartTime">
            <summary>
                获取或设置会话初始时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.EndTime">
            <summary>
                获取或设置会话截止时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.Expire">
            <summary>
                获取或设置当前会话有效性
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.UserId">
            <summary>
                获取或设置会话的拥有者ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.UserSessionType">
            <summary>
                 得到当前会话类别
            </summary>
            <returns>返回当前会话类别</returns>
        </member>
        <member name="P:KJFramework.Net.Session.ISession.SessionCode">
            <summary>
                 获取或设置会话码
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.#ctor">
            <summary>
                基础的会话对象, 提供了相关的基本操作。
            </summary>
            <remarks>
                本会话对象仅支持基础的通讯。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.#ctor(System.Int32)">
            <summary>
                通过一个用户ID初始化构造
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.#ctor(System.DateTime)">
            <summary>
                通过一个会话对象的过期时间来初始化构造
                    * 此过期时间不能小于当前日期, 否则将会抛出异常。
            </summary>
            <param name="endTime" type="System.DateTime">
                <para>
                    过期时间
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.#ctor(System.Int32,System.DateTime)">
            <summary>
                通过一个用户ID以及会话对象的过期时间来初始化构造
                    * 此过期时间不能小于当前日期, 否则将会抛出异常。
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <param name="endTime" type="System.DateTime">
                <para>
                    过期时间
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.Initialize">
            <summary>
                会话初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.Dispose">
            <summary>
                 销毁当前会话
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.BuildCode">
            <summary>
                 构建会话码
            </summary>
            <returns>返回构建后的唯一会话码</returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSession.BuildCode(KJFramework.Net.Builder.ISessionBuilder)">
            <summary>
                通过一个会话构造器来构造会话
            </summary>
            <param name="sessionBuilder" type="KJFramework.Net.Session.Builder.ISessionBuilder">
                <para>
                    会话构造器
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.StartTime">
            <summary>
                获取或设置会话初始时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.EndTime">
            <summary>
                获取或设置会话截止时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.Expire">
            <summary>
                获取或设置当前会话有效性
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.UserId">
            <summary>
                获取或设置会话的拥有者ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.UserSessionType">
            <summary>
                 得到当前会话类别
            </summary>
            <returns>返回当前会话类别</returns>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSession.SessionCode">
            <summary>
                 获取或设置会话码
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.BasicMessageDispatcher">
            <summary>
                基础的消息分配器, 提供了相关的基本操作
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IMessageDispacher`3">
            <summary>
                消息分配器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.IMessageDispacher`3.DispatcherMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                根据流程处理消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要处理的消息
                </para>
            </param>
            <returns>
                返回处理后的消息
            </returns>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageDispacher`3.SpyManager">
            <summary>
                消息拦截器里列表
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageDispacher`3.HookList">
            <summary>
                消息钩子列表
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageDispacher`3.NakeDispatcher">
            <summary>
                内部消息分配器对象
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.BasicMessageDispatcher.#ctor">
            <summary>
                使用默认的基本核心消息分配器来初始化构造
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Message.BasicMessageDispatcher.#ctor(KJFramework.Net.Message.INakeDispatcher{KJFramework.Net.Deal.IDealer})" -->
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Message.BasicMessageDispatcher.#ctor(KJFramework.Net.Hook.IMessageHookList{KJFramework.Net.Hook.IMessageHook})" -->
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Message.BasicMessageDispatcher.#ctor(KJFramework.Net.Message.INakeDispatcher{KJFramework.Net.Deal.IDealer},KJFramework.Net.Hook.IMessageHookList{KJFramework.Net.Hook.IMessageHook})" -->
        <member name="M:KJFramework.Net.Message.BasicMessageDispatcher.DispatcherMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                根据流程处理消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要处理的消息
                </para>
            </param>
            <returns>
                返回处理后的消息
            </returns>
        </member>
        <member name="P:KJFramework.Net.Message.BasicMessageDispatcher.HookList">
            <summary>
                消息钩子列表
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicMessageDispatcher.NakeDispatcher">
            <summary>
                内部消息分配器对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicMessageDispatcher.SpyManager">
            <summary>
                消息拦截器里列表
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.BasicPortListenerInfomation">
            <summary>
                端口监听器详细信息基类，提供了相关的基本信息。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.IPortListenerInfomation">
            <summary>
                端口监听器详细信息元接口，提供了基本信息。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IPortListenerInfomation.ListenerID">
            <summary>
                获取或设置监听器唯一ID
                    * 可以使用Listener.GetHashCode()获得
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IPortListenerInfomation.ItemID">
            <summary>
                获取或设置监听器分组ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IPortListenerInfomation.ServiceID">
            <summary>
                获取或设置监听器服务ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IPortListenerInfomation.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicPortListenerInfomation.ListenerID">
            <summary>
                获取或设置监听器唯一ID
                    * 可以使用Listener.GetHashCode()获得
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicPortListenerInfomation.ItemID">
            <summary>
                获取或设置监听器分组ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicPortListenerInfomation.ServiceID">
            <summary>
                获取或设置监听器服务ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicPortListenerInfomation.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.Asynchronous.Obj.StateObject">
            <summary>
                异步套接字读取对象
            </summary>
        </member>
        <member name="F:KJFramework.Net.Listener.Asynchronous.Obj.StateObject.WorkSocket">
            <summary>
                工作套接字
            </summary>
        </member>
        <member name="F:KJFramework.Net.Listener.Asynchronous.Obj.StateObject.BufferSize">
            <summary>
                缓冲区大小
            </summary>
        </member>
        <member name="F:KJFramework.Net.Listener.Asynchronous.Obj.StateObject.Buffer">
            <summary>
                缓冲区
            </summary>
        </member>
        <member name="T:KJFramework.Net.Helper.IUdpMessageHelper">
            <summary>
                基于UDP协议的消息帮助器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Helper.IMessageHelper">
            <summary>
                消息帮助器元接口, 提供了相关的基本操作和相关属性结构
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.IMessageHelper.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.IMessageHelper.MessageHeaderEndFlag">
            <summary>
                获取或设置消息头结束标记
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.IMessageHelper.MessageHeaderFlag">
            <summary>
                获取或设置消息头标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.IMessageHelper.MessageHeaderFlagLength">
            <summary>
                获取或设置消息头标示长度
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.IMessageHelper.MessageHeaderLength">
            <summary>
                消息头长度
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.SendMessageHasNullException">
            <summary>
                要发送的消息为null异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.SendMessageHasNullException.#ctor">
            <summary>
                要发送的消息为null异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.InitializeFailedException">
            <summary>
                初始化失败异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UserDisconnectedEventArgs`1">
            <summary>
                用户断开连接事件
            </summary>
            <remarks>
                当用户失去与现有的服务器连接后，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UserDisconnectedEventArgs`1.#ctor(`0)">
            <summary>
                用户断开连接事件
            </summary>
            <param name="User" type="T">
                <para>
                    用户对象
                </para>
            </param>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TaskCheckerEndWorkEventArgs">
            <summary>
                任务检查器停止工作事件。
            </summary>
            <remarks>
                当一个任务管理器停止工作时，触发该事件。停止工作的原因一般都是当属性IsActive = false。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TaskCheckerEndWorkEventArgs.#ctor">
            <summary>
                任务检查器停止工作事件。
            </summary>
            <remarks>
                当一个任务管理器停止工作时，触发该事件。停止工作的原因一般都是当属性IsActive = false。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.SessionExpiredEventArgs`1">
            <summary>
                会话过期事件
            </summary>
            <remarks>
                当会话队列中某个会话对象超时过期后，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.SessionExpiredEventArgs`1.#ctor(`0)">
            <summary>
                会话过期事件
            </summary>
            <param name="ExpireSession" type="T">
                <para>
                    过期的会话对象
                </para>
            </param>
            <remarks>
                当会话队列中某个会话对象超时过期后，触发该事件。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.SessionExpiredEventArgs`1.ExpireSession">
            <summary>
                过期的会话对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.IocpPortListenerConnectedEventArgs`1">
            <summary>
                遵循完成端口模型的端口监听器连接事件
            </summary>
            <typeparam name="TListenerInfo">端口信息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.EventArgs.IocpPortListenerConnectedEventArgs`1.#ctor(System.Net.Sockets.Socket,`0)">
            <summary>
                遵循完成端口模型的端口监听器连接事件
            </summary>
            <param name="connectStream">连接者基础套接字</param>
            <param name="listenerInfo">端口信息类型</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.IocpPortListenerConnectedEventArgs`1.ConnectStream">
            <summary>
                连接者基础套接字
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.IocpPortListenerConnectedEventArgs`1.ListenerInfo">
            <summary>
                监听器信息
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.INetChannel`1">
            <summary>
                网络通道元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.INetChannel`1.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.INetChannel`1.Connect(System.Net.IPEndPoint)">
            <summary>
                连接
            </summary>
            <param name="ipendpoint">
                网络终结点
            </param>
        </member>
        <member name="M:KJFramework.Net.Channel.INetChannel`1.Disconnect">
            <summary>
                断开
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.INetChannel`1.Connected">
            <summary>
                获取或设置当前通道是否已经连接上。
                    * 如果当前通道作为宿主作用，则Connected属性为false。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.INetChannel`1.IsActive">
            <summary>
                获取一个值, 该值表示了当前通道的激活状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.INetChannel`1.Iep">
            <summary>
                获取或设置对方网络终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.INetChannel`1.ChannelProtocolType">
            <summary>
                获取或设置通道支持的协议类型
            </summary>
        </member>
        <member name="E:KJFramework.Net.Channel.INetChannel`1.ChannelConnected">
            <summary>
                通道已经连接上事件
            </summary>
        </member>
        <member name="E:KJFramework.Net.Channel.INetChannel`1.ChannelDisconnected">
            <summary>
                通道已经断开事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.BasicIMMessageBuilder">
            <summary>
                基础的基于IM即时通信的消息创建器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.IMessageBuilder">
            <summary>
                消息创建器元接口,  提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.IMessageBuilder.Build``1(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                通过一个消息的元数据（字节数组），来创建一个消息体
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="data">元数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回创建后的消息体</returns>
        </member>
        <member name="M:KJFramework.Net.Builder.BasicIMMessageBuilder.Build``1(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                通过一个消息的元数据（字节数组），来创建一个消息体
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="data">元数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回创建后的消息体</returns>
        </member>
        <member name="T:KJFramework.Net.Agent.IUdpServerAgent">
            <summary>
                UDP协议服务托管器元接口, 提供了相关的基本操作, 以及基本属性结构
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.IServerAgent">
            <summary>
                服务委托器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.IServerAgent.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.IServerAgent.CommitRequest(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
                向服务器提交需求反馈的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    提交的消息
                </para>
            </param>
            <param name="priority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    消息优先级
                </para>
            </param>
            <param name="autoCheckResult" type="bool">
                <para>
                   是否检测服务器反馈标示
                </para>
            </param>
            <param name="protocol">要返回消息包的协议编号</param>
            <param name="serviceKey">要返回协议包的服务编号 [可忽略，忽略值为： -1]</param>
            <param name="serviceItemIndex">要返回协议包的详细服务编号 [可忽略，忽略值为： -1]</param>
            <returns>
                返回null, 表示服务器暂时没有反馈。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Agent.IServerAgent.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.IServerAgent.NetMessageCommited">
            <summary>
                提交请求消息后事件
            </summary>
            <remarks>
                当客户端向服务器提交请求后, 将会触发该事件
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Agent.IUdpServerAgent.ResponseManager">
            <summary>
                UDP协议响应消息队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.IUdpServerAgent.Port">
            <summary>
                服务器端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.IUdpServerAgent.ServerIEP">
            <summary>
                服务器终结点
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.INakeDispatcher`1">
            <summary>
                内部消息处理元接口，提供了相关的消息属性处理结构
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.INakeDispatcher`1.DispatchMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                分配消息
            </summary>
            <param name="message">新的消息</param>
            <returns>返回回馈消息</returns>
        </member>
        <member name="P:KJFramework.Net.Message.INakeDispatcher`1.DealerFactory">
            <summary>
                消息处理工厂
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.BasicIstantMessageHeader">
            <summary>
                基本的消息头基类, 提供了基本的消息头属性结构, 以及相关的基本操作
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.MessageHeader">
            <summary>
                消息头抽象父类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IMessageHeader">
            <summary>
                消息头元接口, 提供了必要的消息头信息
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IContract">
            <summary>
                消息契约元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.IContract.ToBytes">
            <summary>
                转换为元数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.IContract.ToCustomerData">
            <summary>
                转换为第三方客户数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IContract.IsPickup">
            <summary>
                获取一个值，该值标示了当前消息是否已经从元数据转换到第三方客户数据成功 
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IContract.IsBind">
            <summary>
                获取一个值，该值标示了当前消息是否已经从第三方客户数据转换到元数据成功 
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.AutoAppendHeaderFlag">
            <summary>
                    获取是否自动将消息头标示打入消息头内容中的标记
                        * 如果该选项为true, 则如果您构造消息头数据的时候将不会在关心消息头标示的打入问题。
                        * 如果该选项为false, 则需要您自行打入消息头标示到消息头数据中。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.MessageFlagType">
            <summary>
                获取或设置网络消息标示类型
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.Body">
            <summary>
                获取或设置消息头数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.Head">
            <summary>
                获取消息头标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.Tail">
            <summary>
                获取消息尾部标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.Length">
            <summary>
                获取或设置长度
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.MessageType">
            <summary>
                获取或设置消息类型    
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.ProtocolKey">
            <summary>
                获取或设置请求的协议类型索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.ServiceKey">
            <summary>
                获取或设置命令类型索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessageHeader.ServiceItemIndex">
            <summary>
                获取或设置命令下层扩展类型索引
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.MessageHeader.ToBytes">
            <summary>
                转换为元数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.MessageHeader.ToCustomerData">
            <summary>
                转换为第三方客户数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.AutoAppendHeaderFlag">
            <summary>
                    获取是否自动将消息头标示打入消息头内容中的标记
                        * 如果该选项为true, 则如果您构造消息头数据的时候将不会在关心消息头标示的打入问题。
                        * 如果该选项为false, 则需要您自行打入消息头标示到消息头数据中。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.MessageFlagType">
            <summary>
                获取或设置网络消息标示类型
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.Body">
            <summary>
                获取或设置消息头数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.Head">
            <summary>
                获取消息头标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.Tail">
            <summary>
                获取消息尾部标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.Length">
            <summary>
                获取或设置长度
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.MessageType">
            <summary>
                获取或设置消息类型    
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.ProtocolKey">
            <summary>
                获取或设置请求的协议类型索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.ServiceKey">
            <summary>
                获取或设置命令类型索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.ServiceItemIndex">
            <summary>
                获取或设置命令下层扩展类型索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.IsPickup">
            <summary>
                获取一个值，该值标示了当前消息是否已经从元数据转换到第三方客户数据成功 
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.MessageHeader.IsBind">
            <summary>
                获取一个值，该值标示了当前消息是否已经从第三方客户数据转换到元数据成功 
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IIstantMessageHeader">
            <summary>
                即时消息消息头元接口, 提供了必要的消息头信息
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IExercisableState">
            <summary>
                可操作状态元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IExercisableState.Ack">
            <summary>
                获取或设置消息的回馈请求标示  : True - 需要回馈 / False - 不需要回馈
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IExercisableState.Zip">
            <summary>
                获取或设置消息的压缩标示        : True - 已被压缩 / False - 未被压缩
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IExercisableState.Encrypt">
            <summary>
                获取或设置消息的加密标示        : True - 已被加密 / False - 未被加密
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.TransferType">
            <summary>
                消息传输类型
            </summary>
            <remarks>
                此类型表示了该消息是直接点对点传递，还是经由服务器转发。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.TransByP2PChannel">
            <summary>
                获取或设置此消息是否经过P2P(点对点传递)
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.ExclusiveId">
            <summary>
                消息唯一序列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.SessionLength">
            <summary>
                会话长度
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.Session">
            <summary>
                获取或设置消息会话ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.Result">
            <summary>
                获取或设置处理结果 - 结果对应ServiceResultType枚举
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.DestUserID">
            <summary>
                获取或设置接收消息的用户ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.UserID">
            <summary>
                获取或设置发出请求的用户ID
            </summary>  
        </member>
        <member name="P:KJFramework.Net.Message.IIstantMessageHeader.VersionId">
            <summary>
                获取或设置版本ID
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.BasicIstantMessageHeader.#ctor(System.Boolean,KJFramework.Basic.Enum.NetMessageFlagType)">
            <summary>
                基本的消息头基类, 提供了基本的消息头属性结构, 以及相关的基本操作
            </summary>
            <param name="autoAppendHederFlag" type="bool">
                <para>
                    是否自动将消息头标示打入消息头内容中
                    如果该选项为true, 则如果您构造消息头数据的时候将不会在关心消息头标示的打入问题。
                    如果该选项为false, 则需要您自行打入消息头标示到消息头数据中。
                </para>
            </param>
            <param name="messageFlagType" type="KJFramework.Basic.Enum.NetMessageFlagType">
                <para>
                    消息标示类型
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Message.BasicIstantMessageHeader.#ctor(System.Boolean,KJFramework.Basic.Enum.NetMessageFlagType,System.Int32)">
             <summary>
                 基本的消息头基类, 提供了基本的消息头属性结构, 以及相关的基本操作
                     * 此构造适用于接受数据包时打入包的唯一序列。
             </summary>
             <param name="autoAppendHederFlag" type="bool">
                 <para>
                     是否自动将消息头标示打入消息头内容中
                     如果该选项为true, 则如果您构造消息头数据的时候将不会在关心消息头标示的打入问题。
                     如果该选项为false, 则需要您自行打入消息头标示到消息头数据中。
                 </para>
             </param>
             <param name="messageFlagType" type="KJFramework.Basic.Enum.NetMessageFlagType">
                 <para>
                     消息标示类型
                 </para>
             </param>
            <param name="exclusiveId">消息唯一序列</param>
        </member>
        <member name="M:KJFramework.Net.Message.BasicIstantMessageHeader.AppendHeaderFlag">
            <summary>
                在初始化消息头的同时, 将指定的消息头标示附加到消息头数据队列中
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.BasicIstantMessageHeader.ToBytes">
            <summary>
                转换为元数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.BasicIstantMessageHeader.ToCustomerData">
            <summary>
                转换为第三方客户数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.TransByP2PChannel">
            <summary>
                获取或设置此消息是否经过P2P(点对点传递)
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.TransferType">
            <summary>
                消息传输类型
            </summary>
            <remarks>
                此类型表示了该消息是直接点对点传递，还是经由服务器转发。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.SessionLength">
            <summary>
                会话长度
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.Session">
            <summary>
                获取或设置消息会话ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.Result">
            <summary>
                获取或设置处理结果 - 结果对应ServiceResultType枚举
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.DestUserID">
            <summary>
                获取或设置接收消息的用户ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.UserID">
            <summary>
                获取或设置发出请求的用户ID
            </summary>  
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.Ack">
            <summary>
                获取或设置消息的回馈请求标示  : True - 需要回馈 / False - 不需要回馈
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.Zip">
            <summary>
                获取或设置消息的压缩标示        : True - 已被压缩 / False - 未被压缩
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.Encrypt">
            <summary>
                获取或设置消息的加密标示        : True - 已被加密 / False - 未被加密
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.ExclusiveId">
            <summary>
                消息唯一序列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.BasicIstantMessageHeader.VersionId">
            <summary>
                获取或设置版本ID
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.IListener`1">
            <summary>
                监听器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IListener`1.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IListener`1.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="T:KJFramework.Net.Processor.IDataProcessor`1">
            <summary>
                数据处理器元接口, 提供了对于网络数据的相关处理功能。
            </summary>
            <typeparam name="TMessage">返回的消息类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Processor.IProcessor">
            <summary>
                处理器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Processor.IProcessor.IsEnable">
            <summary>
                获取或设置可用状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Processor.IProcessor.ID">
            <summary>
                获取或设置处理器ID（编号）
                    * 此编号可以与KEY相同。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Processor.IDataProcessor`1.Process(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                处理
            </summary>
            <param name="data">数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的消息</returns>
        </member>
        <member name="M:KJFramework.Net.Processor.IDataProcessor`1.ProcessPartData(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                处理部分数据
            </summary>
            <param name="data">数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的数据</returns>
        </member>
        <member name="T:KJFramework.Net.Message.AckableFileTransferMessage">
            <summary>
                可回馈的（1对1）文件传送回馈包
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.NetMessage">
            <summary>
                网络消息基类, 提供了基本的消息结构
                    * 该消息类可支持序列化操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IMessage">
            <summary>
                消息元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessage.SupportExercisable">
            <summary>
                获取可操作属性
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessage.IsThirdParty">
            <summary>
                获取一个值，该值指示了当前的消息体是否为第三方消息
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessage.Header">
            <summary>
                获取或设置消息头
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IMessage.Body">
            <summary>
                获取或设置消息体数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.NetMessage.#ctor">
            <summary>
                网络消息基类, 提供了基本的消息结构
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.NetMessage.#ctor(KJFramework.Net.Message.IMessageHeader)">
            <summary>
                网络消息基类, 提供了基本的消息结构
                    * 此构造适用于发送一个请求包
            </summary>
            <param name="messageHeader" type="KJFramework.Net.Message.IIstantMessageHeader">
                <para>
                    消息头
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Message.NetMessage.#ctor(KJFramework.Net.Message.IMessageHeader,System.Byte[])">
            <summary>
                网络消息基类, 提供了基本的消息结构
            </summary>
            <param name="messageHeader" type="KJFramework.Net.Message.IIstantMessageHeader">
                <para>
                    消息头
                </para>
            </param>
            <param name="body" type="byte[]">
                <para>
                    消息主体
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Message.NetMessage.#ctor(KJFramework.Net.Message.IMessageHeader,System.Byte[],System.Byte[])">
            <summary>
                网络消息基类, 提供了基本的消息结构
            </summary>
            <param name="messageHeader" type="KJFramework.Net.Message.IIstantMessageHeader">
                <para>
                    消息头
                </para>
            </param>
            <param name="body" type="byte[]">
                <para>
                    消息主体
                </para>
            </param>
            <param name="tag" type="byte[]">
                <para>
                    消息辅助信息
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.Body">
            <summary>
                获取或设置消息主体
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.Tag">
            <summary>
                获取或设置消息备注信息
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.AutoAppendMessageEndFlag">
            <summary>
                自动在消息内容末尾打入消息结束符
                    * 当设置该属性为true时，那么消息头中的消息内容长度请不要包括消息结尾标示的长度，否则将会抛出异常。
            </summary>
            <remarks>
                当此属性设置为True时，获取该消息的消息内容时，将会自动在消息内容的末尾追加消息的结束符。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.IsThirdParty">
            <summary>
                获取一个值，该值标示了当前消息体是不是一个第三方的消息体
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.SupportExercisable">
            <summary>
                获取可操作属性
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.NetMessage.Header">
            <summary>
                获取或设置消息头
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IThirdPartyMessage">
            <summary>
                第三方消息元接口，提供了相关的基本操作。
                    * 如果要使用除NetMessage以外的自定义消息体，请实现此接口。
                    * 请将第三方自定义消息体中的IsThirdPartyMessage属性设置为True。
                    * 第三方自定义消息体必须继承自NetMessage。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.IThirdPartyMessage.Bind">
            <summary>
                将第三方自定义数据绑定转化为字节数组，即NetMessage中的Body字段，并修改包头中的包体大小字段。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.IThirdPartyMessage.Pickup">
            <summary>
                将Body中的字节数组转换成第三方自定义数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IThirdPartyMessage.IsBind">
            <summary>
                获取一个值，该值表示了当前消息是否已经转换为元数据成功。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IThirdPartyMessage.IsPickup">
            <summary>
                获取一个值，该值表示了当前消息是否已经成功的转换为第三方自定义数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.CurrentID">
            <summary>
                获取或设置当前接收到的包ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.FrontID">
            <summary>
                获取或设置前一个接到的包ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.HopeID">
            <summary>
                获取或设置所期待的下一个包ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.ReceiveSize">
            <summary>
                获取或设置当前接收到包的大小
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.IsThirdParty">
            <summary>
                获取一个值，该值标示了当前消息体是不是一个第三方的消息体
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.IsBind">
            <summary>
                获取一个值，该值表示了当前消息是否已经转换为元数据成功。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.AckableFileTransferMessage.IsPickup">
            <summary>
                获取一个值，该值表示了当前消息是否已经成功的转换为第三方自定义数据
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1">
            <summary>
                基础的基于TCP协议的异步端口监听器 - 版本2
                        * 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型。
            </summary>
            <typeparam name="TListenerInfo">监听器类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Listener.ITcpIocpListener`1">
            <summary>
                遵循完成端口模型，基于TCP协议的端口监听器元接口
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.IPortListener">
            <summary>
                端口监听器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.IPortListener.Listen">
            <summary>
                监听
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IPortListener.Port">
            <summary>
                监听的端口
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.ITcpIocpListener`1.GetPedding">
            <summary>
                接受当前新的连接请求
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.ITcpIocpListener`1.Listener">
            <summary>
                获取TCP端口监听对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.ITcpIocpListener`1.ListenerInfomation">
            <summary>
                获取或设置端口监听器详细信息元接口
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.ITcpIocpListener`1.Connected">
            <summary>
                新用户连接事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.#ctor(System.Int32)">
            <summary>
                基础的基于TCP协议的异步端口监听器 - 版本2
                        * 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型
            </summary>
            <param name="port">端口号</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.#ctor(System.Net.IPEndPoint)">
            <summary>
                基础的基于TCP协议的异步端口监听器 - 版本2
                        * 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型
            </summary>
            <param name="ipEndPoint">绑定的本地终端地址</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Initialize">
            <summary>
                初始化操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                开始接受连接
            </summary>
            <param name="e">异步上下文对象</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                处理新连接事件
            </summary>
            <param name="e">异步上下文对象</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                记录异常
            </summary>
            <param name="e">异常对象</param>
            <param name="debugGrade">异常等级</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Listener">
            <summary>
                获取TCP端口监听对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.ListenerInfomation">
            <summary>
                获取或设置端口监听器详细信息元接口
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Connected">
            <summary>
                新用户连接事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Port">
            <summary>
                监听的端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListenerV2`1.Key">
            <summary>
            获取或设置用来约束所有对象的唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject">
            <summary>
                FS功能服务器连接基础对象。
                默认支持基于UDP协议的FS。
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.IConnectObject">
            <summary>
                连接对象元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.IConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.IConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.HreatAlertCount">
            <summary>
                获取或设置FS心跳警告次数
            </summary>
            <remarks>
                当FS刚刚注册还没有来得及心跳时，此警告次数代表了FS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.SupportProtocol">
            <summary>
                获取或设置支持的协议ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IFSConnectObject.SupportService">
            <summary>
                获取或设置支持的服务ID
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.UdpResponseManagerNotFoundException">
            <summary>
                UDP消息响应器未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.UdpResponseManagerNotFoundException.#ctor">
            <summary>
                UDP消息响应器未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.EndDateTimeUnCorrectException">
            <summary>
                结束时间设置错误异常
            </summary>
            <remarks>
                当结束时间小于当前时间则会触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.EndDateTimeUnCorrectException.#ctor">
            <summary>
                结束时间设置错误异常
            </summary>
            <remarks>
                当结束时间小于当前时间则会触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ServerStreamHasNullException">
            <summary>
                服务器网络流未设置
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ServerStreamHasNullException.#ctor">
            <summary>
                服务器网络流未设置
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.P2PChannelManagerNotFoundException">
            <summary>
                点对点通道管理器未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.P2PChannelManagerNotFoundException.#ctor">
            <summary>
                点对点通道管理器未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.HelperNotFoundException">
            <summary>
                没有找到帮助器异常
            </summary>
            <remarks>
                当解析接收数据时, 如果当前任务方法找不到帮助器, 则触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.HelperNotFoundException.#ctor">
            <summary>
                没有找到帮助器异常
            </summary>
            <remarks>
                当解析接收数据时, 如果当前任务方法找不到帮助器, 则触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.IRemotingServiceConnectObject_4Fs">
            <summary>
                支持远程服务调用的连接对象, 并提供了相关的基本操作。
                    * AS -> FS
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.IRemotingServiceConnectObject_4Fs.DispatcherMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                分派消息
            </summary>
            <param name="message">消息</param>
            <returns>返回消息结果</returns>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.IRemotingServiceConnectObject_4Fs.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IRemotingServiceConnectObject_4Fs.IpAddress">
            <summary>
                获取IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.IRemotingServiceConnectObject_4Fs.Port">
            <summary>
                获取服务端口
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.BasicChannelInfomation">
            <summary>
                基础的通道信息, 提供了相关的通道信息结构
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.IChannelInfomation">
            <summary>
                通道信息元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.IChannelInfomation.Port">
            <summary>
                获取或设置对方服务端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.IChannelInfomation.CreateTime">
            <summary>
                获取通道的创建时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.BasicChannelInfomation.Port">
            <summary>
                获取或设置对方服务端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.BasicChannelInfomation.CreateTime">
            <summary>
                获取通道的创建时间
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.BasicUdpResponseManager">
            <summary>
                基础的UDP消息响应器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.IUdpResponseManager">
            <summary>
                UDP协议消息响应管理器, 提供了基本的相关操作
            </summary>
            <remarks>
                此管理器适用于UDP协议
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Agent.IResponseManager">
            <summary>
                响应消息管理器
            </summary>
            <remarks>
                这里储存了由服务器反馈的相应消息。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Agent.IResponseManager.PopMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID    [可忽略，忽略值为：-1]
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.IResponseManager.Add(KJFramework.Net.Message.NetMessage)">
            <summary>
                向消息相应队列中加入新的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.IResponseManager.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID    [可忽略，忽略值为：-1]
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.IResponseManager.Push(KJFramework.Net.Message.NetMessage)">
            <summary>
                向服务器发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Agent.IResponseManager.Ttl">
            <summary>
                消息生命周期, 如果消息在当前队列中停留了该时间仍然没有被取出, 则会被移除出该队列中
                单位 : 毫秒
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.IResponseManager.Timeout">
            <summary>
                超时时间, 如果到了此时间仍然没有指定请求包, 则会抛出超时异常
                单位 : 毫秒
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.IResponseManager.NetMessageRemoved">
            <summary>
                移除响应队列中的超时消息事件
            </summary>
            <remarks>
                当响应队列中存在的消息超过自身的生命周期后，将会被移除出队列，从而触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Agent.IUdpResponseManager.Push(KJFramework.Net.Message.NetMessage,System.String,System.Int32)">
            <summary>
                根据服务器IP地址以及端口, 发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="ipAddress" type="string">
                <para>
                    IP地址
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.IUdpResponseManager.Push(KJFramework.Net.Message.NetMessage,System.Net.IPEndPoint,System.Int32)">
            <summary>
                根据服务器终结点以及端口, 发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    终结点
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    端口
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Agent.IUdpResponseManager.ServerClient">
            <summary>
                服务器网络对象
            </summary>
        </member>
        <member name="F:KJFramework.Net.Agent.BasicUdpResponseManager._netMessageCollection">
            <summary>
                存放消息响应的集合
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.#ctor">
            <summary>
               基础的UDP协议消息响应管理器, 提供了相应的基本操作
               使用才构造函数后，当向服务器发送消息请求时，请使用带网络流的Push()重载方法，
               否则将会抛出UDP端异常。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.#ctor(System.Net.Sockets.UdpClient)">
            <summary>
               基础的UDP协议消息响应管理器, 提供了相应的基本操作
            </summary>
            <param name="serverClient">
               服务器的UDP端对象
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.Push(KJFramework.Net.Message.NetMessage,System.String,System.Int32)">
            <summary>
                根据服务器IP地址以及端口, 发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="ipAddress" type="string">
                <para>
                    IP地址
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.Push(KJFramework.Net.Message.NetMessage,System.Net.IPEndPoint,System.Int32)">
            <summary>
                根据服务器终结点以及端口, 发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="serverIep" type="System.Net.IPEndPoint">
                <para>
                    终结点
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.PopMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.Add(KJFramework.Net.Message.NetMessage)">
            <summary>
                向消息响应队列中加入新的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.Push(KJFramework.Net.Message.NetMessage)">
            <summary>
                向服务器发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicUdpResponseManager.GetMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                循环获取指定消息 [内部方法]
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回null, 表示不存在
            </returns>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicUdpResponseManager.ServerClient">
            <summary>
                服务器网络对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicUdpResponseManager.Ttl">
            <summary>
                消息生命周期, 如果消息在当前队列中停留了该时间仍然没有被取出, 则会被移除出该队列中
                单位 : 毫秒
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicUdpResponseManager.Timeout">
            <summary>
                超时时间, 如果到了此时间仍然没有指定请求包, 则会抛出超时异常
                单位 : 毫秒
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.BasicUdpResponseManager.NetMessageRemoved">
            <summary>
                移除响应队列中的超时消息事件
            </summary>
            <remarks>
                当响应队列中存在的消息超过自身的生命周期后，将会被移除出队列，从而触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Session.ISessionManager`1">
            <summary>
                会话管理器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.Register(`0)">
            <summary>
                向会话队列中注册会话对象
            </summary>
            <param name="session" type="T">
                <para>
                    会话对象
                </para>
            </param>
            <returns>
                返回false, 表示注册失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.Remove(`0)">
            <summary>
                从会话队列移除指定会话对象
            </summary>
            <param name="session" type="T">
                <para>
                    会话对象
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.Remove(System.Int32)">
            <summary>
                根据用户ID移除该用户ID属于的会话对象
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.Remove(System.String)">
            <summary>
                根据会话码移除会话对象
            </summary>
            <param name="sessionCode" type="string">
                <para>
                    会话码
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.GetSession(System.Int32)">
            <summary>
                通过一个用户ID查找属于该用户的会话对象
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.ISessionManager`1.GetSession(System.String)">
            <summary>
                通过一个会话码查找会话对象
            </summary>
            <param name="sessionCode" type="string">
                <para>
                    会话码
                </para>
            </param>
            <returns>
                 返回null, 表示不存在。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Session.ISessionManager`1.Sessions">
            <summary>
                获取会话队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.ISessionManager`1.IsActive">
            <summary>
                获取或设置当前的激活状态。
            </summary>
        </member>
        <member name="E:KJFramework.Net.Session.ISessionManager`1.SessionExpire">
            <summary>
                会话过期事件
            </summary>
            <remarks>
                当会话队列中某个会话对象超时过期后，触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Listener.IUdpListener">
            <summary>
                UDP端口监听器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.IUdpListener.HookAndSendMessage(KJFramework.Net.Message.NetMessage,System.Net.IPEndPoint)">
            <summary>
                发送消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    被发送的消息    
                </para>
            </param>
            <param name="iep" type="System.Net.IPEndPoint">
                <para>
                    发送到的网络终结点
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Listener.IUdpListener.UdpClient">
            <summary>
                获取UDP端口监听对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.IUdpListener.MessageHookList">
            <summary>
                获取或设置消息钩子链表
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.IUdpListener.ListenerStarted">
            <summary>
                UDP端口监听器开始监听事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.Recevier.ITcpMessageRecevier">
            <summary>
                基于TCP协议的消息接收器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="T:KJFramework.Net.Recevier.IMessageRecevier`2">
            <summary>
                消息接收器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.IMessageRecevier`2.SpyManager">
            <summary>
                获取或设置消息拦截器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.IMessageRecevier`2.HookList">
            <summary>
                获取或设置消息钩子链表
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.IMessageRecevier`2.Parser">
            <summary>
                获取或设置解析器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.IMessageRecevier`2.BufferPool">
            <summary>
                获取或设置缓冲池
            </summary>
        </member>
        <member name="E:KJFramework.Net.Recevier.IMessageRecevier`2.NewMessageArrive">
            <summary>
                接收消息事件
            </summary>
            <remarks>
                当接收到新的消息后, 激发此事件
            </remarks>
        </member>
        <member name="E:KJFramework.Net.Recevier.IMessageRecevier`2.Disconnected">
            <summary>
                接收器断开连接事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.ITcpMessageRecevier.Socket">
            <summary>
                用户套接字
            </summary>
        </member>
        <member name="E:KJFramework.Net.Recevier.ITcpMessageRecevier.ReceivedData">
            <summary>
                接收到数据事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.ProtocolStacks.ProtocolStack`1">
            <summary>
              协议栈抽象父类，提供了相关的基本操作。
            </summary>
            <typeparam name="T">协议栈中父类消息的类型。</typeparam>
        </member>
        <member name="T:KJFramework.Net.ProtocolStacks.IProtocolStack`1">
            <summary>
                协议栈元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">协议栈中父类消息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.IProtocolStack`1.Initialize">
            <summary>
                初始化
            </summary>
            <returns>返回初始化的结果</returns>
            <exception cref="T:KJFramework.Net.Exception.InitializeFailedException">初始化失败</exception>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.IProtocolStack`1.Parse(System.Byte[])">
            <summary>
                解析元数据
            </summary>
            <param name="data">元数据</param>
            <returns>返回能否解析的一个标示</returns>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.IProtocolStack`1.ConvertToBytes(`0)">
            <summary>
                将一个消息转换为2进制形式
            </summary>
            <param name="message">需要转换的消息</param>
            <returns>返回转换后的2进制</returns>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.IProtocolStack`1.ConvertMultiMessage(`0,System.Int32)">
            <summary>
                将一个消息转换为多个分包二进制数据
            </summary>
            <param name="message">消息</param>
            <param name="maxSize">封包片最大容量</param>
            <returns>返回转换后的2进制集合</returns>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.ProtocolStack`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.ProtocolStack`1.Initialize">
            <summary>
                初始化
            </summary>
            <returns>返回初始化的结果</returns>
            <exception cref="T:KJFramework.Net.Exception.InitializeFailedException">初始化失败</exception>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.ProtocolStack`1.Parse(System.Byte[])">
            <summary>
                解析元数据
            </summary>
            <param name="data">元数据</param>
            <returns>返回能否解析的一个标示</returns>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.ProtocolStack`1.ConvertToBytes(`0)">
            <summary>
                将一个消息转换为2进制形式
            </summary>
            <param name="message">需要转换的消息</param>
            <returns>返回转换后的2进制</returns>
        </member>
        <member name="M:KJFramework.Net.ProtocolStacks.ProtocolStack`1.ConvertMultiMessage(`0,System.Int32)">
            <summary>
                将一个消息转换为多个分包二进制数据
            </summary>
            <param name="message">消息</param>
            <param name="maxSize">封包片最大容量</param>
            <returns>返回转换后的2进制集合</returns>
        </member>
        <member name="T:KJFramework.Net.Helper.FsHelper">
            <summary>
                FS帮助器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.FsHelper.FSHreatTimeSpan">
            <summary>
                FS心跳检测间隔
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.FsHelper.FSHreatAlertCount">
            <summary>
                FS心跳警告次数
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.FsHelper.FSHreatTimeout">
            <summary>
                FS心跳超时时间
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.FsHelper.DefalutPredominantCpuUsage">
            <summary>
                默认的优秀CPU使用率性能指标
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.FsHelper.DefalutPredominantMemoryUsage">
            <summary>
                默认的内存使用率性能指标
            </summary>
        </member>
        <member name="T:KJFramework.Net.Factory.INetMessageFactory`1">
            <summary>
                网络消息工厂元接口，提供了对于创造网络消息的基础操作。
            </summary>
            <typeparam name="TProduct">产品类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Factory.INetMessageFactory`1.CreateTestMessage">
            <summary>
                创造一个测试包
                    * 此创造测试包方法，用于创建一个在网络上能够测试连通状态的网络包。
            </summary>
            <returns>返回一个测试网络包</returns>
        </member>
        <member name="M:KJFramework.Net.Factory.INetMessageFactory`1.CreateTestMessage``1(System.Int32)">
            <summary>
                创造一个测试包
            </summary>
            <typeparam name="TXProduct">测试包类型</typeparam>
            <param name="id">类型ID</param>
            <returns>返回一个测试网络包</returns>
        </member>
        <member name="T:KJFramework.Net.Exception.ProtocolKeyUnCorrectException">
            <summary>
                协议ID错误异常
            </summary>
            <remarks>
                当协议ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ProtocolKeyUnCorrectException.#ctor">
            <summary>
                协议ID错误异常
            </summary>
            <remarks>
                当协议ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ListenPortUnCorrectException">
            <summary>
                监听端口非法异常
            </summary>
            <remarks>
                当监听的端口小于等于0 时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ListenPortUnCorrectException.#ctor">
            <summary>
                监听端口非法异常
            </summary>
            <remarks>
                当监听的端口小于等于0 时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.QueueEmptyEventArgs">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.QueueEmptyEventArgs.#ctor(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                数据队列已空事件
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    为空的数据队列优先级
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.QueueEmptyEventArgs.Priority">
            <summary>
                优先级
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.IAckableTransmissionChannel`2">
            <summary>
                支持通过一对一传输结果反馈的传输通道，提供了相关的基本操作。
            </summary>
            <typeparam name="TServerAgent">服务委托器类型</typeparam>
            <typeparam name="TCache">缓存类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.ITransferable`1">
            <summary>
                点对点传输通道元接口，提供了点对点间，传输持续数据的相关基本操作。
                    * 在传输通道中，如果您感觉默认自带的自动发送器性能不好，那么您可以指定自己的“自动发送器”类型。
                    * 通过指定通道信息类型，您可以为该传输通道建立唯一标示。
                    * 为了更好的创建一个对应的传输消息，您必须通过“MessageBuilder”属性来指定自己的传输消息创建器。
            </summary>
            <typeparam name="TCache">缓存类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Channel.Transmission.ITransferable`1.Send(`0,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                将要发送的字节数组直接打入传输队列
                    * 注意：调用此方法发送的字节数组不会经过消息创建器进行转换。
            </summary>
            <param name="data">数据</param>
            <param name="dataPriority">传送优先级</param>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.ITransferable`1.Sending">
            <summary>
                获取当前是否正在传输数据的标志位
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.ITransmissonAckable`1">
            <summary>
                可接受回馈传输接口，提供了可对应回馈一对一传输的相关操作。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.ITransmissonAckable`1.ServerAgent">
            <summary>
                获取服务委托器
                    * 该委托器用来传输支持可回馈的持久数据
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.ITransmissonAckable`1.Timeout">
            <summary>
                获取或设置超时时间
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.IBuilder`1">
            <summary>
                创建器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.IBuilder`1.Build">
            <summary>
                创建一个具有指定类型的对象
            </summary>
            <returns>返回创建后的类型对象</returns>
        </member>
        <member name="T:KJFramework.Net.Builder.ExclusiveIdBuilder">
            <summary>
                消息唯一序列创建器
            </summary>
        </member>
        <member name="F:KJFramework.Net.Builder.ExclusiveIdBuilder.Builder">
            <summary>
                消息唯一序列创建器
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.ExclusiveIdBuilder.Build">
            <summary>
                创建一个具有指定类型的对象
            </summary>
            <returns>返回创建后的类型对象</returns>
        </member>
        <member name="T:KJFramework.Net.Agent.ITcpServerAgent">
            <summary>
                TCP协议服务托管器元接口, 提供了相关的基本操作, 以及基本属性结构
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.ITcpServerAgent.ResponseManager">
            <summary>
                TCP协议响应消息队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.ITcpServerAgent.ServerStream">
            <summary>
                服务器链接
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.ITcpServerAgent.ServerDisconnected">
            <summary>
                服务器断开事件
            </summary>
            <remarks>
                当与服务器的TCP连接断开后, 触发该事件
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Observer.IObservable`1">
            <summary>
                可观察接口，提供了对于一个对象的观察需求。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Observer.IObservable`1.Notify(KJFramework.Net.Message.NetMessage)">
            <summary>
                通知所有观察者
            </summary>
            <param name="message">新消息</param>
        </member>
        <member name="P:KJFramework.Net.Observer.IObservable`1.Observers">
            <summary>
                获取或设置观察者集合
            </summary>
        </member>
        <member name="T:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier">
            <summary>
                基础的基于TCP协议的消息接收器，提供了相关的基本操作。
                <para>* 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型。</para>
            </summary>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.#ctor">
            <summary>
                基础的基于TCP协议的消息接收器，提供了相关的基本操作。
                        * 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.#ctor(System.Net.Sockets.Socket)">
            <summary>
                基础的基于TCP协议的消息接收器，提供了相关的基本操作。
                        * 异步机制基于 .NET FRAMEWORK 3.5中的新Socket异步模型。
            </summary>
            <param name="socket">套接字</param>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.CheckAvailable(System.Net.Sockets.Socket)">
            <summary>
                检测套接字可用性
            </summary>
            <param name="socket">要检测的套接字</param>
            <returns>返回检测后的结果</returns>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.PrepareReceive">
            <summary>
                准备接收
            </summary>
            <returns>异步上下文对象</returns>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.StartReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                开始接收数据
            </summary>
            <param name="e">异步上下文对象</param>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                处理接收的数据
            </summary>
            <param name="e">异步上下文对象</param>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.ProcessData(System.Byte[])">
            <summary>
                处理数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Socket">
            <summary>
                用户套接字
            </summary>
        </member>
        <member name="E:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.ReceivedData">
            <summary>
                接收到数据事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.SpyManager">
            <summary>
                获取或设置消息拦截器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.HookList">
            <summary>
                获取或设置消息钩子链表
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Parser">
            <summary>
                获取或设置解析器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.BufferPool">
            <summary>
                获取或设置缓冲池
            </summary>
        </member>
        <member name="E:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.NewMessageArrive">
            <summary>
                接收消息事件
            </summary>
            <remarks>
                当接收到新的消息后, 激发此事件
            </remarks>
        </member>
        <member name="E:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Disconnected">
            <summary>
                接收器断开连接事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.BasicTcpAsynMessageRecevier.Key">
            <summary>
                获取或设置用来约束所有对象的唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Hook.IMessageHookList`1">
            <summary>
                消息钩子链表元接口, 提供了基本的相关操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Hook.IMessageHookList`1.DispatcherMessgae(KJFramework.Net.Message.NetMessage)">
            <summary>
                使用内部消息钩子逐一进行处理，并返回最终处理后的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要处理的消息
                </para>
            </param>
            <returns>
                返回最终处理后的消息
            </returns>
        </member>
        <member name="T:KJFramework.Net.Helper.UserHelper">
            <summary>
                用户帮助器
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.UserHelper.UserHreatTimeSpan">
            <summary>
                用户心跳检测间隔
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.UserHelper.UserHreatAlertCount">
            <summary>
                用户心跳警告次数
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.UserHelper.UserHreatTimeout">
            <summary>
                用户心跳超时时间
            </summary>
        </member>
        <member name="T:KJFramework.Net.Helper.SessionHelper">
            <summary>
                会话层帮助器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.SessionHelper.BasicSessionString">
            <summary>
                基础会话ID字符模板
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.SessionHelper.SessionExpireCheckTimeSpan">
            <summary>
                会话过期检测间隔时间
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.UserNetworkNotFoundException">
            <summary>
                用户网络流未找到异常
            </summary>
            <remarks>
                当程序使用自身模块存在的网络流，并且该流为null,时触发此异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.UserNetworkNotFoundException.#ctor">
            <summary>
                用户网络流未找到异常
            </summary>
            <remarks>
                当程序使用自身模块存在的网络流，并且该流为null,时触发此异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.NetMessageHelperHasNullException">
            <summary>
               网络消息帮助器未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.NetMessageHelperHasNullException.#ctor">
            <summary>
               网络消息帮助器未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.NetMessageFlagTypeUnCorrectException">
            <summary>
                消息标示类型不合法异常
            </summary>
            <remarks>
                当一个消息的标示类型被设置成Arrive(接收)时，却又要附加消息头标示在消息内容字节数组中，则会触发该异常， 还有如下情况将会触发该异常：
                   * 发送一个消息请求时，如果要发送的消息为接收标示类型，而不是发送标示类型，则触发异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.NetMessageFlagTypeUnCorrectException.#ctor">
            <summary>
                消息标示类型不合法异常
            </summary>
            <remarks>
                当一个消息的标示类型被设置成Arrive(接收)时，却又要附加消息头标示在消息内容字节数组中，则会触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.LengthUnCorrectException">
            <summary>
                消息体长度不相等异常
            </summary>
            <remarks>
                当消息体长度与消息头部中的消息体长度不相等时，触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.LengthUnCorrectException.#ctor">
            <summary>
                消息体长度不相等异常
            </summary>
            <remarks>
                当消息体长度与消息头部中的消息体长度不相等时，触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.GetResponseMessageTimeoutException">
            <summary>
                获取指定的响应消息超异常
            </summary>
            <remarks>
                当获取的消息在指定时间内仍然不存在，则触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.GetResponseMessageTimeoutException.#ctor">
            <summary>
                获取指定的响应消息超异常
            </summary>
            <remarks>
                当获取的消息在指定时间内仍然不存在，则触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ChannelDisconnectedEventArgs">
            <summary>
                通道已经断开事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ChannelDisconnectedEventArgs.#ctor(System.Int32)">
            <summary>
                通道已经断开事件
            </summary>
            <param name="Key">通道唯一标示类型</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelDisconnectedEventArgs.Key">
            <summary>
                通道唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.MessageHeaderFillDataUnCorrectException">
            <summary>
                消息头数据填充非法异常
            </summary>
            <remarks>
                当填充的数据不符合规范时, 触发该异常
                   * 填充的数据为null
                   * 填充的数据长度小于0
                   * 填充数据的偏移小于0
                   * 填充的数据长度大于规定的消息头长度
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.MessageHeaderFillDataUnCorrectException.#ctor">
            <summary>
                消息头数据填充非法异常
            </summary>
            <remarks>
                当填充的数据不符合规范时, 触发该异常
                   * 填充的数据为null
                   * 填充的数据长度不大与0
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Channel.Group.IGroupOperation`2">
            <summary>
                组操作元接口，抽象的定义组所支持的基础方法。
            </summary>
            <typeparam name="TChannel">通道类型</typeparam>
            <typeparam name="TChannelInfomation">通道描述信息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.Connect">
            <summary>
                连接当前组中所包含的所有通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.Connect(System.Int32)">
            <summary>
                连接当前组中具有指定唯一键值的通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.Disconnect">
            <summary>
                断开当前组中所包含的所有通道连接。
                    * 前提是当前组的IsPack属性为false。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.Disconnect(System.Int32)">
            <summary>
                断开当前组中具有指定唯一键值的通道连接。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.GetChannel(System.Int32)">
            <summary>
                获取当前组中具有指定唯一键值的通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.IGroupOperation`2.Find(System.Int32)">
            <summary>
                从当前组中查找是否存在具有指定唯一键值的通道存在。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
            <returns>如果返回false, 则表示不存在</returns>
        </member>
        <member name="T:KJFramework.Net.XSocket">
            <summary>
                Socket(套接字)扩展类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.XSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
                Socket(套接字)扩展类，提供了相关的基本操作。
            </summary>
            <param name="addressFamily">指定 Socket 类的实例可以使用的寻址方案。</param>
            <param name="socketType">指定 Socket 类的实例表示的套接字类型</param>
            <param name="protocolType">指定 Socket 类支持的协议。</param>
        </member>
        <member name="M:KJFramework.Net.XSocket.#ctor(System.Net.Sockets.SocketInformation)">
            <summary>
                Socket(套接字)扩展类，提供了相关的基本操作。
            </summary>
            <param name="socketInformation">对复制 Socket 时所需的信息进行封装。</param>
        </member>
        <member name="M:KJFramework.Net.XSocket.Pending">
            <summary>
                确定是否有挂起的连接请求。
            </summary>
            <returns>如果返回false, 则表示没有挂起的请求</returns>
        </member>
        <member name="M:KJFramework.Net.XSocket.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                将消息发送到连接的 Socket。
            </summary>
            <param name="message">消息</param>
            <returns>返回-1代表发送失败。</returns>
        </member>
        <member name="M:KJFramework.Net.XSocket.CheckConnection">
            <summary>
                检测当前Socket是否连接正常
            </summary>
            <returns>返回false,表示已经断开。</returns>
        </member>
        <member name="M:KJFramework.Net.XSocket.GetData(KJFramework.Net.Message.NetMessage)">
            <summary>
                获取消息体的字节数组形式数据
            </summary>
            <param name="message">消息体</param>
            <returns>返回字节数组形式的消息数据</returns>
        </member>
        <member name="T:KJFramework.Net.UPnP">
            <summary>
                提供了基础的路由UPNP穿透功能
            </summary>
        </member>
        <member name="F:KJFramework.Net.UPnP._descUrl">
            <summary>
                描述URL
            </summary>
        </member>
        <member name="F:KJFramework.Net.UPnP._serviceUrl">
            <summary>
                服务URL
            </summary>
        </member>
        <member name="F:KJFramework.Net.UPnP._eventUrl">
            <summary>
                事件URL
            </summary>
        </member>
        <member name="M:KJFramework.Net.UPnP.Check">
            <summary>
                检测当前服务器是否支持UPNP功能
            </summary>
            <returns>返回false, 则表示不支持</returns>
        </member>
        <member name="M:KJFramework.Net.UPnP.GetServiceUrl(System.String)">
            <summary>
                获取路由器服务地址
            </summary>
            <param name="resp">请求内容</param>
            <returns>返回路由器真实地址</returns>
        </member>
        <member name="M:KJFramework.Net.UPnP.ForwardPort(System.Int32,System.Int32,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
                向路由器中注册UPNP端口
            </summary>
            <param name="port">本机端口</param>
            <param name="routerPort">要映射到的路由器端口</param>
            <param name="protocol">协议</param>
            <param name="description">描述</param>
        </member>
        <member name="M:KJFramework.Net.UPnP.DeleteForwardingRule(System.Int32,System.Net.Sockets.ProtocolType)">
            <summary>
                删除路由器中的映射端口
            </summary>
            <param name="port">路由器中的映射端口</param>
            <param name="protocol">协议</param>
        </member>
        <member name="M:KJFramework.Net.UPnP.GetExternalIP">
            <summary>
                得到公网真实地址
            </summary>
            <returns>返回公网地址</returns>
        </member>
        <member name="M:KJFramework.Net.UPnP.SOAPRequest(System.String,System.String,System.String)">
            <summary>
                私有方法，序列化请求URL
            </summary>
            <param name="url">请求URL</param>
            <param name="soap">请求内容</param>
            <param name="function">请求功能</param>
            <returns></returns>
        </member>
        <member name="P:KJFramework.Net.UPnP.TimeOut">
            <summary>
                获取或设置超时时间
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender">
            <summary>
                基础的基于TCP协议的文件传送自动发送器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.TCP.ITcpAutoSender`1">
            <summary>
                提供了基于TCP协议的自动发送器的功能支持。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.IAutoSender`1">
            <summary>
                自动发送器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.ISender`1">
            <summary>
                发送器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.ISender`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.ISender`1.Dispose">
            <summary>
                销毁
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.ISender`1.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.IAutoSender`1.Send(`0)">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.IAutoSender`1.Clear">
            <summary>
                清除所有队列中的数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.IAutoSender`1.Clear(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                清除具有指定优先级的队列数据
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.IAutoSender`1.GetInnerQueue(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.IAutoSender`1.Add(`0,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.IAutoSender`1.Port">
            <summary>
                获取或设置服务器通讯端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.IAutoSender`1.DisclaredIndex">
            <summary>
                数据包存放数量上限
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:KJFramework.Net.Sender.AutoSender.IAutoSender`1.DataDisclare" -->
        <member name="E:KJFramework.Net.Sender.AutoSender.IAutoSender`1.QueueEmpty">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.ITcpAutoSender`1.ServerStream">
            <summary>
                服务器网络流
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.ITcpAutoSender`1.IpAddress">
            <summary>
                服务器IP地址
            </summary>
        </member>
        <member name="F:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender._queues">
            <summary>
                队列对象集合
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.#ctor">
            <summary>
                基础的基于TCP协议的文件传送自动发送器,  提供了相关的基本操作。
                    * 使用此构造需要另行指定服务器的网络流。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.#ctor(KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的文件传送自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.#ctor(KJFramework.Net.XNetworkStream,System.Int32)">
            <summary>
                基础的基于TCP协议的文件传送自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
            <param name="disclareIndex" type="int">
                <para>
                    数据包存放数量上限
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Send(System.Byte[])">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Clear">
            <summary>
                清除所有队列中的数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Clear(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                清除具有指定优先级的队列数据
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.GetInnerQueue(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Add(System.Byte[],KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Dispose">
            <summary>
                销毁
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Task">
            <summary>
                内部任务检测
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.ServerStream">
            <summary>
                服务器网络流
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.IpAddress">
            <summary>
                服务器IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Port">
            <summary>
                获取或设置服务器通讯端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.DisclaredIndex">
            <summary>
                数据包存放数量上限
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.DataDisclare" -->
        <member name="E:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.QueueEmpty">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.TCP.BasicFileTransferTcpAutoSender.TASK_SENDMESSAGE">
            <summary>
                任务执行委托
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.BasicNakeDispatcher">
            <summary>
                基础的核心消息分配器, 提供了相关的属性结构, 以及相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Message.BasicNakeDispatcher.#ctor">
            <summary>
                初始化核心消息分配器, 内置的消息处理工厂请另行设置，否则将会抛出异常。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Message.BasicNakeDispatcher.#ctor(KJFramework.Net.Deal.IDealerFactory{KJFramework.Net.Deal.IDealer})" -->
        <member name="M:KJFramework.Net.Message.BasicNakeDispatcher.DispatchMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                分配消息
            </summary>
            <param name="message">新消息</param>
            <returns>返回回馈消息</returns>
        </member>
        <member name="P:KJFramework.Net.Message.BasicNakeDispatcher.DealerFactory">
            <summary>
                消息处理工厂
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ITcpConnectObject">
            <summary>
                TCP连接对象元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.INetConnectObject">
            <summary>
                支持基于网络协议通讯的连接对象元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.INetConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.INetConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.INetConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.INetConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.INetConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ITcpConnectObject.ConnectStream">
            <summary>
                获取或设置基本连接流
            </summary>
        </member>
        <member name="T:KJFramework.Net.QueueObject.MessageQueueStruct">
            <summary>
                消息队列对象结构体，提供了相关的属性操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.QueueObject.MessageQueueStruct.Message">
            <summary>
                要发送的消息
            </summary>
        </member>
        <member name="F:KJFramework.Net.QueueObject.MessageQueueStruct.Address">
            <summary>
                远程终端地址
            </summary>
        </member>
        <member name="F:KJFramework.Net.QueueObject.MessageQueueStruct.ConnectFlags">
            <summary>
                获取或设置连接标示 
            </summary>
        </member>
        <member name="T:KJFramework.Net.Processor.BasicImMessageProcessor">
            <summary>
                基础的基于IM即时通讯的消息处理器
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._bufferPoolLength">
            <summary>
                保存缓冲区长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._firstIndex">
            <summary>
                保存第一次出现的位置
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._messageHeader">
            <summary>
                消息头
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._offset">
            <summary>
                计算偏移
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._orderhead">
            <summary>
                头部命令
            </summary>
        </member>
        <member name="F:KJFramework.Net.Processor.BasicImMessageProcessor._realCount">
            <summary>
                实际长度
            </summary>
        </member>
        <member name="M:KJFramework.Net.Processor.BasicImMessageProcessor.#ctor">
            <summary>
                基础的基于IM即时通讯的消息处理器
            </summary>
        </member>
        <member name="M:KJFramework.Net.Processor.BasicImMessageProcessor.Process(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                处理
            </summary>
            <param name="data">数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的消息</returns>
        </member>
        <member name="M:KJFramework.Net.Processor.BasicImMessageProcessor.ProcessPartData(System.Byte[],KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                处理部分数据
            </summary>
            <param name="data">数据</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的数据</returns>
        </member>
        <member name="M:KJFramework.Net.Processor.BasicImMessageProcessor.GetMessageData(System.Byte[]@,KJFramework.Net.Buffer.IBufferPool,System.Int32@)">
            <summary>
                从一个数据原始流中提取消息数据
            </summary>
            <param name="rawData">数据原始流</param>
            <param name="bufferPool">缓冲池</param>
            <param name="leave">剩余字节 [out]</param>
            <returns>返回提取出的消息数据</returns>
        </member>
        <member name="P:KJFramework.Net.Processor.BasicImMessageProcessor.IsEnable">
            <summary>
                获取或设置可用状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Processor.BasicImMessageProcessor.ID">
            <summary>
                获取或设置处理器ID（编号）
                    * 此编号可以与KEY相同。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Processor.BasicImMessageProcessor.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Hook.ICompressMessageHook">
            <summary>
                提供了具有基本压缩/解压缩功能的消息钩子
            </summary>
        </member>
        <member name="T:KJFramework.Net.Hook.IMessageHook">
            <summary>
                消息钩子元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Hook.IMessageHook.HookBeforeSendMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                处理发送之前的网络消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要发送的消息
                </para>
            </param>
            <returns>
                返回处理后的消息
            </returns>
        </member>
        <member name="M:KJFramework.Net.Hook.IMessageHook.HookArriveMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                处理接收到的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    接收到的消息
                </para>
            </param>
            <returns>
                返回处理后的消息
            </returns>
        </member>
        <member name="P:KJFramework.Net.Hook.IMessageHook.CanCallNextHook">
            <summary>
                获取或设置是否可以调用下一个钩子进行处理的标示
            </summary>
            <remarks>
                如果 CanCallNextHook = false, 则当前Hook消息的行为只到此钩子处理后为止，
                然后会直接去为此消息分配消息处理器
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Hook.ICompressMessageHook.Compress(KJFramework.Net.Message.NetMessage)">
            <summary>
                压缩消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要压缩的消息对象
                </para>
            </param>
            <returns>
                返回压缩后的消息
            </returns>
        </member>
        <member name="M:KJFramework.Net.Hook.ICompressMessageHook.Decompress(KJFramework.Net.Message.NetMessage)">
            <summary>
                解压缩消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要解压缩的消息对象
                </para>
            </param>
            <returns>
                返回解压缩后的消息
            </returns>
        </member>
        <member name="T:KJFramework.Net.Exception.TransmessionMessageBuilderNotFoundException">
            <summary>
                传输消息创建器未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.TransmessionMessageBuilderNotFoundException.#ctor">
            <summary>
                传输消息创建器未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageRecevierHasNullException">
            <summary>
                消息接收器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageRecevierHasNullException.#ctor">
            <summary>
                消息接收器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.DisclareIndexUnCorrectException">
            <summary>
                被抛弃的数目上限设置不正确 
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.DisclareIndexUnCorrectException.#ctor">
            <summary>
                被抛弃的数目上限设置不正确 
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TcpAsynListenerNewConnected`1">
            <summary>
                TCP异步端口监听器新连接到来事件
             </summary>
            <typeparam name="TListenerInfo">监听器信息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TcpAsynListenerNewConnected`1.#ctor(System.Net.Sockets.Socket,`0)">
            <summary>
                TCP异步端口监听器新连接到来事件
             </summary>
            <param name="socket">新连接的Socket</param>
            <param name="info">监听器信息</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.TcpAsynListenerNewConnected`1.Socket">
            <summary>
                获取新连接的套接字
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.TcpAsynListenerNewConnected`1.Info">
            <summary>
                获取监听器的监听器信息
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1">
            <summary>
                通道已经连接上事件
            </summary>
            <typeparam name="KeyType">通道唯一标示类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1.#ctor(KJFramework.Net.XNetworkStream,`0)">
            <summary>
                通道已经连接上事件
            </summary>
            <param name="Stream" type="KJFramework.Net.XNetworkStream">
                <para>
                    通道网络流
                </para>
            </param>
            <param name="ChannelInfo" type="TInfomation">
                <para>
                    通道信息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1.#ctor(System.Net.Sockets.UdpClient,`0)">
            <summary>
                通道已经连接上事件
            </summary>
            <param name="Client" type="KJFramework.Net.UdpClient">
                <para>
                    UDP网络客户端
                </para>
            </param>
            <param name="ChannelInfo" type="TInfomation">
                <para>
                    通道信息
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1.ChannelInfo">
            <summary>
                通道信息
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1.Stream">
            <summary>
                通道网络流
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelConnectedEventArgs`1.Client">
            <summary>
                网络UDP客户端
            </summary>
        </member>
        <member name="T:KJFramework.Net.Buffer.BasicBufferPool">
            <summary>
                提供了基本的数据缓冲池的相关结构, 以及相关基本的操作
            </summary>
            <remarks>
                此缓冲池用来存放片段数据，或者粘包造成数据溢出后的数据。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Buffer.IBufferPool">
            <summary>
                缓冲区元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Buffer.IBufferPool.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                向缓冲区写入指定数据
            </summary>
            <param name="data" type="byte[]">
                <para>
                    写入的数据 : byte[]
                </para>
            </param>
            <param name="offset" type="int">
                <para>
                    写入偏移 : int
                </para>
            </param>
            <param name="length" type="int">
                <para>
                    写入长度 : int
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Buffer.IBufferPool.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                从指定偏移处读取缓冲区指定长度到字节数组
            </summary>
            <param name="data" type="byte[]">
                <para>
                    要读取到的数据集合 : byte[] - Ref
                </para>
            </param>
            <param name="offset" type="int">
                <para>
                    读取偏移 : int
                </para>
            </param>
            <param name="length" type="int">
                <para>
                    读取长度 : int
                </para>
            </param>
            <returns>
                返回读取长度
            </returns>
        </member>
        <member name="M:KJFramework.Net.Buffer.IBufferPool.Clear">
            <summary>
                清空缓冲区
            </summary>
        </member>
        <member name="M:KJFramework.Net.Buffer.IBufferPool.GetLength">
            <summary>
                获取缓冲区长度 : 数据类型 - long
            </summary>
            <returns>
                获取的长度只是当前缓冲区存在的内容长度，总长度不算在内。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Buffer.IBufferPool.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Buffer.IBufferPool.DiscardSize">
            <summary>
                获取或设置缓冲池储存上限大小。
                    * 如果超出该大小，将会自动清空缓冲池。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Buffer.BasicBufferPool._buffer">
            <summary>
                内部内存流缓存
            </summary>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.#ctor">
            <summary>
                提供了基本的数据缓冲池的相关结构, 以及相关基本的操作
            </summary>
            <remarks>
                此缓冲池用来存放片段数据，或者粘包造成数据溢出后的数据。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.#ctor(System.Int32)">
            <summary>
                提供了基本的数据缓冲池的相关结构, 以及相关基本的操作
            </summary>
            <param name="discardSize">缓冲池储存上限大小</param>
            <remarks>
                此缓冲池用来存放片段数据，或者粘包造成数据溢出后的数据。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                向缓冲区写入指定数据
            </summary>
            <param name="data" type="byte[]">
                <para>
                    写入的数据 : byte[]
                </para>
            </param>
            <param name="offset" type="int">
                <para>
                    写入偏移 : int
                </para>
            </param>
            <param name="length" type="int">
                <para>
                    写入长度 : int
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                从指定偏移处读取缓冲区指定长度到字节数组
            </summary>
            <param name="data" type="byte[]">
                <para>
                    要读取到的数据集合 : byte[] - Ref
                </para>
            </param>
            <param name="offset" type="int">
                <para>
                    读取偏移 : int
                </para>
            </param>
            <param name="length" type="int">
                <para>
                    读取长度 : int
                </para>
            </param>
            <returns>
                返回读取长度
            </returns>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.Clear">
            <summary>
                清空缓冲区
            </summary>
        </member>
        <member name="M:KJFramework.Net.Buffer.BasicBufferPool.GetLength">
            <summary>
                获取缓冲区长度 : 数据类型 - long
            </summary>
            <returns>
                获取的长度只是当前缓冲区存在的内容长度，总长度不算在内。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Buffer.BasicBufferPool.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Buffer.BasicBufferPool.DiscardSize">
            <summary>
                获取或设置缓冲池储存上限大小。
                    * 如果超出该大小，将会自动清空缓冲池。
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject">
            <summary>
                AS连接对象（Application Server）元接口, 提供了相关的基本操作以及树形结构
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject.HreatAlertCount">
            <summary>
                获取或设置AS心跳警告次数
            </summary>
            <remarks>
                当AS刚刚注册还没有来得及心跳时，此警告次数代表了AS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IASConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.ILoseCompensation`1">
            <summary>
                丢包补偿接口，提供了相关丢包补偿基础操作，以及基础的缓存策略。
            </summary>
            <typeparam name="T">缓存类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.Compensation(System.String,System.Object[])">
            <summary>
                重新补偿具有指定会话码的数据包
                    * 如果该数据包是分包传送的，则会自动补偿该包的所有子包。
            </summary>
            <param name="sessionCode">传输会话码</param>
            <param name="args">补偿参数集合 - 用于传输消息创建器的封装参数集合</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.Compensation(System.String,System.Int32,System.Object[])">
            <summary>
                重新补偿在指定会话码数据包中的某一个子包。
                    * 当前方法支持了补偿一个总数据包中的子包策略。
            </summary>
            <param name="sessionCode">传输会话码</param>
            <param name="subPackageId">子包编号</param>
            <param name="args">补偿参数集合 - 用于传输消息创建器的封装参数集合</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.AddCache(System.String,System.Int32)">
            <summary>
                向缓存集合中创建一个新的缓存对象
                    * 如果当前缓存集合中已经存在了指定会话码的缓存对象，则覆盖它。
            </summary>
            <param name="sessionCode">会话码</param>
            <param name="packageCount">包总共数量</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.AddCache(System.String,System.Int32,`0)">
            <summary>
                向缓存集合中添加新缓存
                    * 如果输入的会话码不存在当前的缓存集合中，直接返回。
                    * packageId参数用来标示一个总包的某个封包片编号。
            </summary>
            <param name="sessionCode">会话码</param>
            <param name="packageId">分包编号</param>
            <param name="data">缓存数据</param>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.HasCompensation">
            <summary>
                获取或设置一个值，该值标示了是否开启补偿
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.ILoseCompensation`1.Cache">
            <summary>
                缓存字典，仅当 HasCompensation == true时启用
                    * 字典中的Key值保存会话码
            </summary>
        </member>
        <member name="T:KJFramework.Net.XNetworkStream">
            <summary>
                NetworkStream扩展类，此扩展类是线程安全的。
                     * 检测当前网络流的连接状态，需要调用GetConnectionState()方法。
            </summary>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
                为指定的 Socket 创建 NetworkStream 类的新实例。
            </summary>
            <param name="socket" type="System.Net.Sockets.Socket">
                <para>
                    网络套接字
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
                用指定的 Socket 所属权为指定的 Socket 初始化 NetworkStream 类的新实例。
            </summary>
            <param name="socket" type="System.Net.Sockets.Socket">
                <para>
                    网络套接字
                </para>
            </param>
            <param name="ownsSocket" type="bool">
                <para>
                    拥有套接字标示
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
            <summary>
                用指定的访问权限为指定的 Socket 创建 NetworkStream 类的新实例。
            </summary>
            <param name="socket" type="System.Net.Sockets.Socket">
                <para>
                    网络套接字
                </para>
            </param>
            <param name="access" type="System.IO.FileAccess">
                <para>
                    文件权限
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
            <summary>
                用指定的访问权限和指定的 Socket 所属权为指定的 Socket 创建 NetworkStream 类的新实例。
            </summary>
            <param name="socket" type="System.Net.Sockets.Socket">
                <para>
                    网络套接字
                </para>
            </param>
            <param name="access" type="System.IO.FileAccess">
                <para>
                     文件权限
                </para>
            </param>
            <param name="ownsSocket" type="bool">
                <para>
                    拥有套接字标示
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.Initialize(System.Net.Sockets.Socket)">
            <summary>
                初始化方法
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.GetSocket">
            <summary>
                获取内部套接字
            </summary>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.GetConnectionState">
            <summary>
                获取当前的连接状态
            </summary>
            <returns>
                返回false, 表示当前已经断开
            </returns>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                发送一个网络消息到目标主机
            </summary>
            <param name="message">网络消息</param>
            <returns>返回消息发送的成功状态</returns>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                向网络流写入数据
                    * 此方法是线程安全的。
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="size">长度</param>
        </member>
        <member name="M:KJFramework.Net.XNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                从网络流中读取数据
                    * 此方法是线程安全的。
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="size">长度</param>
            <returns></returns>
        </member>
        <member name="T:KJFramework.Net.NetworkDirecter">
            <summary>
                网络探测器, 提供了指定范围内的可用端口等常用网络探测功能。
            </summary>
        </member>
        <member name="F:KJFramework.Net.NetworkDirecter._aviablePortList">
            <summary>
                可用的端口列表
            </summary>
        </member>
        <member name="M:KJFramework.Net.NetworkDirecter.DirectPort(System.Int32,System.Int32,KJFramework.Net.NetworkDirecter.Protocol)">
            <summary>
                从基础端口开始探测指定协议的可用端口
                截止到指定端口号
            </summary>
            <param name="baseProt">基础端口号</param>
            <param name="endPort">结束探测端口号</param>
            <param name="protocol">协议</param> 
            <returns>返回-1 则代表无可用端口</returns>
        </member>
        <member name="M:KJFramework.Net.NetworkDirecter.DirectPortEx(System.Int32,System.Int32,KJFramework.Net.NetworkDirecter.Protocol)">
            <summary>
                从基础端口开始探测指定协议的可用端口
                截止到指定端口号
            </summary>
            <param name="baseProt">基础端口号</param>
            <param name="endPort">结束探测端口号</param>
            <param name="protocol">协议</param> 
            <returns>返回-1 则代表无可用端口</returns>
        </member>
        <member name="M:KJFramework.Net.NetworkDirecter.IsAvailablePort(KJFramework.Net.NetworkDirecter.Protocol,System.Int32)">
            <summary>
                查询指定端口是否可用
            </summary>
            <param name="protocol">网络协议</param>
            <param name="port">端口号</param>
            <returns>返回一个可用的标示</returns>
        </member>
        <member name="T:KJFramework.Net.NetworkDirecter.Protocol">
            <summary>
                端口协议枚举
            </summary>
        </member>
        <member name="F:KJFramework.Net.NetworkDirecter.Protocol.TCP">
            <summary>
                基于TCP协议
            </summary>
        </member>
        <member name="F:KJFramework.Net.NetworkDirecter.Protocol.UDP">
            <summary>
                基于UDP协议
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.ITcpFSConnectObject">
            <summary>
                提供了基于TCP协议的FS功能服务器的连接对象支持。
            </summary>
        </member>
        <member name="T:KJFramework.Net.IReconnectable">
            <summary>
                拥有重新连接功能的元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.IReconnectable.Retry">
            <summary>
                重新连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.IReconnectable.RetryCount">
            <summary>
                获取重试连接的总共次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.IReconnectable.RetryIndex">
            <summary>
                获取或设置已重试次数
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.BasicTcpIocpListener`1">
            <summary>
                基础的遵循完成端口模型的,基于TCP协议的端口监听器 [Blocking Model - 杜塞模式]
                    * 此端口监听器适用于大量的端口监听数量工作，比如：要监听300~500个端口。
                    * 使用此监听器时，请同时配合使用BasicTcpIocpPortListenerPool监听器池一起使用。
                    * 经测试，最多可按照传输延迟：20ms来接收持续数据。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.#ctor(System.Int32)">
            <summary>
                基础的遵循完成端口模型的,基于TCP协议的端口监听器
            </summary>
            <param name="port">要监听的端口号</param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.#ctor(System.String,System.Int32)">
            <summary>
                基础的遵循完成端口模型的,基于TCP协议的端口监听器
            </summary>
            <param name="ipAddress">IP地址</param>
            <param name="port">要监听的端口号</param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.#ctor(System.Net.IPEndPoint)">
            <summary>
                基础的遵循完成端口模型的,基于TCP协议的端口监听器
            </summary>
            <param name="endPoint">要监听的本地终结点</param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.GetPedding">
            <summary>
                接受当前新的连接请求 [可重写]
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.Listen">
            <summary>
                监听
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.Start">
            <summary>
                开始监听 [可重写]
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpIocpListener`1.Stop">
            <summary>
                停止监听 [可重写]
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.Listener">
            <summary>
                获取TCP端口监听对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.ListenerInfomation">
            <summary>
                获取或设置端口监听器详细信息元接口
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.BasicTcpIocpListener`1.Connected">
            <summary>
                新用户连接事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.Port">
            <summary>
                监听的端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpIocpListener`1.Key">
            <summary>
                唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Observer.IObserver">
            <summary>
                观察者接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Observer.IObserver.Notify(KJFramework.Net.Message.NetMessage)">
            <summary>
                提示更新
            </summary>
            <param name="message">新的消息</param>
        </member>
        <member name="P:KJFramework.Net.Observer.IObserver.Rule">
            <summary>
                获取或设置观察规则
            </summary>
        </member>
        <member name="E:KJFramework.Net.Observer.IObserver.Notifyed">
            <summary>
                观察者被通知事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.Observer.BasicFileTransferObserver">
            <summary>
                基础的文件传送观察者，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Observer.BasicFileTransferObserver.#ctor">
            <summary>
                基础的文件传送观察者，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Observer.BasicFileTransferObserver.#ctor(KJFramework.Net.Observer.IObserverRule)">
            <summary>
                基础的文件传送观察者，提供了相关的基本操作。
            </summary>
            <param name="rule">观察规则</param>
        </member>
        <member name="M:KJFramework.Net.Observer.BasicFileTransferObserver.Notify(KJFramework.Net.Message.NetMessage)">
            <summary>
                提示更新
            </summary>
            <param name="message">新的消息</param>
        </member>
        <member name="P:KJFramework.Net.Observer.BasicFileTransferObserver.Rule">
            <summary>
                获取或设置观察规则
            </summary>
        </member>
        <member name="E:KJFramework.Net.Observer.BasicFileTransferObserver.Notifyed">
            <summary>
                观察者被通知事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.Helper.ParserHelper">
            <summary>
                解析器帮助器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Helper.ParserHelper.GetParser(System.Collections.Generic.List{KJFramework.Net.Parser.IParser{System.Int32,KJFramework.Net.Processor.IDataProcessor{KJFramework.Net.Message.NetMessage},KJFramework.Net.Message.NetMessage}},System.Byte[])">
            <summary>
                从指定的解析器集合中找到能解析指定数据的解析器
            </summary>
            <param name="parsers">解析器集合</param>
            <param name="data">数据</param>
            <returns>返回null, 表示不存在能够解析该数据的解析器</returns>
        </member>
        <member name="T:KJFramework.Net.Exception.UdpListenerNotFoundException">
            <summary>
                UDP监听器内置对象未被初始化异常
            </summary>
            <remarks>
                当使用UDP监听器中的UdpClient时，如果该对象未被初始化( == null), 则会触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.UdpListenerNotFoundException.#ctor">
            <summary>
                UDP监听器内置对象未被初始化异常
            </summary>
            <remarks>
                当使用UDP监听器中的UdpClient时，如果该对象未被初始化( == null), 则会触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.SessionTemplateStringUnCorrectException">
            <summary>
                会话基础模板字符串错误异常
            </summary>
            <remarks>
                当会话基础模板字符串不支持固有的可填充模式时，触发该异常
                   * 会话基础模板字符串必须仅包含2个可填充点 : 如 : {0}, {1}
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.SessionTemplateStringUnCorrectException.#ctor">
            <summary>
                会话基础模板字符串错误异常
            </summary>
            <remarks>
                当会话基础模板字符串不支持固有的可填充模式时，触发该异常
                   * 会话基础模板字符串必须仅包含2个可填充点 : 如 : {0}, {1}
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageHelperHasNullException">
            <summary>
                消息帮助器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageHelperHasNullException.#ctor">
            <summary>
                消息帮助器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Deal.IDealerFactory`1">
            <summary>
                消息处理器工厂元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Deal.IDealerFactory`1.CreateDealer(System.Int32)">
            <summary>
                通过给定的协议ID来构造一个对应的消息处理器
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <returns>
                返回null,表示不存在处理该协议ID的消息处理器
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.IDealerFactory`1.CreateDealer(System.Int32,System.Int32)">
            <summary>
                通过给定的协议ID和服务ID来构造一个对应的消息处理器
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <returns>
                返回null,表示不存在处理该协议ID和服务ID的消息处理器
            </returns>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.BasicTcpConnectObject">
            <summary>
                提供了基本的连接对象属性结构, 以及相关的基本操作。
                只支持基于TCP协议的基本用户连接对象。
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicTcpConnectObject.#ctor(System.String,System.String)">
            <summary>
                提供了基本的连接对象属性结构, 以及相关的基本操作
            </summary>
            <param name="key" type="string">
                <para>
                    唯一标示
                </para>
            </param>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicTcpConnectObject.#ctor">
            <summary>
                提供了基本的连接对象属性结构, 以及相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicTcpConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicTcpConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.ConnectStream">
            <summary>
                获取或设置基本连接流
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicTcpConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="T:KJFramework.Net.Parser.Parsers">
            <summary>
                解析器集合
            </summary>
        </member>
        <member name="F:KJFramework.Net.Parser.Parsers._parsers">
            <summary>
                解析器集合
            </summary>
        </member>
        <member name="F:KJFramework.Net.Parser.Parsers.ParserCollection">
            <summary>
                解析器集合
            </summary>
        </member>
        <member name="M:KJFramework.Net.Parser.Parsers.GetParser(KJFramework.Basic.Enum.KJFrameworkParserTypes)">
            <summary>
                根据指定的框架解析器类型寻找指定的解析器
            </summary>
            <returns>返回null, 表示不存在该类型的解析器</returns>
        </member>
        <member name="M:KJFramework.Net.Parser.Parsers.Add(KJFramework.Basic.Enum.KJFrameworkParserTypes,KJFramework.Net.Parser.IParser{System.Int32,KJFramework.Net.Processor.IDataProcessor{KJFramework.Net.Message.NetMessage},KJFramework.Net.Message.NetMessage})">
            <summary>
                向解析器集合中添加指定解析器
            </summary>
            <param name="parserTypes">框架解析器类型</param>
            <param name="parser">解析器</param>
            <returns>返回false, 表示添加失败</returns>
        </member>
        <member name="M:KJFramework.Net.Parser.Parsers.Remove(KJFramework.Basic.Enum.KJFrameworkParserTypes)">
            <summary>
                从指定的解析器集合中移除具有指定解析器类型的解析器
            </summary>
            <param name="parserTypes">框架解析器类型</param>
            <returns>返回false, 表示移除失败</returns>
        </member>
        <member name="T:KJFramework.Net.Listener.Asynchronous.Obj.UdpPassObject">
            <summary>
                UDP协议传递对象，提供了相关的基本树形结构
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.Obj.UdpPassObject.Delegate">
            <summary>
                获取或设置委托
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.Obj.UdpPassObject.State">
            <summary>
                获取或设置UDP状态
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ServerIPEndPointUnCorrectException">
            <summary>
                服务器远程终端错误异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ServerIPEndPointUnCorrectException.#ctor">
            <summary>
                服务器远程终端错误异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.KeyHasNullException">
            <summary>
                关键字为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.KeyHasNullException.#ctor">
            <summary>
                关键字为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.IPEndPointUnCorrectException">
            <summary>
                终结点错误异常
            </summary>
            <remarks>
                当尝试使用此终结点进行数据发送时，如果出现错误则触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.IPEndPointUnCorrectException.#ctor">
            <summary>
                终结点错误异常
            </summary>
            <remarks>
                当尝试使用此终结点进行数据发送时，如果出现错误则触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.CollectionMemberRemoveException">
            <summary>
                移除集合元素异常
            </summary>
            <remarks>
                当移除集合中的指定元素失败时, 抛出该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.CollectionMemberRemoveException.#ctor">
            <summary>
                移除集合元素异常
            </summary>
            <remarks>
                当移除集合中的指定元素失败时, 抛出该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ObserverNotifyedEventArgs">
            <summary>
                观察者被通知事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ObserverNotifyedEventArgs.#ctor(KJFramework.Net.Message.NetMessage)">
            <summary>
                观察者被通知事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ObserverNotifyedEventArgs.Message">
            <summary>
                新消息
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.IocpPortListenerDisconnectedEventArgs`1">
            <summary>
                端口监听器断开事件（遵循完成端口模型的端口监听器）
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.IocpPortListenerDisconnectedEventArgs`1.#ctor(`0)">
            <summary>
                端口监听器断开事件（遵循完成端口模型的端口监听器）
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.IocpPortListenerDisconnectedEventArgs`1.Listener">
            <summary>
                断开连接的端口监听器
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject">
            <summary>
                 基础的基于UDP协议的FS连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.IUdpFSConnectObject">
            <summary>
                基于UDP协议的FS连接对象元接口, 提供了相关的基本操作以及属性结构。
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.IUdpConnectObject">
            <summary>
                UDP连接对象元接口, 提供了相关的基本操作。
                此接口只提供基于UDP协议的用户连接对象
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID来初始化构造，此ID代表了当前FS网络流ID(唯一)。
                    * 请另行指定该FS所支持的协议ID以及服务ID等。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID以及支持的服务ID来初始化构造。
                    * 此构造缺少详细的服务ID，适用于独立协议处理的FS使用。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID以及网络流来初始化构造，此ID代表了当前FS网络流ID(唯一)。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverIEP" type="IPEndPoint">
                <para>
                    FS网络终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID以及服务ID来初始化构造。
                    * 此构造适用于对于同一个协议拥有不同处理的FS。
                    * 使用此构造，请另行设置FS网络流。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    支持的服务ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Net.IPEndPoint,System.Int32)">
            <summary>
                 基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID，FS网络流以及FS终结点来初始化构造，此ID代表了当前FS网络流ID(唯一)。
                    * 此构造使FS重连机制得到了很大的方便。
                    * 请另行设置其FS所支持协议ID以及服务ID
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    FS网络终结点
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    FS服务端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,System.Net.IPEndPoint)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID以及FS网络终结点来初始化构造。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="ArrayList">
                <para>
                    支持的协议ID组
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    FS网络终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Net.IPEndPoint)">
            <summary>
                基础的基于UDP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID，服务ID以及FS网络终结点来初始化构造。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    支持的服务ID
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    FS网络终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Retry">
            <summary>
                重新连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.FSEndPoint">
            <summary>
                获取或设置FS远程终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.FSPort">
            <summary>
                获取或设置FS远程端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.RetryCount">
            <summary>
                获取重试连接的总共次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.RetryIndex">
            <summary>
                获取或设置已重试次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.SupportProtocol">
            <summary>
                获取或设置支持的协议ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.SupportService">
            <summary>
                获取或设置支持的服务ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.HreatAlertCount">
            <summary>
                获取或设置FS心跳警告次数
            </summary>
            <remarks>
                当FS刚刚注册还没有来得及心跳时，此警告次数代表了FS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicUdpFSConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.UDP.BasicUdpServerAgent">
            <summary>
                基础的UDP服务代理器, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.#ctor">
            <summary>
                使用默认构造初始化UDP服务代理器，如果不另行指定UDP消息响应器，则会抛出异常。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.#ctor(KJFramework.Net.Agent.IUdpResponseManager,System.Int32)">
            <summary>
                使用一个UDP消息响应器和服务器远程端口来初始化构造。
            </summary>
            <param name="udpResponseManager" type="KJFramework.Net.Agent.IUdpResponseManager">
                <para>
                    UDP消息响应器
                </para>
            </param>
            <param name="port">
                <para>
                    服务器远程端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.#ctor(KJFramework.Net.Agent.IUdpResponseManager,System.Net.IPEndPoint,System.Int32)">
            <summary>
                使用一个UDP消息响应器,服务器远程端口以及服务器的远程终端地址来初始化构造。
            </summary>
            <param name="udpResponseManager" type="KJFramework.Net.Agent.IUdpResponseManager">
                <para>
                    UDP消息响应器
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    服务器远程终端地址
                </para>
            </param>
            <param name="port">
                <para>
                    服务器远程端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.CommitRequest(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
                向服务器提交需求反馈的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    提交的消息
                </para>
            </param>
            <param name="priority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    消息优先级
                </para>
            </param>
            <param name="autoCheckResult" type="bool">
                <para>
                   是否检测服务器反馈标示
                </para>
            </param>
            <param name="protocol">要返回消息包的协议编号</param>
            <param name="serviceKey">要返回协议包的服务编号</param>
            <param name="serviceItemIndex">要返回协议包的详细服务编号</param>
            <returns>
                返回null, 表示服务器暂时没有反馈。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.ResponseManager">
            <summary>
                UDP协议响应消息队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.Port">
            <summary>
                服务器端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.ServerIEP">
            <summary>
                服务器终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.UDP.BasicUdpServerAgent.NetMessageCommited">
            <summary>
                提交请求消息后事件
            </summary>
            <remarks>
                当客户端向服务器提交请求后, 将会触发该事件
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Spy.IMessageSpy">
            <summary>
                消息拦截器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Spy.IMessageSpy.SpyRecevieMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                拦截接收的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    接收的消息
                </para>
            </param>
            <returns>
                如果当前间谍可以传递，则返回null,
                否则返回原消息
            </returns>
        </member>
        <member name="M:KJFramework.Net.Spy.IMessageSpy.SpySendMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                拦截发出的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    发出的消息
                </para>
            </param>
            <returns>
                如果当前间谍可以传递，则返回null,
                否则返回原消息mework.Net.Message.NetMessage value...
            </returns>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.CanCallNextHook">
            <summary>
                获取或设置是否可以调用下一个消息间谍进行处理的标示
            </summary>
            <remarks>
                如果 CanCallNextHook = false, 则当前Spy消息的行为只到此消息间谍处理后为止，
                然后会直接去为此消息分配消息处理器
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.SupportRecevieSpy">
            <summary>
                获取或设置是否支持接收拦截
            </summary>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.SupportSendSpy">
            <summary>
                获取或设置是否支持发送拦截
            </summary>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.SpyProtocol">
            <summary>
                获取或设置可支持的协议ID
                    * 如果为 -1 则可忽略
            </summary>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.SpyService">
            <summary>
                获取或设置可支持的服务ID
                    * 如果为 -1 则可忽略
            </summary>
        </member>
        <member name="P:KJFramework.Net.Spy.IMessageSpy.SpyServiceItem">
            <summary>
                获取或设置可支持的服务详细目录ID
                    * 如果为 -1 则可忽略
            </summary>
        </member>
        <member name="T:KJFramework.Net.QueueObject.BasicQueueObject`1">
            <summary>
                基础的队列对象, 提供了相关的基本操作。
            </summary>
            <typeparam name="T">队列对象类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.QueueObject.IQueueObject`1">
            <summary>
                提供了队列对象元结构
            </summary>
        </member>
        <member name="M:KJFramework.Net.QueueObject.IQueueObject`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.QueueObject.IQueueObject`1.QueuePriority">
            <summary>
                队列优先级
            </summary>
        </member>
        <member name="P:KJFramework.Net.QueueObject.IQueueObject`1.Members">
            <summary>
                数据成员
            </summary>
        </member>
        <member name="M:KJFramework.Net.QueueObject.BasicQueueObject`1.#ctor">
            <summary>
                基础的队列对象, 提供了相关的基本操作。
                    * 使用此构造将会使本队列的优先级默认设置为低级。
            </summary>
        </member>
        <member name="M:KJFramework.Net.QueueObject.BasicQueueObject`1.#ctor(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                基础的队列对象, 提供了相关的基本操作。
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    队列优先级
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.QueueObject.BasicQueueObject`1.QueuePriority">
            <summary>
                队列优先级
            </summary>
        </member>
        <member name="P:KJFramework.Net.QueueObject.BasicQueueObject`1.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Observer.IObserverRule">
            <summary>
                观察者规则接口，提供了相关的观察规则。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Observer.IObserverRule.Check(KJFramework.Net.Message.NetMessage)">
            <summary>
                检测当前的新消息是不是本观察者所关心的消息类型
            </summary>
            <param name="message">新消息</param>
            <returns>返回false,表示不关心</returns>
        </member>
        <member name="T:KJFramework.Net.Exception.UserIdUnCorrectExpcetion">
            <summary>
                用户ID设置不正确异常
            </summary>
            <remarks>
                当用户ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.UserIdUnCorrectExpcetion.#ctor">
            <summary>
                用户ID设置不正确
            </summary>
            <remarks>
                当用户ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.UdpMessageRecevierNotFoundException">
            <summary>
                UDP消息接收器没有被找到异常
            </summary>
            <remarks>
                当UDP接收器 == null时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.UdpMessageRecevierNotFoundException.#ctor">
            <summary>
                UDP消息接收器没有被找到异常
            </summary>
            <remarks>
                当UDP接收器 == null时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.TimeoutSpanUnCorrectException">
            <summary>
                超时器超时间隔不正确
            </summary>
            <remarks>
                当超时间隔小于0的时候触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.TimeoutSpanUnCorrectException.#ctor">
            <summary>
                超时器超时间隔不正确
            </summary>
            <remarks>
                当超时间隔小于0的时候触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.TcpResponseManagerNotFoundException">
            <summary>
                TCP消息响应管理器未找到异常
            </summary>
            <remarks>
                当TCP消息响应管理器 = null时，触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.TcpResponseManagerNotFoundException.#ctor">
            <summary>
                TCP消息响应管理器未找到异常
            </summary>
            <remarks>
                当TCP消息响应管理器 = null时，触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.PortUnCorrectException">
            <summary>
                端口设置错误
            </summary>
            <remarks>
                当设置的端口小于等于0时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.PortUnCorrectException.#ctor">
            <summary>
                端口设置错误
            </summary>
            <remarks>
                当设置的端口小于等于0时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.DirectPortUnCorrectException">
            <summary>
                探测端口出现错误异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.DirectPortUnCorrectException.#ctor">
            <summary>
                探测端口出现错误异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UdpUserConnectedEventArgs">
            <summary>
                基于UDP协议的用户连接事件
            </summary>
            <remarks>
                当用户通过UDP协议发送连接消息时, 触发该事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UdpUserConnectedEventArgs.#ctor(KJFramework.Net.ConnectObject.IUdpConnectObject)">
            <summary>
                基于UDP协议的用户连接事件
            </summary>
            <param name="ConnecObject" type="KJFramework.Net.IUdpConnectObject">
                <para>
                    UDP连接对象
                </para>
            </param>
            <remarks>
                当用户通过UDP协议发送连接消息时, 触发该事件
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.UdpUserConnectedEventArgs.Connectobject">
            <summary>
                UDP连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TaskFailEventArgs">
            <summary>
                任务检查失败事件
            </summary>
            <remarks>
                当任务检查线程退出，或者异常的时候触发此事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TaskFailEventArgs.#ctor">
            <summary>
                任务检查失败事件
            </summary>
            <remarks>
                当任务检查线程退出，或者异常的时候触发此事件
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TaskCheckerBeginWorkEventArgs">
            <summary>
                任务检查器开始工作事件
            </summary>
            <remarks>
                当一个任务检查器开始工作时，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TaskCheckerBeginWorkEventArgs.#ctor">
            <summary>
                任务检查器开始工作事件
            </summary>
            <remarks>
                当一个任务检查器开始工作时，触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ReceiveDataEventArgs">
            <summary>
                接收新数据事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ReceiveDataEventArgs.#ctor(System.Byte[])">
            <summary>
                接收新数据事件
            </summary>
            <param name="data">新的数据</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ReceiveDataEventArgs.Data">
            <summary>
                获取接收的数据
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.BasicUdpConnectObject">
            <summary>
                提供了基本的连接对象属性结构, 以及相关的基本操作。
                只支持基于UDP协议的基本用户连接对象。
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicUdpConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.BasicUdpConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.BasicUdpConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.LocalConfiguration.NetworkLayer">
            <summary>
                网络层配置项
            </summary>
        </member>
        <member name="T:KJFramework.Net.Scheduler.IApplicationServerScheduler`1">
            <summary>
                应用服务器调度器元接口, 提供了相关的属性结构
            </summary>
        </member>
        <member name="P:KJFramework.Net.Scheduler.IApplicationServerScheduler`1.ServerScheduler">
            <summary>
                获取或设置服务性能调度器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1">
            <summary>
                基础的基于TCP协议的异步套接字监听器
            </summary>
            <typeparam name="TListenerInfo">监听器类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.#ctor(System.Int32)">
            <summary>
                基础的基于TCP协议的异步套接字监听器
            </summary>
            <param name="port">监听的端口号</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.#ctor(System.String,System.Int32)">
            <summary>
                基础的基于TCP协议的异步套接字监听器
            </summary>
            <param name="ipAddress">绑定的IP地址</param>
            <param name="port">监听的端口号</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.#ctor(System.Net.IPEndPoint)">
            <summary>
                基础的基于TCP协议的异步套接字监听器
            </summary>
            <param name="endPoint">绑定的网络终结点地址</param>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.Start">
            <summary>
                开始监听 [重载]
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.GetPedding">
            <summary>
                接受当前新的连接请求 [重载]
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.Asynchronous.BasicTcpAsynListener`1.CallbackAccept(System.IAsyncResult)">
            <summary>
                新连接回调 [可重写]
            </summary>
            <param name="result">异步结果</param>
        </member>
        <member name="T:KJFramework.Net.Exception.TcpListenerNotFoundException">
            <summary>
                TCP监听器内置对象未被初始化异常
            </summary>
            <remarks>
                当使用TCP监听器中的TcpListener时，如果该对象未被初始化( == null), 则会触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.TcpListenerNotFoundException.#ctor">
            <summary>
                TCP监听器内置对象未被初始化异常
            </summary>
            <remarks>
                当使用TCP监听器中的TcpListener时，如果该对象未被初始化( == null), 则会触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageBuilderHasNullException">
            <summary>
                消息创建器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageBuilderHasNullException.#ctor">
            <summary>
                消息创建器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.FsHreatTimeoutEventArgs`1">
            <summary>
                FS心跳超时事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.FsHreatTimeoutEventArgs`1.#ctor(`0)">
            <summary>
                FS心跳超时事件
            </summary>
            <param name="FsObject" type="T">
                <para>
                    超时的FS连接对象
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.FsHreatTimeoutEventArgs`1.FsObject">
            <summary>
                超时的FS连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.ITcpASConnectObject">
            <summary>
                提供了基于TCP协议的AS（Application Server）的连接对象支持。
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As">
            <summary>
                基础的远程服务连接对象
                    * 适用于 IRAS -> AS
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.IRemotingServiceConnectObject_4As">
            <summary>
                支持远程服务调用的连接对象, 并提供了相关的基本操作。
                    * IRAS -> AS
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.IRemotingServiceConnectObject_4As.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IRemotingServiceConnectObject_4As.ServerScheduler">
            <summary>
                获取或设置应用服务器调度器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IRemotingServiceConnectObject_4As.IpAddress">
            <summary>
                获取IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.IRemotingServiceConnectObject_4As.Port">
            <summary>
                获取服务端口
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.#ctor(System.String,System.Int32)">
            <summary>
                基础的远程服务连接对象
                    * 适用于 IRAS -> AS
            </summary>
            <param name="ipAddress" type="string">
                <para>
                    IP地址
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    服务端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.ServerScheduler">
            <summary>
                获取或设置应用服务器调度器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.IpAddress">
            <summary>
                获取IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.Port">
            <summary>
                获取服务端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.HreatAlertCount">
            <summary>
                获取或设置AS心跳警告次数
            </summary>
            <remarks>
                当AS刚刚注册还没有来得及心跳时，此警告次数代表了AS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicRemotingServiceConnectObject_4As.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.ISupportThirdPartyMessageChannel`2">
            <summary>
                支持第三方消息的通道元接口，提供了对于解析第三方消息的支持。
            </summary>
            <typeparam name="TChannelInfomation">通道信息类型</typeparam>
            <typeparam name="TMessage">消息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Channel.ISupportThirdPartyMessageChannel`2.ProcessData(System.Byte[])">
            <summary>
                将元数据解析成消息体
            </summary>
            <param name="data">网络元数据</param>
            <returns>返回解析后的消息集合</returns>
        </member>
        <member name="E:KJFramework.Net.Channel.ISupportThirdPartyMessageChannel`2.NewMessageArrived">
            <summary>
                通道接收到了新的消息事件
            </summary>
            <typeparam name="TChannelInfomation">通道信息类型</typeparam>
            <typeparam name="TMessage">消息类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Builder.MessageBuilders">
            <summary>
                消息创建器集合
            </summary>
        </member>
        <member name="F:KJFramework.Net.Builder.MessageBuilders.Builders">
            <summary>
                消息创建器集合
            </summary>
        </member>
        <member name="F:KJFramework.Net.Builder.MessageBuilders.Builder">
            <summary>
                消息创建器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.BasicSessionBuilder">
            <summary>
                基础的会话码构造器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.ISessionBuilder">
            <summary>
                会话创建器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.ISessionBuilder.Build(System.Object[])">
            <summary>
                构造会话码
            </summary>
            <param name="param" type="object">
                <para>
                    需要传递的参数
                </para>
            </param>
            <returns>
                返回构造出的唯一会话码
            </returns>
        </member>
        <member name="F:KJFramework.Net.Builder.BasicSessionBuilder._baseSession">
            <summary>
                基础会话码模板
            </summary>
        </member>
        <member name="F:KJFramework.Net.Builder.BasicSessionBuilder.Builder">
            <summary>
                基础的会话码构造器
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.BasicSessionBuilder.Build(System.Object[])">
            <summary>
                构造会话码
            </summary>
            <param name="param" type="object">
                <para>
                    需要传递的参数
                </para>
            </param>
            <returns>
                返回构造出的唯一会话码
            </returns>
        </member>
        <member name="M:KJFramework.Net.Builder.BasicSessionBuilder.Build">
            <summary>
                创建一个具有指定类型的对象
            </summary>
            <returns>返回创建后的类型对象</returns>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender">
            <summary>
                基础的基于TCP协议的自动发送器,  提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.#ctor">
            <summary>
                基础的基于TCP协议的自动发送器,  提供了相关的基本操作。
                    * 使用此构造需要另行指定服务器的网络流。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.#ctor(KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.#ctor(KJFramework.Net.XNetworkStream,System.Int32)">
            <summary>
                基础的基于TCP协议的自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
            <param name="disclareIndex" type="int">
                <para>
                    数据包存放数量上限
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Clear">
            <summary>
                清除所有队列中的数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Clear(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                清除具有指定优先级的队列数据
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.GetInnerQueue(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Add(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Dispose">
            <summary>
                销毁
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Task">
            <summary>
                内部任务检测
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.ServerStream">
            <summary>
                服务器网络流
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Port">
            <summary>
                服务器通讯端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.IpAddress">
            <summary>
                服务器IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.DisclaredIndex">
            <summary>
                数据包存放数量上限
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.DataDisclare" -->
        <member name="E:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.QueueEmpty">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.TCP.BasicTcpAutoSender.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Scheduler.IServerPerformanceScheduler`1">
            <summary>
                服务器性能调度器元接口, 提供了关于服务器调度负载平衡的相关操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Scheduler.IPerformanceScheduler`1">
            <summary>
                性能调度器元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">操作对象类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.Scheduler.IPerformanceScheduler`1.GetPredominantServer">
            <summary>
                得到性能最优的服务对象
            </summary>
            <returns>返回服务对象</returns>
        </member>
        <member name="M:KJFramework.Net.Scheduler.IPerformanceScheduler`1.GetPerformance(System.Int32)">
            <summary>
                获取具有指定Id的服务对象性能提供器
            </summary>
            <param name="id">服务对象唯一编号</param>
            <returns>返回性能提供器</returns>
        </member>
        <member name="M:KJFramework.Net.Scheduler.IServerPerformanceScheduler`1.GetPredominantServer(System.Int32)">
            <summary>
                获取支持指定协议ID，并且性能优越的服务器连接对象
            </summary>
            <param name="protocolKey" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Scheduler.IServerPerformanceScheduler`1.GetPredominantServer(System.Int32,System.Int32)">
            <summary>
                获取支持指定协议ID和服务ID，并且性能优越的服务器连接对象
            </summary>
            <param name="protocolKey" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="T:KJFramework.Net.Recevier.IUdpMessageRecevier">
            <summary>
                基于UDP协议的消息接收器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="P:KJFramework.Net.Recevier.IUdpMessageRecevier.Client">
            <summary>
                获取或设置UDP监听对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ServerIdUnCorrectException">
            <summary>
                服务器ID不正确异常
            </summary>
            <remarks>
                当服务器（FS）ID小于0时，触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ServerIdUnCorrectException.#ctor">
            <summary>
                服务器ID不正确异常
            </summary>
            <remarks>
                当服务器（FS）ID小于0时，触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ServerAgentHasNullException">
            <summary>
                服务器代理器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ServerAgentHasNullException.#ctor">
            <summary>
                服务器代理器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.RecevieBufferSizeUnCorrectException">
            <summary>
                接收缓冲大小不正确异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.RecevieBufferSizeUnCorrectException.#ctor">
            <summary>
                接收缓冲大小不正确异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageHeaderHasNullException">
            <summary>
                消息头为空异常。
            </summary>
            <remarks>
                当消息头为null时，则触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageHeaderHasNullException.#ctor">
            <summary>
                消息头为空异常。
            </summary>
            <remarks>
                当消息头为null时，则触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.IPAddressUnCorrectException">
            <summary>
                IP地址错误异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.IPAddressUnCorrectException.#ctor">
            <summary>
                IP地址错误异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.CreateNetMessageException">
            <summary>
                构造网络包异常
            </summary>
            <remarks>
                当构造网络包数据不充足时, 触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.CreateNetMessageException.#ctor">
            <summary>
                构造网络包异常
            </summary>
            <remarks>
                当构造网络包数据不充足时, 触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ComparerHasNullException">
            <summary>
                比较器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ComparerHasNullException.#ctor">
            <summary>
                比较器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UserConnectEventArgs">
            <summary>
                新用户连接事件
            </summary>
            <remarks>
                当有新用户连接到本机指定端口时，激发此事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UserConnectEventArgs.#ctor(KJFramework.Net.XNetworkStream)">
            <summary>
                新用户连接事件
            </summary>
            <remarks>
                当有新用户连接到本机指定端口时，激发此事件
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.UserConnectEventArgs.Connectstream">
            <summary>
                连接者网络流
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject">
            <summary>
                基础的基于TCP协议的AS（Application Server）连接对象
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.#ctor(System.String)">
            <summary>
                基础的基于TCP协议的AS连接对象
                    * 使用一个连接ID来初始化构造，此ID代表了当前AS网络流ID(唯一)。
                    * 请另行指定该AS所支持的协议ID以及服务ID等。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.#ctor(System.String,KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的AS连接对象
                    * 使用一个连接ID以及网络流来初始化构造，此ID代表了当前AS网络流ID(唯一)。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    AS网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.#ctor(System.String,KJFramework.Net.XNetworkStream,System.Net.IPEndPoint)">
            <summary>
                 基础的基于TCP协议的AS连接对象
                    * 使用一个连接ID，AS网络流以及AS终结点来初始化构造，此ID代表了当前AS网络流ID(唯一)。
                    * 此构造使AS重连机制得到了很大的方便。
                    * 请另行设置其AS所支持协议ID以及服务ID
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    FS网络流
                </para>
            </param>
            <param name="serverIep" type="System.Net.IPEndPoint">
                <para>
                    FS终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Retry">
            <summary>
                重试连接
            </summary>
            <returns>返回连接的结果</returns>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Connect">
            <summary>
                连接
            </summary>
            <returns>返回连接的状态</returns>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.HreatAlertCount">
            <summary>
                获取或设置AS心跳警告次数
            </summary>
            <remarks>
                当AS刚刚注册还没有来得及心跳时，此警告次数代表了AS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.ConnectStream">
            <summary>
                获取或设置基本连接流
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.RetryCount">
            <summary>
                获取重试连接的总共次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicTcpASConnectObject.RetryIndex">
            <summary>
                获取或设置已重试次数
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.IP2PChannel`1">
            <summary>
                P2P(点对点)通道元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.IChannel`1">
            <summary>
                通道元接口，提供了相关的基本操作
            </summary>
            <typeparam name="TInfomation">通道信息类型</typeparam>
        </member>
        <member name="P:KJFramework.Net.Channel.IChannel`1.Logger">
            <summary>
                获取或设置调试记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.IChannel`1.ChannelInfo">
            <summary>
                获取或设置当前通道信息
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.IP2PChannel`1.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                发送消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <returns>
                返回false, 表示发送失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Channel.IP2PChannel`1.Hole">
            <summary>
                打洞
                    * 打洞后请检测IsNAT属性判断是否打洞成功
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.IP2PChannel`1.IsNAT">
            <summary>
                获取或设置是否已经NAT穿透的标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Group.BasicChannelGroup`2">
            <summary>
                基础的通道群组，提供了相关的基本操作。
            </summary>
            <typeparam name="TChannelInfomation">通道信息类型</typeparam>
            <typeparam name="TChannelGroupInfo">通道群组信息类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Channel.Group.IChannelGroup`3">
            <summary>
                通道群组元接口，提供了对于群组一系列通道的相关基本操作。
            </summary>
            <typeparam name="TChannel">通道类型</typeparam>
            <typeparam name="TChannelInfomation">通道描述信息类型</typeparam>
            <typeparam name="TChannelGroupInfo">通道群组描述信息类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Channel.Group.IGroupable">
            <summary>
                组标示元接口，提供了一些组的必要属性。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IGroupable.LayerCount">
            <summary>
                获取或设置最多包含的子组层数
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IGroupable.IsPack">
            <summary>
                获取或设置组是否只提供外层容器作用标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroup`3.Channels">
            <summary>
                获取或设置当前通道群组中的通道集合。
                    * 前提是当前通道群组的IsPack属性为false。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroup`3.Groups">
            <summary>
                获取或设置当前通道群组中的子组
                    * 前提是当前通道群组的IsPack属性为true。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroup`3.Count">
            <summary>
                获取当前通道群组中的通道总数。
                    * 前提是当前通道群组的IsPack属性为false。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroup`3.GroupInfo">
            <summary>
                获取或设置通道群组描述信息
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.#ctor(System.Boolean)">
            <summary>
                基础的通道群组，提供了相关的基本操作。
            </summary>
            <param name="isPack">当前通道群组是否作为容器的标志位</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.#ctor(System.Boolean,System.Int32)">
            <summary>
                基础的通道群组，提供了相关的基本操作。
            </summary>
            <param name="isPack">当前通道群组是否作为容器的标志位</param>
            <param name="layerCount">如果作为容器，则最多包含的子组层数</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Connect">
            <summary>
                连接当前组中所包含的所有通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Connect(System.Int32)">
            <summary>
                连接当前组中具有指定唯一键值的通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Disconnect">
            <summary>
                断开当前组中所包含的所有通道连接。
                    * 前提是当前组的IsPack属性为false。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Disconnect(System.Int32)">
            <summary>
                断开当前组中具有指定唯一键值的通道连接。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.GetChannel(System.Int32)">
            <summary>
                获取当前组中具有指定唯一键值的通道。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Find(System.Int32)">
            <summary>
                从当前组中查找是否存在具有指定唯一键值的通道存在。
                    * 前提是当前组的IsPack属性为false。
            </summary>
            <param name="channelKey">通道唯一键值</param>
            <returns>如果返回false, 则表示不存在</returns>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.CheckChannelKey(System.Int32)">
            <summary>
                内部方法 - 用来检测传入的通道唯一键值是否合法
            </summary>
            <param name="channelKey">通道唯一键值</param>
        </member>
        <member name="M:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Initialize">
            <summary>
                内部方法 - 初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Channels">
            <summary>
                获取或设置当前通道群组中的通道集合。
                    * 前提是当前通道群组的IsPack属性为false。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Groups">
            <summary>
                获取或设置当前通道群组中的子组
                    * 前提是当前通道群组的IsPack属性为true。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Count">
            <summary>
                获取当前通道群组中的通道总数。
                    * 前提是当前通道群组的IsPack属性为false。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.GroupInfo">
            <summary>
                获取或设置通道群组描述信息
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.LayerCount">
            <summary>
                获取或设置最多包含的子组层数
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.BasicChannelGroup`2.IsPack">
            <summary>
                获取或设置组是否只提供外层容器作用标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Session.BasicSessionManager">
            <summary>
                基础的会话管理器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.#ctor">
            <summary>
                基础的会话管理器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Register(KJFramework.Net.Session.ISession)">
            <summary>
                向会话队列中注册会话对象
            </summary>
            <param name="session" type="T">
                <para>
                    会话对象
                </para>
            </param>
            <returns>
                返回false, 表示注册失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Remove(KJFramework.Net.Session.ISession)">
            <summary>
                从会话队列移除指定会话对象
            </summary>
            <param name="session" type="T">
                <para>
                    会话对象
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Remove(System.Int32)">
            <summary>
                根据用户ID移除该用户ID属于的会话对象
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Remove(System.String)">
            <summary>
                根据会话码移除会话对象
            </summary>
            <param name="sessionCode" type="string">
                <para>
                    会话码
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.GetSession(System.Int32)">
            <summary>
                通过一个用户ID查找属于该用户的会话对象
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.GetSession(System.String)">
            <summary>
                通过一个会话码查找会话对象
            </summary>
            <param name="sessionCode" type="string">
                <para>
                    会话码
                </para>
            </param>
            <returns>
                 返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Start">
            <summary>
                开始
            </summary>
        </member>
        <member name="M:KJFramework.Net.Session.BasicSessionManager.Stop">
            <summary>
                停止
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSessionManager.Sessions">
            <summary>
                获取会话队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Session.BasicSessionManager.IsActive">
            <summary>
                获取或设置当前的激活状态。
            </summary>
        </member>
        <member name="E:KJFramework.Net.Session.BasicSessionManager.SessionExpire">
            <summary>
                会话过期事件
            </summary>
            <remarks>
                当会话队列中某个会话对象超时过期后，触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender">
            <summary>
                基础的基于UDP协议的根据终结点分发器,  提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.UDP.IUdpAutoSender`1">
            <summary>
                提供了基于UDP协议的自动发送器的功能支持。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.IUdpAutoSender`1.ServerIep">
            <summary>
                获取或设置服务器网络终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.IUdpAutoSender`1.IsActive">
            <summary>
                获取或设置自动发送器可用标示
            </summary>
        </member>
        <member name="F:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender._queues">
            <summary>
                存放不同优先级的数据队列
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.#ctor(System.Int32)">
            <summary>
               基础的基于UDP协议的根据终结点分发器,  提供了相关的基本操作。
            </summary>
            <param name="disclareIndex" type="int">
                <para>
                    数据包存放数量上限
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Send(KJFramework.Net.QueueObject.MessageQueueStruct)">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Clear">
            <summary>
                清除所有队列中的数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Clear(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                清除具有指定优先级的队列数据
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.GetInnerQueue(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.GetInnerQueueByPriority(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Add(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Add(KJFramework.Net.QueueObject.MessageQueueStruct,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Dispose">
            <summary>
                销毁
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Task">
            <summary>
                内部任务检测
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.ServerIep">
            <summary>
                获取或设置服务器网络终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Port">
            <summary>
                获取或设置服务器通讯端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.IsActive">
            <summary>
                获取或设置自动发送器可用标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.DisclaredIndex">
            <summary>
                数据包存放数量上限
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.DataDisclare" -->
        <member name="E:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.QueueEmpty">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.DistributionUdpAutoSender.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.BasicTcpListener">
            <summary>
                基础的TCP端口监听器基类 [Blocking Model - 杜塞模式]
                    * 此端口监听器适用于小量的端口监听数量工作，比如：要监听0~10个端口。
                    * 因为此类型的端口监听器，将会为开辟单独的线程用来监听，所以不适用于大数量端口监听工作。
                    * 使用此端口监听器时，请配套BasicTcpContextKeyManager(上下文管理器)来一起使用。
                    * 经测试，最多可按照传输延迟：20ms来接收持续数据。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.ITcpListener">
            <summary>
                TCP端口监听器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.ITcpListener.Listener">
            <summary>
                获取TCP端口监听对象
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.ITcpListener.UserConnected">
            <summary>
                新用户连接事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpListener.#ctor(System.Int32)">
            <summary>
                TCP端口监听器基类
            </summary>
            <param name="listenPort" type="int">
                <para>
                    监听端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
                TCP端口监听器基类
            </summary>
            <param name="ipaddress">监听的本地IP</param>
            <param name="listenPort" type="int">
                <para>
                    监听端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpListener.Start">
            <summary>
                开始监听
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpListener.Stop">
            <summary>
                停止监听
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicTcpListener.Listen">
            <summary>
                监听
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpListener.Listener">
            <summary>
                TCP端口监听对象
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.BasicTcpListener.UserConnected">
            <summary>
                新用户连接事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpListener.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpListener.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpListener.Port">
            <summary>
                监听的端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicTcpListener.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Parser.IParser`3">
            <summary>
                解析器元接口, 提供了相关的基本操作。
            </summary>
            <typeparam name="TKeyType">解析器唯一键值类型</typeparam>
            <typeparam name="TProcessor">处理器类型</typeparam>
            <typeparam name="TMessage">返回的消息类型</typeparam>
        </member>
        <member name="T:KJFramework.Net.Parser.IProcessorController`1">
            <summary>
                处理器控制者元接口, 提供了对于多个处理器的统一处理调度。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Parser.IProcessorController`1.Process(System.Byte[],KJFramework.Net.Builder.IMessageBuilder,KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                通过调度一个处理器集合，来完成处理工作。
                    * 如果当前给定的处理器集合中，处理器个数 == 1，则会使用这个唯一处理器进行处理，并输出处理结果。
                    * 如果当前给定的处理器集合中，存在多个处理器，则会按照排序，依次调用每个处理器的ProcessPartData()方法。
                      该方法一旦被调用，则相对的每个处理器将会给出仅仅属于该处理器部分的处理结果（byte[]）,然后的任务是
                      处理器控制着，将各个处理器的处理结果，汇总，拼接，并最终输出一个完整的结果。
                      如果当前处理器集合中，不存在任何处理器，则默认按照直接抛弃该次处理的机会规则进行处理。
            </summary>
            <param name="data">数据</param>
            <param name="builder">消息创建器</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的结果</returns>
        </member>
        <member name="M:KJFramework.Net.Parser.IParser`3.Check(System.Byte[])">
            <summary>
                检测指定数据在当前解析器中是否能能够被解析
            </summary>
            <param name="data">数据</param>
            <returns>返回false, 标示不能被解析</returns>
        </member>
        <member name="P:KJFramework.Net.Parser.IParser`3.IsEnable">
            <summary>
                获取或设置可用状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Parser.IParser`3.Processors">
            <summary>
                获取处理器集合
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UserHreatTimeoutEventArgs`1">
            <summary>
                用户心跳超时事件
            </summary>
            <remarks>
                当用户未心跳事件超过了预定的间隔后将会触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UserHreatTimeoutEventArgs`1.#ctor(`0)">
            <summary>
                用户心跳超时事件
            </summary>
            <param name="TimeoutUser" type="T">
                <para>
                    超时的用户
                </para>
            </param>
            <remarks>
                当用户未心跳事件超过了预定的间隔后将会触发该事件。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.UserHreatTimeoutEventArgs`1.TimeoutUser">
            <summary>
                超时的用户
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UdpListenerStartedEventArgs">
            <summary>
                UDP端口监听器开始监听事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UdpListenerStartedEventArgs.#ctor(System.Net.Sockets.UdpClient)">
            <summary>
                UDP端口监听器开始监听事件
            </summary>
            <param name="Client">监听中的UDP客户端</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.UdpListenerStartedEventArgs.Client">
            <summary>
                连接上的UDP客户端
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TcpServerNetworkStreamNotFoundException">
            <summary>
                TCP服务器网络流没有被找到异常
            </summary>
            <remarks>
                当使用TCP协议向服务器发送请求时，如果服务器的NetworkStream不存在或者为null时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TcpServerNetworkStreamNotFoundException.#ctor">
            <summary>
                TCP服务器网络流没有被找到异常
            </summary>
            <remarks>
                当使用TCP协议向服务器发送请求时，如果服务器的NetworkStream不存在或者为null时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.TcpAsynListenerDisconnectedEventArgs`1">
            <summary>
                TCP异步套接字监听器断开事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.TcpAsynListenerDisconnectedEventArgs`1.#ctor(`0[])">
            <summary>
                TCP异步套接字监听器断开事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.TcpAsynListenerDisconnectedEventArgs`1.ListenerInfo">
            <summary>
                监听器信息集合
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.MessageHeaderFlagUnCorrectException">
            <summary>
                消息头标示不合法异常
            </summary>
            <remarks>
                当消息头标示的长度不等于用户设定的消息头标示长度时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.MessageHeaderFlagUnCorrectException.#ctor">
            <summary>
                消息头标示不合法异常
            </summary>
            <remarks>
                当消息头标示的长度不等于用户设定的消息头标示长度时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ConnectionCountFullEventArgs">
            <summary>
                连接数到达上限事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ConnectionCountChanagedEventArgs">
            <summary>
                连接数更改事件
            </summary>
            <remarks>
                当连接池中的连接数有更改时，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ConnectionCountChanagedEventArgs.#ctor(System.Int32)">
            <summary>
                 连接数更改事件
            </summary>
            <param name="ConnectCount" type="int">
                <para>
                    当前的连接数
                </para>
            </param>
            <remarks>
                当连接池中的连接数有更改时，触发该事件。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ConnectionCountChanagedEventArgs.ConnectCount">
            <summary>
                当前的连接数
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ChannelHasNewMessageEventArgs`2">
            <summary>
                通道接收到了新的消息事件
            </summary>
            <typeparam name="TInfo">通道信息类型</typeparam>
            <typeparam name="TMessage">消息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ChannelHasNewMessageEventArgs`2.#ctor(`1,`0)">
            <summary>
                通道接收到了新的消息事件
            </summary>
            <param name="message">新的消息</param>
            <param name="channellnfo">通道信息</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelHasNewMessageEventArgs`2.Message">
            <summary>
                新信息
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ChannelHasNewMessageEventArgs`2.Channellnfo">
            <summary>
                获取通道信息
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.Cache.BasicFileTransmissionCache">
            <summary>
                基础的文件传送缓存，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Transmission.Cache.ITransmissionCache`1">
            <summary>
                传输缓存元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">缓存类型</typeparam>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.ITransmissionCache`1.SessionCode">
            <summary>
                获取或设置会话码
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.ITransmissionCache`1.PackageCount">
            <summary>
                获取或设置包数目
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.ITransmissionCache`1.Packages">
            <summary>
                获取或设置包集合
                    * 此处的Key值请使用包Id。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.BasicFileTransmissionCache.SessionCode">
            <summary>
                获取或设置会话码
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.BasicFileTransmissionCache.PackageCount">
            <summary>
                获取或设置包数目
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Transmission.Cache.BasicFileTransmissionCache.Packages">
            <summary>
                获取或设置包集合
                    * 此处的Key值请使用包Id。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Spy.IMessageSpyManager`1">
            <summary>
                消息拦截管理器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Spy.IMessageSpyManager`1.SpyRecevieMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                拦截接收到的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    接收的消息
                </para>
            </param>
            <returns>
                如果返回null, 则表示拦截器已经拦截到了相对应条件的消息。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Spy.IMessageSpyManager`1.SpySendMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                拦截要发送的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    发送的消息
                </para>
            </param>
            <returns>
                如果返回null, 则表示拦截器已经拦截到了相对应条件的消息。
            </returns>
        </member>
        <member name="T:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender">
            <summary>
                基础的基于UDP协议的自动发送器,  提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender._queues">
            <summary>
                存放不同优先级的数据队列
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.#ctor">
            <summary>
                基础的基于UDP协议的自动发送器,  提供了相关的基本操作。
                    * 使用此构造需要另行指定服务器的网络终结点。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.#ctor(System.Net.IPEndPoint)">
            <summary>
                基础的基于UDP协议的自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverIep" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
                基础的基于UDP协议的自动发送器,  提供了相关的基本操作。
            </summary>
            <param name="serverIep" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络终结点
                </para>
            </param>
            <param name="disclareIndex" type="int">
                <para>
                    数据包存放数量上限
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Send(KJFramework.Net.Message.NetMessage)">
            <summary>
                发送数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Clear">
            <summary>
                清除所有队列中的数据
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Clear(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                清除具有指定优先级的队列数据
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.GetInnerQueue(KJFramework.Basic.Enum.DataPriority)">
            <summary>
                获取内部具有指定优先级的队列
            </summary>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Add(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority)">
            <summary>
                向具有指定优先级的队列中打入队列成员
            </summary>
            <param name="member" type="T">
                <para>
                    队列成员
                </para>
            </param>
            <param name="dataPriority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    优先级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Dispose">
            <summary>
                销毁
            </summary>
        </member>
        <member name="M:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Task">
            <summary>
                内部任务检测
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.ServerIep">
            <summary>
                获取或设置服务器网络终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Port">
            <summary>
                获取或设置服务器通讯端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.IsActive">
            <summary>
                获取或设置自动发送器可用标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.DisclaredIndex">
            <summary>
                数据包存放数量上限
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.DataDisclare" -->
        <member name="E:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.QueueEmpty">
            <summary>
                数据队列已空事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Sender.AutoSender.UDP.BasicUdpAutoSender.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.Listener.Asynchronous.Obj.UdpState">
            <summary>
                Udp异步对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.Obj.UdpState.Iep">
            <summary>
                获取或设置网络终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.Asynchronous.Obj.UdpState.Client">
            <summary>
                获取或设置UDP客户端
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.QueueNotFoundException">
            <summary>
                队列未找到
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.QueueNotFoundException.#ctor">
            <summary>
                队列未找到
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.PluginPathNotFoundException">
            <summary>
                插件目录未找到异常
            </summary>
            <remarks>
                当读取的插件目录不存在时，触发此异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.DefalutChannelGroupLayerUnCorrectException">
            <summary>
                默认的通道群组所支持子层数目不正确异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.DefalutChannelGroupLayerUnCorrectException.#ctor">
            <summary>
                默认的通道群组所支持子层数目不正确异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.NetMessageRemovedEventArgs">
            <summary>
                移除响应队列中的超时消息事件
            </summary>
            <remarks>
                当响应队列中存在的消息超过自身的生命周期后，将会被移除出队列，从而触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.NetMessageRemovedEventArgs.#ctor(KJFramework.Net.Message.NetMessage)">
            <summary>
                移除响应队列中的超时消息异常
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    被移除的消息
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.NetMessageRemovedEventArgs.RemovedMessage">
            <summary>
                被移除的消息
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.NetMessageCommitedEventArgs">
            <summary>
                提交请求消息后事件
            </summary>
            <remarks>
                当客户端向服务器提交请求后, 将会触发该事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.NetMessageCommitedEventArgs.#ctor(KJFramework.Net.Message.NetMessage)">
            <summary>
                提交请求消息后事件
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    被提交的消息
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.NetMessageCommitedEventArgs.CommitedMessage">
            <summary>
                被提交的消息
            </summary>
        </member>
        <member name="T:KJFramework.Net.Scheduler.BasicApplicationServerScheduler">
            <summary>
                基础的应用服务器调度器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.IUdpCommumicationMessage">
            <summary>
                提供了地址字段，适用于UDP无协议通讯消息。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.IUdpCommumicationMessage.IpAddress">
            <summary>
                获取或设置IP地址
            </summary>
        </member>
        <member name="T:KJFramework.Net.Message.FileTransferCompensableAckMessage">
            <summary>
                可补偿的文件传送回馈包
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.LoseCount">
            <summary>
                获取或设置丢包数量
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.TotalPackageCount">
            <summary>
                获取或设置传输包的总共数量
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.HasCompensation">
            <summary>
                获取或设置一个值，该值指示了是否丢失补偿
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.LostIDCollection">
            <summary>
                获取或设置丢失的包裹ID集合
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.IsThirdParty">
            <summary>
                获取一个值，该值标示了当前消息体是不是一个第三方的消息体
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.IsBind">
            <summary>
                获取一个值，该值表示了当前消息是否已经转换为元数据成功。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Message.FileTransferCompensableAckMessage.IsPickup">
            <summary>
                获取一个值，该值表示了当前消息是否已经成功的转换为第三方自定义数据
            </summary>
        </member>
        <member name="T:KJFramework.Net.Factory.BasicNetMessageFactory">
            <summary>
                基础的网络消息工厂，提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Factory.BasicNetMessageFactory.Factory">
            <summary>
                基础的网络消息工厂，提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Factory.BasicNetMessageFactory.Messages">
            <summary>
                提供了测试消息的集合
            </summary>
        </member>
        <member name="M:KJFramework.Net.Factory.BasicNetMessageFactory.#ctor">
            <summary>
                私有的构造函数，打入一个默认的测试消息。
                    * 如果需要打入跟多的测试消息类型，请打入Messages字典。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Factory.BasicNetMessageFactory.CreateTestMessage">
            <summary>
                创造一个测试包
                    * 此创造测试包方法，用于创建一个在网络上用于测试连通状态的网络包。
            </summary>
            <returns>返回一个测试网络包</returns>
        </member>
        <member name="M:KJFramework.Net.Factory.BasicNetMessageFactory.CreateTestMessage``1(System.Int32)">
            <summary>
                创造一个测试包
            </summary>
            <typeparam name="TXProduct">测试包类型</typeparam>
            <param name="id">类型ID</param>
            <returns>返回一个测试网络包</returns>
        </member>
        <member name="M:KJFramework.Net.Factory.BasicNetMessageFactory.Create">
            <summary>
                创造一个新的网络消息
            </summary>
            <returns>返回创造好的网络消息</returns>
        </member>
        <member name="T:KJFramework.Net.Exception.RetryCountUnCorrectException">
            <summary>
                超时次数不正确异常
            </summary>
            <remarks>
                当超时次数小于0时，触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.RetryCountUnCorrectException.#ctor">
            <summary>
                超时次数不正确异常
            </summary>
            <remarks>
                当超时次数小于0时，触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ResponseManagerNotFoundException">
            <summary>
                消息响应器未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ResponseManagerNotFoundException.#ctor">
            <summary>
                消息响应器未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageDispatcherHasNullException">
            <summary>
                消息分配器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageDispatcherHasNullException.#ctor">
            <summary>
                消息分配器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.DeleteObjectHasNullException">
            <summary>
                要删除的对象为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.DeleteObjectHasNullException.#ctor">
            <summary>
                要删除的对象为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.DealerFactoryNotFoundException">
            <summary>
                未找到消息处理工厂异常
            </summary>
            <remarks>
                当消息处理工厂 == null时, 触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.DealerFactoryNotFoundException.#ctor">
            <summary>
                未找到消息处理工厂异常
            </summary>
            <remarks>
                当消息处理工厂 == null时, 触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.CheckerTimeSpanUnCorrectException">
            <summary>
                检查器时间间隔设置不正确异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.CheckerTimeSpanUnCorrectException.#ctor">
            <summary>
                检查器时间间隔设置不正确异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.CheckerMemberNotFoundException">
            <summary>
                检查器内部对象集合没有被找到异常
            </summary>
            <remarks>
                当检查器内部对象集合 == null时，触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.CheckerMemberNotFoundException.#ctor">
            <summary>
                检查器内部对象集合没有被找到异常
            </summary>
            <remarks>
                当检查器内部对象集合 == null时，触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.RecevierDisconnectedEventArgs">
            <summary>
                接收器断开连接事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.RecevierDisconnectedEventArgs.#ctor(System.String)">
            <summary>
                接收器断开连接事件
            </summary>
            <param name="key">唯一标识</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.RecevierDisconnectedEventArgs.Key">
            <summary>
                获取或设置唯一标识
            </summary>
        </member>
        <member name="T:KJFramework.Net.Configurations.NetworkLayerConfiguration">
            <summary>
                网络层配置项
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.BufferSize">
            <summary>
                TCP接收器相关配置 [BufferSize - TCP端口缓冲区读取字节大小]
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.BufferPoolSize">
            <summary>
                缓冲池最大缓冲上限（请不要小于0，最好为1024的倍数）
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHeaderLength">
            <summary>
                消息头长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHeaderFlag">
            <summary>
                消息头部标示
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHeaderFlagLength">
            <summary>
                消息头部标示长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHeaderEndFlag">
            <summary>
                消息头结束标示
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHeaderEndFlagLength">
            <summary>
                消息头结束标示长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageDealerFolder">
            <summary>
                处理器路径
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.MessageHookFolder">
            <summary>
                HOOK路径
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.SpyFolder">
            <summary>
                拦截器路径
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.BasicSessionStringTemplate">
            <summary>
                会话字符串模板
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.UserHreatCheckTimeSpan">
            <summary>
                用户心跳间隔
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.UserHreatTimeout">
            <summary>
                用户心跳超时
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.UserHreatAlertCount">
            <summary>
                用户心跳警告次数
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.FSHreatCheckTimeSpan">
            <summary>
                FS心跳检查间隔
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.FSHreatTimeout">
            <summary>
                FS心跳超时
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.FSHreatAlertCount">
            <summary>
                FS心跳警告次数
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.SessionExpireCheckTimeSpan">
            <summary>
                会话过期检测间隔
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.DefaultConnectionPoolConnectCount">
            <summary>
                默认连接池的连接数量
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.PredominantCpuUsage">
            <summary>
                优越的CPU使用率指标
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.PredominantMemoryUsage">
            <summary>
                优越的内存使用率指标
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.DefaultChannelGroupLayer">
            <summary>
                默认的通道群组层
            </summary>
        </member>
        <member name="F:KJFramework.Net.Configurations.NetworkLayerConfiguration.DefaultDecleardSize">
            <summary>
                默认可抛弃的队列数量
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.IP2PChannelManager`2">
            <summary>
                P2P(点对点)通道管理器
                   * 根据协议来区分。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Channel.IP2PChannelManager`2.RegisterChannel(System.Int32)">
            <summary>
                根据用户ID创建通道
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回null, 表示创建失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Channel.IP2PChannelManager`2.RemoveChannel(System.Int32)">
            <summary>
                根据用户ID移除通道
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回false, 表示移除失败。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Channel.IP2PChannelManager`2.GetChannel(System.Int32)">
            <summary>
                根据用户ID查找对应的通道
            </summary>
            <param name="userId" type="int">
                <para>
                    用户ID
                </para>
            </param>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Channel.IP2PChannelManager`2.Channels">
            <summary>
                获取通道列表
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.Group.IChannelGroupInfomation">
            <summary>
                通道群组信息元接口，提供了一系列关于当前通道群组相关信息的描述。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroupInfomation.GroupID">
            <summary>
                获取或设置群组编号
                    * 可与Key相同。
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroupInfomation.Description">
            <summary>
                获取或设置群组描述
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.Group.IChannelGroupInfomation.Tag">
            <summary>
                获取或设置附属属性。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.ITcpResponseManager">
            <summary>
                TCP协议消息响应管理器, 提供了基本的相关操作
            </summary>
            <remarks>
                此管理器适用于TCP协议
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Agent.ITcpResponseManager.Push(KJFramework.Net.Message.NetMessage,KJFramework.Net.XNetworkStream)">
            <summary>
                根据服务器的TCP网络流，发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器TCP网络流
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Net.Agent.ITcpResponseManager.ServerStream">
            <summary>
                服务器链接
            </summary>
        </member>
        <member name="T:KJFramework.Net.Agent.BasicTcpResponseManager">
            <summary>
               基础的TCP协议消息响应管理器, 提供了相应的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.#ctor">
            <summary>
               基础的TCP协议消息响应管理器, 提供了相应的基本操作
               使用才构造函数后，当向服务器发送消息请求时，请使用带网络流的Push()重载方法，
               否则将会抛出网络流异常。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.#ctor(KJFramework.Net.XNetworkStream)">
            <summary>
               基础的TCP协议消息响应管理器, 提供了相应的基本操作
            </summary>
            <param name="serverStream">
               服务器网络流
            </param>
        </member>
        <member name="F:KJFramework.Net.Agent.BasicTcpResponseManager._netMessageCollection">
            <summary>
                存放消息响应的集合
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.Push(KJFramework.Net.Message.NetMessage,KJFramework.Net.XNetworkStream)">
            <summary>
                根据服务器的TCP网络流，发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器TCP网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.Push(KJFramework.Net.Message.NetMessage)">
            <summary>
                向服务器发送消息请求
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.Add(KJFramework.Net.Message.NetMessage)">
            <summary>
                向消息响应队列中加入新的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    消息
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.PopMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID    [可忽略，忽略值为：-1]
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.BasicTcpResponseManager.GetMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                循环获取指定消息 [内部方法]
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID    [可忽略，忽略值为：-1]
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回null, 表示不存在
            </returns>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicTcpResponseManager.ServerStream">
            <summary>
                服务器链接
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicTcpResponseManager.Ttl">
            <summary>
                消息生命周期, 如果消息在当前队列中停留了该时间仍然没有被取出, 则会被移除出该队列中
                单位 : 毫秒
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.BasicTcpResponseManager.Timeout">
            <summary>
                超时时间, 如果到了此时间仍然没有指定请求包, 则会抛出超时异常
                单位 : 毫秒
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.BasicTcpResponseManager.NetMessageRemoved">
            <summary>
                移除响应队列中的超时消息事件
            </summary>
            <remarks>
                当响应队列中存在的消息超过自身的生命周期后，将会被移除出队列，从而触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Helper.NetHelper">
            <summary>
                提供了对于固定信息的相关操作
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageBodyEndFlag">
            <summary>
                消息体结束标示
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageBodyEndFlagLength">
            <summary>
                消息体结束标示长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageHeaderFlagLength">
            <summary>
                消息头标示长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageHeaderLength">
            <summary>
                消息头大小
                    * 消息头长度计算 = 消息头大小 + 消息头标示长度
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageHeaderFlag">
            <summary>
                消息头标示
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageHookFolder">
            <summary>
                消息钩子存放目录
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.MessageSpyFolder">
            <summary>
                消息拦截器存放目录
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.DefalutConnectCount">
            <summary>
                默认的连接池连接数量上限
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.PredominantCpuUsage">
            <summary>
                服务器性能指标(CPU)
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.PredominantMemoryUsage">
            <summary>
                服务器性能指标(内存)
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.ReadBufferSize">
            <summary>
                缓冲区大小
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.DefaultDecleardSize">
            <summary>
                默认的可抛弃类型数据队列的上限值
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.DefaultBufferPoolDiscardSize">
            <summary>
                默认的缓冲池缓冲上限
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.NetHelper.KeepAliveValue">
            <summary>
                TCP协议内置保持存活字节码
            </summary>
        </member>
        <member name="M:KJFramework.Net.Helper.NetHelper.GetNetMessageData(KJFramework.Net.Message.NetMessage)">
            <summary>
                获取一个消息中的数据
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要获取数据的消息
                </para>
            </param>
            <returns>
                返回消息中的有效数据部分, 调用此方法时, 如果消息不正确则会抛出异常。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Helper.NetHelper.GetRealityIP">
            <summary>
                获取本机真实IP地址
                    * 如果出现错误则会返回null。
            </summary>
            <returns>返回本机的真实IP地址</returns>
        </member>
        <member name="M:KJFramework.Net.Helper.NetHelper.GetInternetConnectState">
            <summary>
                检测当前计算机是否在网络上
                    * 此方法更多的是检测当前计算机是否连接这网络设备。
                      比如： 网线。
            </summary>
            <returns>返回连接状态</returns>
        </member>
        <member name="M:KJFramework.Net.Helper.NetHelper.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.SpyListNotFoundException">
            <summary>
                拦截器列表未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.SpyListNotFoundException.#ctor">
            <summary>
                拦截器列表未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageEntryHasNullException">
            <summary>
                消息入口点为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageEntryHasNullException.#ctor">
            <summary>
                消息入口点为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.QueueDataDisclareEventArgs">
            <summary>
                队列中的数据被抛弃事件
            </summary>
            <remarks>
                当某个队列中的数据被抛弃时，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.QueueDataDisclareEventArgs.#ctor(KJFramework.Net.Message.NetMessage)">
            <summary>
                队列中的数据被抛弃事件
            </summary>
            <param name="Message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    被抛弃的消息
                </para>
            </param>
            <remarks>
                当某个队列中的数据被抛弃时，触发该事件。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.QueueDataDisclareEventArgs.Message">
            <summary>
                被抛弃的消息
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.GetRecevieMessageEventArgs`1">
            <summary>
                接收消息事件
            </summary>
            <remarks>
                当接收到新的消息后, 激发此事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.GetRecevieMessageEventArgs`1.#ctor(KJFramework.Net.Message.NetMessage,`0)">
            <summary>
                接收到消息事件
            </summary>
            <param name="netMessage">新消息</param>
            <param name="connectionFlag">连接标示</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.GetRecevieMessageEventArgs`1.Netmessage">
            <summary>
                接收到的网络消息
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.GetRecevieMessageEventArgs`1.ConnectFlag">
            <summary>
                连接标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Deal.BasicDealerFactory">
            <summary>
                基础的消息处理工厂, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.#ctor">
            <summary>
                基础的消息处理工厂, 提供了相关的基本操作。
                使用默认的排序器(降序 0~x)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Deal.BasicDealerFactory.#ctor(System.Collections.Generic.IComparer{System.Int32})" -->
        <member name="F:KJFramework.Net.Deal.BasicDealerFactory._dealers">
            <summary>
                插件链表
            </summary>
        </member>
        <member name="F:KJFramework.Net.Deal.BasicDealerFactory._pluginDirectory">
            <summary>
                插件目录
            </summary>
        </member>
        <member name="F:KJFramework.Net.Deal.BasicDealerFactory._pluginsInfo">
            <summary>
                插件文件信息
            </summary>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.CreateDealer(System.Int32)">
            <summary>
                通过给定的协议ID来构造一个对应的消息处理器
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <returns>
                返回null,表示不存在处理该协议ID的消息处理器
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.CreateDealer(System.Int32,System.Int32)">
            <summary>
                通过给定的协议ID和服务ID来构造一个对应的消息处理器
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID
                </para>
            </param>
            <returns>
                返回null,表示不存在处理该协议ID和服务ID的消息处理器
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Load(System.Type)">
            <summary>
            按照配置文件中的插件目录进行读取，并且加载指定类型的插件
            </summary>
            <param name="pluginType" type="System.Type">
            <para>
            插件类型
            </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Load(System.String,System.Type)">
            <summary>
            获取指定目录中的，并且按照指定类型进行加载
            </summary>
            <param name="path" type="string">
            <para>
            目录
            </para>
            </param><param name="pluginType" type="System.Type">
            <para>
            类型
            </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Add(System.String)">
            <summary>
            按照全地址加载插件
            </summary>
            <param name="path" type="string">
            <para>
            插件的全地址
            </para>
            </param>
            <returns>
            返回false,表示加载失败
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Add(KJFramework.Net.Deal.IDealer)">
            <summary>
            按照类型加载插件
            </summary>
            <param name="pluginType" type="System.Type">
            <para>
            类型
            </para>
            </param>
            <returns>
            返回false,表示加载失败
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Remove(System.String)">
            <summary>
            卸载具有指定名称的插件
            </summary>
            <param name="name" type="string">
            <para>
            名称
            </para>
            </param>
            <returns>
            返回false,表示卸载失败
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Remove(System.Int32)">
            <summary>
            卸载具有指定ID的插件
            </summary>
            <param name="id" type="int">
            <para>
            id
            </para>
            </param>
            <returns>
            返回false,表示卸载失败
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.Clear">
            <summary>
            清除所有已加载的插件
            </summary>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.GetPluginList(System.String)">
            <summary>
            获取具有指定插件类别的插件链表
            </summary>
            <param name="catalogName" type="string">
            <para>
            插件类别
            </para>
            </param>
            <returns>
            返回null, 表示不存在当前插件类别
            </returns>
        </member>
        <member name="M:KJFramework.Net.Deal.BasicDealerFactory.GetEnumerable">
            <summary>
                得到处理器集合的迭代器
            </summary>
            <returns>返回迭代器</returns>
        </member>
        <member name="P:KJFramework.Net.Deal.BasicDealerFactory.Count">
            <summary>
                获取处理器个数
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs">
            <summary>
                基础的远程服务连接对象
                    * 适用于 AS -> FS
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.#ctor(KJFramework.Net.Message.INakeDispatcher{KJFramework.Net.Deal.IDealer},System.String,System.Int32)" -->
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.DispatcherMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                分派消息
            </summary>
            <param name="message">消息</param>
            <returns>返回消息结果</returns>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.NakeMessageDispatcher">
            <summary>
                获取消息分配器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.IpAddress">
            <summary>
                获取IP地址
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.Port">
            <summary>
                获取服务端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.HreatAlertCount">
            <summary>
                获取或设置FS心跳警告次数
            </summary>
            <remarks>
                当FS刚刚注册还没有来得及心跳时，此警告次数代表了FS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.SupportProtocol">
            <summary>
                获取或设置支持的协议ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.SupportService">
            <summary>
                获取或设置支持的服务ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicRemotingServiceConnectObject_4Fs.Key">
            <summary>
            获取或设置用来约束所有对象的唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Parser.BasicImMessageParser">
            <summary>
                基础的基于IM通讯的消息解析器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Parser.BasicImMessageParser.#ctor">
            <summary>
                基础的基于IM通讯的消息解析器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Parser.BasicImMessageParser.Check(System.Byte[])">
            <summary>
                检测指定数据在当前解析器中是否能能够被解析
            </summary>
            <param name="data">数据</param>
            <returns>返回false, 标示不能被解析</returns>
        </member>
        <member name="M:KJFramework.Net.Parser.BasicImMessageParser.Process(System.Byte[],KJFramework.Net.Builder.IMessageBuilder,KJFramework.Net.Buffer.IBufferPool)">
            <summary>
                通过调度一个处理器集合，来完成处理工作。
                    * 如果当前给定的处理器集合中，处理器个数 == 1，则会使用这个唯一处理器进行处理，并输出处理结果。
                    * 如果当前给定的处理器集合中，存在多个处理器，则会按照排序，依次调用每个处理器的ProcessPartData()方法。
                      该方法一旦被调用，则相对的每个处理器将会给出仅仅属于该处理器部分的处理结果（byte[]）,然后的任务是
                      处理器控制着，将各个处理器的处理结果，汇总，拼接，并最终输出一个完整的结果。
                      如果当前处理器集合中，不存在任何处理器，则默认按照直接抛弃该次处理的机会规则进行处理。
            </summary>
            <param name="data">数据</param>
            <param name="builder">消息创建器</param>
            <param name="bufferPool">缓冲池</param>
            <returns>返回处理后的结果</returns>
        </member>
        <member name="P:KJFramework.Net.Parser.BasicImMessageParser.IsEnable">
            <summary>
                获取或设置可用状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Parser.BasicImMessageParser.Processors">
            <summary>
                获取处理器集合
            </summary>
        </member>
        <member name="P:KJFramework.Net.Parser.BasicImMessageParser.Key">
            <summary>
                唯一键值
            </summary>
        </member>
        <member name="T:KJFramework.Net.IUpdatable">
            <summary>
                支持更新的元接口，提供了一个程序更新的相关基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.IUpdatable.Update">
            <summary>
                执行更新操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.IUpdatable.Update(System.String)">
            <summary>
                执行更新操作
            </summary>
            <param name="url">
                代表了版本的网络文件地址
                       * 该文件一般为XML格式。
            </param>
        </member>
        <member name="E:KJFramework.Net.IUpdatable.UpdateProcessing">
            <summary>
                更新状态事件
            </summary>
        </member>
        <member name="T:KJFramework.Net.Helper.ChannelGroupHelper">
            <summary>
                通道群组帮助器，提供了一些相关的属性信息。
            </summary>
        </member>
        <member name="F:KJFramework.Net.Helper.ChannelGroupHelper.DefaultChannelGroupLayer">
            <summary>
                获取默认的通道群组所支持的子层数
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ServiceKeyUnCorrectException">
            <summary>
                服务ID不正确异常
            </summary>
            <remarks>
                当服务ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ServiceKeyUnCorrectException.#ctor">
            <summary>
                服务ID不正确异常
            </summary>
            <remarks>
                当服务ID小于0时触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ObserverRuleHasNullException">
            <summary>
                观察规则为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ObserverRuleHasNullException.#ctor">
            <summary>
                观察规则为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.NetMessageHasNullException">
            <summary>
                消息未找到异常
            </summary>
            <remarks>
                当使用的消息对象为null时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.NetMessageHasNullException.#ctor">
            <summary>
                消息未找到异常
            </summary>
            <remarks>
                当使用的消息对象为null时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.MessageBodyHasNullException">
            <summary>
                消息体数据为null异常
            </summary>
            <remarks>
                当要使用消息体数据的时候，却发现消息体数据不存在，则触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.MessageBodyHasNullException.#ctor">
            <summary>
                消息体数据为null异常
            </summary>
            <remarks>
                当要使用消息体数据的时候，却发现消息体数据不存在，则触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.ConstructMessageHeaderFailException">
            <summary>
                构造消息头失败异常
            </summary>
            <remarks>
                当根据读取的数据来构造消息头, 并且构造失败的时候, 触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ConstructMessageHeaderFailException.#ctor">
            <summary>
                构造消息头失败异常
            </summary>
            <remarks>
                当根据读取的数据来构造消息头, 并且构造失败的时候, 触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.UpdateProcessingEventArgs">
            <summary>
                更新状态事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.UpdateProcessingEventArgs.#ctor(System.String)">
            <summary>
                更新状态事件
            </summary>
            <param name="state">当前更新的状态</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.UpdateProcessingEventArgs.State">
            <summary>
                获取当前更新的状态
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ServerDisconnectedEventArgs">
            <summary>
                服务器断开事件
            </summary>
            <remarks>
                当与服务器的TCP连接断开后, 触发该事件
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ServerDisconnectedEventArgs.#ctor">
            <summary>
                服务器断开事件
            </summary>
            <remarks>
                当与服务器的TCP连接断开后, 触发该事件
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Agent.TCP.BasicTcpServerAgent">
            <summary>
                基本的TCP服务代理器, 提供了相关的基本功能。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.#ctor(KJFramework.Net.XNetworkStream)">
            <summary>
                基本的TCP服务代理器, 提供了相关的基本功能。
            </summary>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器的网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.#ctor(KJFramework.Net.Agent.ITcpResponseManager,KJFramework.Net.XNetworkStream)">
            <summary>
                基本的TCP服务代理器, 提供了相关的基本功能。
            </summary>
            <param name="tcpResponseManager" type="KJFramework.Net.Agent.ITcpResponseManager">
                <para>
                    TCP消息响应器
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    服务器网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.CommitRequest(KJFramework.Net.Message.NetMessage,KJFramework.Basic.Enum.DataPriority,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
                向服务器提交需求反馈的消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    提交的消息
                </para>
            </param>
            <param name="priority" type="KJFramework.Basic.Enum.DataPriority">
                <para>
                    消息优先级
                </para>
            </param>
            <param name="autoCheckResult" type="bool">
                <para>
                   是否检测服务器反馈标示
                </para>
            </param>
            <param name="protocol">要返回消息包的协议编号</param>
            <param name="serviceKey">要返回协议包的服务编号</param>
            <param name="serviceItemIndex">要返回协议包的详细服务编号</param>
            <returns>
                返回null, 表示服务器暂时没有反馈。
            </returns>
        </member>
        <member name="M:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.PickupMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                取出具有指定协议ID和服务ID的消息，
                此方法将会堵塞，直到拥有合法的返回值或者超时。
            </summary>
            <param name="protocol" type="int">
                <para>
                    协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    服务ID    [可忽略，忽略值为：-1]
                </para>
            </param>
            <param name="serviceItemIndex" type="int">
                <para>
                    具体服务ID [可忽略，忽略值为：-1]
                </para>
            </param>
            <returns>
                返回对应规则的消息
                   * 如果在指定超时时间内，仍然没有获取到对应规则的消息包，
                     则会抛出超时的异常，请捕获。
            </returns>
        </member>
        <member name="P:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.ResponseManager">
            <summary>
                TCP协议响应消息队列
            </summary>
        </member>
        <member name="P:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.ServerStream">
            <summary>
                服务器链接
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.ServerDisconnected">
            <summary>
                服务器断开事件
            </summary>
            <remarks>
                当与服务器的TCP连接断开后, 触发该事件
            </remarks>
        </member>
        <member name="P:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="E:KJFramework.Net.Agent.TCP.BasicTcpServerAgent.NetMessageCommited">
            <summary>
                提交请求消息后事件
            </summary>
            <remarks>
                当客户端向服务器提交请求后, 将会触发该事件
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Pool.SocketAsyncEventArgsPool">
            <summary>
                基于.NETFRAMEWORK 3.5中SocketAsyncEventArgs的缓存池
            </summary>
        </member>
        <member name="F:KJFramework.Net.Pool.SocketAsyncEventArgsPool.Instance">
            <summary>
                基于.NETFRAMEWORK 3.5中SocketAsyncEventArgs的缓存池
                <para>* 初始化数量：10000。</para>
            </summary>
        </member>
        <member name="M:KJFramework.Net.Pool.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
                基于.NETFRAMEWORK 3.5中SocketAsyncEventArgs的缓存池
            </summary>
            <param name="capacity">初始化缓存数</param>
        </member>
        <member name="M:KJFramework.Net.Pool.SocketAsyncEventArgsPool.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Net.Pool.SocketAsyncEventArgsPool.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Pool.SocketAsyncEventArgsPool.Giveback(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                归还
            </summary>
            <param name="args">异步事件对象</param>
        </member>
        <member name="M:KJFramework.Net.Pool.SocketAsyncEventArgsPool.Rent">
            <summary>
                租借
            </summary>
            <returns>返回租借后的对象</returns>
        </member>
        <member name="T:KJFramework.Net.Helper.ITcpMessageHelper">
            <summary>
                TCP消息帮助器元接口, 提供了相关的基本结构
            </summary>
        </member>
        <member name="P:KJFramework.Net.Helper.ITcpMessageHelper.ReadBufferSize">
            <summary>
                每次读取TCP流的长度
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.SupportProtocolIdUnCorrectException">
            <summary>
                协议类型不正确异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.SupportProtocolIdUnCorrectException.#ctor">
            <summary>
                协议类型不正确异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.SessionBuilderHasNullException">
            <summary>
                会话构造器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.SessionBuilderHasNullException.#ctor">
            <summary>
                会话构造器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ServerConnectObjectHasNullException">
            <summary>
                服务器连接对象为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ServerConnectObjectHasNullException.#ctor">
            <summary>
                服务器连接对象为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.NakeDispatcherNotFoundException">
            <summary>
                核心消息分配器未找到异常
            </summary>
            <remarks>
                核心消息分配器 == null时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.NakeDispatcherNotFoundException.#ctor">
            <summary>
                核心消息分配器未找到异常
            </summary>
            <remarks>
                核心消息分配器 == null时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.CheckerHasNullException">
            <summary>
                检查器为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.CheckerHasNullException.#ctor">
            <summary>
                检查器为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.GetContextKeyDataEventArgs">
            <summary>
                上下文接收到数据事件
            </summary>
        </member>
        <member name="M:KJFramework.Net.EventArgs.GetContextKeyDataEventArgs.#ctor(System.Byte[])">
            <summary>
                上下文接收到数据事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.GetContextKeyDataEventArgs.Data">
            <summary>
                接收到的数据
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.IUdpASConnectObject">
            <summary>
                提供了基于UDP协议的AS（Application Server）的连接对象支持。
            </summary>
        </member>
        <member name="T:KJFramework.Net.Channel.ISupportRawStreamTransmissionChannel`1">
            <summary>
                支持发送元数据流（字节数组）的传输通道，提供了相关的基本操作。
            </summary>
            <typeparam name="TCache">发送类型</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KJFramework.Net.Channel.ISupportRawStreamTransmissionChannel`1.Send(System.Byte[],System.Object[],KJFramework.Basic.Enum.DataPriority)" -->
        <member name="P:KJFramework.Net.Channel.ISupportRawStreamTransmissionChannel`1.SessionBuilder">
            <summary>
                获取或设置会话码创建器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Channel.ISupportRawStreamTransmissionChannel`1.MessageBuilder">
            <summary>
                获取或设置传输消息创建器
            </summary>
        </member>
        <member name="T:KJFramework.Net.Builder.ITransmissionMessageBuilder">
            <summary>
                传输消息创建器元接口，提供了对于封装传输消息的相关操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Builder.ITransmissionMessageBuilder.BuildMessage(System.Byte[])">
            <summary>
                把一个字节数组数据封装成一个传输消息
            </summary>
            <param name="data">数据</param>
            <returns>返回封装后的传输消息</returns>
        </member>
        <member name="M:KJFramework.Net.Builder.ITransmissionMessageBuilder.BuildData(System.Byte[],System.Object[])">
            <summary>
                 把一个字节数组作为基础内容进行封装，然后输出可用来网络传输的数据流。
            </summary>
            <param name="rawData">数据</param>
            <param name="args">封装参数</param>
            <returns>返回可用来网络传输的数据流</returns>
        </member>
        <member name="T:KJFramework.Net.Listener.BasicUdpListener">
            <summary>
                基础的UDP端口监听器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.Init">
            <summary>
                监听器初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.#ctor(System.Int32)">
            <summary>
                基础的UDP端口监听器, 需要UDP端口消息接收器以及提供监听端口, 提供了相关的基本操作。
            </summary>
            <param name="port" type="int">
                <para>
                    监听端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.HookAndSendMessage(KJFramework.Net.Message.NetMessage,System.Net.IPEndPoint)">
            <summary>
                发送消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    被发送的消息    
                </para>
            </param>
            <param name="iep" type="System.Net.IPEndPoint">
                <para>
                    发送到的网络终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.Start">
            <summary>
                开始监听
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.Stop">
            <summary>
                停止监听
            </summary>
        </member>
        <member name="M:KJFramework.Net.Listener.BasicUdpListener.Listen">
            <summary>
                监听
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.UdpClient">
            <summary>
                获取UDP端口监听对象
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.MessageHookList">
            <summary>
                获取或设置消息钩子链表
            </summary>
        </member>
        <member name="E:KJFramework.Net.Listener.BasicUdpListener.ListenerStarted">
            <summary>
                UDP端口监听器开始监听事件
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.DebugLogger">
            <summary>
                获取或设置异常记录器
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.State">
            <summary>
                获取或设置当前的状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.Port">
            <summary>
                监听的端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.Listener.BasicUdpListener.Key">
            <summary>
                获取或设置唯一标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ConnectionTotalCountUnCorrectException">
            <summary>
                连接池数目上限错误异常
            </summary>
        </member>
        <member name="M:KJFramework.Net.Exception.ConnectionTotalCountUnCorrectException.#ctor">
            <summary>
                连接池数目上限错误异常
            </summary>
        </member>
        <member name="T:KJFramework.Net.Exception.ConnectIdUnCorrectException">
            <summary>
                连接ID错误异常
            </summary>
            <remarks>
                当连接ID小于0的时候触发该异常。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.ConnectIdUnCorrectException.#ctor">
            <summary>
                连接ID错误异常
            </summary>
            <remarks>
                当连接ID小于0的时候触发该异常。
            </remarks>
        </member>
        <member name="T:KJFramework.Net.Exception.BufferPoolNotFoundException">
            <summary>
                消息缓冲池未找到异常
            </summary>
            <remarks>
                当消息缓冲池 == null 时，触发该异常
            </remarks>
        </member>
        <member name="M:KJFramework.Net.Exception.BufferPoolNotFoundException.#ctor">
            <summary>
                消息缓冲池未找到异常
            </summary>
            <remarks>
                当消息缓冲池 == null 时，触发该异常
            </remarks>
        </member>
        <member name="T:KJFramework.Net.EventArgs.GetContextRecevieMessageEventArgs`1">
            <summary>
                上下文接收消息事件
            </summary>
            <remarks>
                当接收到新的消息后, 激发此事件
            </remarks>
            <typeparam name="TListenerInfo">监听器信息类型</typeparam>
        </member>
        <member name="M:KJFramework.Net.EventArgs.GetContextRecevieMessageEventArgs`1.#ctor(KJFramework.Net.Message.NetMessage,`0)">
            <summary>
                上下文接收消息事件
            </summary>
            <param name="netMessage">接收到的消息</param>
            <param name="connectionInfomation">监听器信息</param>
        </member>
        <member name="P:KJFramework.Net.EventArgs.GetContextRecevieMessageEventArgs`1.Netmessage">
            <summary>
                接收到的网络消息
            </summary>
        </member>
        <member name="P:KJFramework.Net.EventArgs.GetContextRecevieMessageEventArgs`1.ConnectionInfomation">
            <summary>
                连接标示
            </summary>
        </member>
        <member name="T:KJFramework.Net.EventArgs.ServerRetryTimeoutEventArgs`1">
            <summary>
                服务器重连超时事件
            </summary>
            <remarks>
                当重连次数到达上限后，触发该事件。
            </remarks>
        </member>
        <member name="M:KJFramework.Net.EventArgs.ServerRetryTimeoutEventArgs`1.#ctor(`0)">
            <summary>
                服务器重连超时事件
            </summary>
            <param name="serverConnectObject" type="T">
                <para>
                    重连超时的服务器连接对象
                </para>
            </param>
            <remarks>
                当重连次数到达上限后，触发该事件。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.EventArgs.ServerRetryTimeoutEventArgs`1.Serverconnectobject">
            <summary>
                重连超时的服务器连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Net.Deal.IDealer">
            <summary>
                消息处理器元接口, 提供了相应的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Net.Deal.IDealer.DealMessage(KJFramework.Net.Message.NetMessage)">
            <summary>
                处理消息
            </summary>
            <param name="message" type="KJFramework.Net.Message.NetMessage">
                <para>
                    要处理的消息
                </para>
            </param>
            <returns>
                返回处理后的消息
            </returns>
        </member>
        <member name="P:KJFramework.Net.Deal.IDealer.Protocol">
            <summary>
                获取可以处理的消息协议索引
            </summary>
        </member>
        <member name="P:KJFramework.Net.Deal.IDealer.Services">
            <summary>
                获取可以处理的消息协议中服务的索引
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject">
            <summary>
                 基础的基于TCP协议的FS连接对象
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID来初始化构造，此ID代表了当前FS网络流ID(唯一)。
                    * 请另行指定该FS所支持的协议ID以及服务ID等。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID以及支持的服务ID来初始化构造。
                    * 此构造缺少详细的服务ID，适用于独立协议处理的FS使用。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID以及网络流来初始化构造，此ID代表了当前FS网络流ID(唯一)。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    FS网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID以及服务ID来初始化构造。
                    * 此构造适用于对于同一个协议拥有不同处理的FS。
                    * 使用此构造，请另行设置FS网络流。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    支持的服务ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,KJFramework.Net.XNetworkStream,System.Net.IPEndPoint)">
            <summary>
                 基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID，FS网络流以及FS终结点来初始化构造，此ID代表了当前FS网络流ID(唯一)。
                    * 此构造使FS重连机制得到了很大的方便。
                    * 请另行设置其FS所支持协议ID以及服务ID
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    FS网络流
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    FS终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID以及FS网络流来初始化构造。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="ArrayList">
                <para>
                    支持的协议ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    FS网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList,KJFramework.Net.XNetworkStream)">
            <summary>
                基础的基于TCP协议的FS连接对象
                    * 使用一个连接ID，支持的协议ID，服务ID以及FS网络流来初始化构造。
                    * 虽然此构造很详细，但是还要另行指定该FS所在的网络终结点。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="protocolKey" type="int">
                <para>
                    支持的协议ID
                </para>
            </param>
            <param name="serviceKey" type="int">
                <para>
                    支持的服务ID
                </para>
            </param>
            <param name="serverStream" type="System.Net.Sockets.NetworkStream">
                <para>
                    FS网络流
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Retry">
            <summary>
                重新连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.SupportProtocol">
            <summary>
                获取或设置支持的协议ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.SupportService">
            <summary>
                获取或设置支持的服务ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.HreatAlertCount">
            <summary>
                获取或设置FS心跳警告次数
            </summary>
            <remarks>
                当FS刚刚注册还没有来得及心跳时，此警告次数代表了FS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.ConnectStream">
            <summary>
                获取或设置基本连接流
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.RetryCount">
            <summary>
                获取重试连接的总共次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.FunctionServer.BasicTcpFSConnectObject.RetryIndex">
            <summary>
                获取或设置已重试次数
            </summary>
        </member>
        <member name="T:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject">
            <summary>
                基础的基于UDP协议的AS（Application Server）连接对象
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.#ctor(System.String)">
            <summary>
                基础的基于UDP协议的AS连接对象
                    * 使用一个连接ID来初始化构造，此ID代表了当前AS网络流ID(唯一)。
                    * 请另行指定该AS所支持的协议ID以及服务ID等。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
                基础的基于UDP协议的AS连接对象
                    * 使用一个连接ID以及网络流来初始化构造，此ID代表了当前AS网络流ID(唯一)。
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverIEP" type="IPEndPoint">
                <para>
                    AS网络终结点
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.#ctor(System.String,System.Net.IPEndPoint,System.Int32)">
            <summary>
                 基础的基于UDP协议的AS连接对象
                    * 使用一个连接ID，AS网络流以及AS终结点来初始化构造，此ID代表了当前AS网络流ID(唯一)。
                    * 此构造使AS重连机制得到了很大的方便。
                    * 请另行设置其AS所支持协议ID以及服务ID
            </summary>
            <param name="connectID" type="string">
                <para>
                    连接ID
                </para>
            </param>
            <param name="serverIEP" type="System.Net.IPEndPoint">
                <para>
                    AS网络终结点
                </para>
            </param>
            <param name="port" type="int">
                <para>
                    AS服务端口
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Retry">
            <summary>
                重新连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Connect">
            <summary>
                连接
            </summary>
        </member>
        <member name="M:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Disconnect">
            <summary>
                断开连接
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Performance">
            <summary>
                获取或设置性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.LastHreatTime">
            <summary>
                获取或设置最后心跳时间
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.HreatAlertCount">
            <summary>
                获取或设置AS心跳警告次数
            </summary>
            <remarks>
                当AS刚刚注册还没有来得及心跳时，此警告次数代表了AS未心跳一次，并且已经超时的次数。
            </remarks>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.ServerID">
            <summary>
                获取或设置FS编号
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.ConnectID">
            <summary>
                获取或设置连接ID
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.ConnectState">
            <summary>
                获取或设置连接状态
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Key">
            <summary>
            获取或设置用来约束所有对象的唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.IpAddress">
            <summary>
                IP地址 - 类型 : String
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.IEP">
            <summary>
                终结点
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.RetryCount">
            <summary>
                获取重试连接的总共次数
            </summary>
        </member>
        <member name="P:KJFramework.Net.ConnectObject.ApplicationServer.BasicUdpASConnectObject.RetryIndex">
            <summary>
                获取或设置已重试次数
            </summary>
        </member>
    </members>
</doc>
