<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KJFramework</name>
    </assembly>
    <members>
        <member name="T:KJFramework.Plugin.IPluginConfig">
            <summary>
                插件配置器, 支持了获取插件宿主的功能。
            </summary>
        </member>
        <member name="T:KJFramework.IConfigurable">
            <summary>
                可配置元接口，提供了将一个配置文件附属到一个对向上的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.IConfigurable.Config(System.String)">
            <summary>
                读取配置文件
            </summary>
            <param name="path">配置文件全路径</param>
            <returns>返回一个配置器</returns>
        </member>
        <member name="M:KJFramework.IConfigurable.Config(System.String,System.Object)">
            <summary>
                读取配置文件
            </summary>
            <param name="path">配置文件全路径</param>
            <param name="args">可扩展的配置参数</param>
            <returns>返回一个配置器</returns>
        </member>
        <member name="M:KJFramework.IConfigurable.Config(System.String,System.Object[])">
            <summary>
                读取配置文件
            </summary>
            <param name="path">配置文件全路径</param>
            <param name="args">可扩展的配置参数集合</param>
            <returns>返回一个配置器</returns>
        </member>
        <member name="M:KJFramework.IConfigurable.GetConfiger">
            <summary>
                获取已经存在的配置器
            </summary>
            <returns>返回已经存在的配置器，如果未经过配置，则返回null。</returns>
        </member>
        <member name="T:KJFramework.Logger.BasicApplicationServerLogger">
            <summary>
                基础的应用服务器记录器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Logger.ISingleItemLogger`1">
            <summary>
                单一数据记录器元接口, 提供了对于单一记录的相关操作支持。
            </summary>
        </member>
        <member name="T:KJFramework.Logger.ILogger`1">
            <summary>
                日志记录器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Logger.ILogger`1.Initialize(System.String)">
            <summary>
                使用一个日志文件来初始化日志记录器, 如果该文件不存在，则自动创建。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件全路径
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.ILogger`1.Save">
            <summary>
                保存
            </summary>
        </member>
        <member name="M:KJFramework.Logger.ILogger`1.Log(`0)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="log" type="T">
                <para>
                    记录
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Logger.ILogger`1.LogFilePath">
            <summary>
                获取或设置记录文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.ILogger`1.Enable">
            <summary>
                获取或设置记录器的可用状态
            </summary>
        </member>
        <member name="M:KJFramework.Logger.ISingleItemLogger`1.GetLog">
            <summary>
                获取记录
            </summary>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.ISingleItemLogger`1.Instead(`0)">
            <summary>
                使用新的记录替换现有的记录
            </summary>
            <param name="log" type="T">
                <para>
                    新纪录
                </para>
            </param>
        </member>
        <member name="F:KJFramework.Logger.BasicApplicationServerLogger._log">
            <summary>
                初始的设置记录
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.#ctor">
            <summary>
                基础的应用服务器记录器, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.#ctor(System.String)">
            <summary>
                基础的应用服务器记录器, 提供了相关的基本操作。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件路径
                       * 如果给定的日志文件不存在，则会在该位置上新建日志文件。
                       * 如果给定的日志文件存在，则会尝试读取该日志文件。
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.GetLog">
            <summary>
                获取记录
            </summary>
            <returns>
                返回null, 表示不存在。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.Instead(KJFramework.Logger.LogObject.IApplicationServerSettingLog)">
            <summary>
                使用新的记录替换现有的记录
            </summary>
            <param name="log" type="T">
                <para>
                    新纪录
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.Initialize(System.String)">
            <summary>
                使用一个日志文件来初始化日志记录器, 如果该文件不存在，则自动创建。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件全路径
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.Save">
            <summary>
                保存
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicApplicationServerLogger.Log(KJFramework.Logger.LogObject.IApplicationServerSettingLog)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="log" type="T">
                <para>
                    记录
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Logger.BasicApplicationServerLogger.LogFilePath">
            <summary>
                获取或设置记录文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.BasicApplicationServerLogger.Enable">
            <summary>
                获取或设置记录器的可用状态
            </summary>
        </member>
        <member name="T:KJFramework.Logger.IDebugLogger`1">
            <summary>
                异常记录器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.Log(System.Exception)">
            <summary>
                使用默认的警告等级来记录错误。
            </summary>
            <param name="e" type="System.Exception">
                <para>
                    异常对象
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                使用一个指定的等级来记录错误。
            </summary>
            <param name="e" type="System.Exception">
                <para>
                    异常对象
                </para>
            </param>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    错误等级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.GetLog">
            <summary>
                获取所有异常记录
            </summary>
            <returns>返回异常记录列表</returns>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.GetLog(KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                获取具有指定异常等级异常记录集合
            </summary>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    异常等级
                </para>
            </param>
            <returns>
                返回null, 表示不存在该等级的异常。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.GetLog(System.DateTime,System.DateTime)">
            <summary>
                返回在开始日期到截至日期中存在的异常记录
            </summary>
            <param name="startTime">开始日期</param>
            <param name="endTime">截止日期</param>
            <returns>返回异常记录列表</returns>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.GetLog(System.DateTime,System.DateTime,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                获取在指定时间范围内并且具有指定异常等级的异常记录
            </summary>
            <param name="startTime" type="System.DateTime">
                <para>
                    起始时间
                </para>
            </param>
            <param name="endTime" type="System.DateTime">
                <para>
                    结束时间
                </para>
            </param>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    异常等级
                </para>
            </param>
            <returns>
                返回null, 表示不存在指定时间范围内的异常。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.IDebugLogger`1.Log(System.String,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                使用指定的异常等级，将指定文字添加到记录集合中
            </summary>
            <param name="text">要记录的文字</param>
            <param name="grade">异常等级</param>
        </member>
        <member name="T:KJFramework.Logger.BasicTextLogger`1">
            <summary>
                基础的文字记录器，提供了相关的基本操作。
            </summary>
            <typeparam name="T">文字日志记录项类型</typeparam>
        </member>
        <member name="T:KJFramework.Logger.ITextLogger`1">
            <summary>
                文字记录器元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KJFramework.Logger.ITextLogger`1.Log(System.Exception)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
                      *  使用此方法，记录的异常优先等级默认为：普通
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:KJFramework.Logger.ITextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
        </member>
        <member name="M:KJFramework.Logger.ITextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade,System.String)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
            <param name="name">
                记录人
                    * [注] ： 如果不当作头来用，可以设置为null
            </param>
        </member>
        <member name="M:KJFramework.Logger.ITextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade,System.Boolean,System.String)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
            <param name="isHead">头标示</param>
            <param name="name">
                记录人
                    * [注] ： 如果不当作头来用，可以设置为null
            </param>
        </member>
        <member name="M:KJFramework.Logger.ITextLogger`1.Log(System.String)">
            <summary>
                将指定文字内容记录到记录集合中
            </summary>
            <param name="text">文字内容</param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.#ctor(System.String)">
            <summary>
                基础的文字记录器，提供了相关的基本操作。
            </summary>
            <param name="logFilePath">日志文件地址</param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Initialize(System.String)">
            <summary>
                使用一个日志文件来初始化日志记录器, 如果该文件不存在，则自动创建。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件全路径
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Save">
            <summary>
                保存
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(`0)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="log" type="T">
                <para>
                    记录
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(System.Exception)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
                      *  使用此方法，记录的异常优先等级默认为：普通
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade,System.String)">
            <summary>
                将指定记录类型添加到记录集合中
                      *  记录器会自动判断是否为头部标示。
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
            <param name="name">
                记录人
                    * [注] ： 如果不当作头来用，可以设置为null
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade,System.Boolean,System.String)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="exception">异常对象</param>
            <param name="grade">异常等级</param>
            <param name="isHead">头标示</param>
            <param name="name">
                记录人
                    * [注] ： 如果不当作头来用，可以设置为null
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Log(System.String)">
            <summary>
                将指定文字内容记录到记录集合中
            </summary>
            <param name="text">文字内容</param>
        </member>
        <member name="M:KJFramework.Logger.BasicTextLogger`1.Dispose">
            <summary>
                销毁当前记录器
            </summary>
        </member>
        <member name="P:KJFramework.Logger.BasicTextLogger`1.LogFilePath">
            <summary>
                获取或设置记录文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.BasicTextLogger`1.Enable">
            <summary>
                获取或设置记录器的可用状态
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.MemoryPerformanceValueChangedEventArgs">
            <summary>
                内存性能值更改事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.MemoryPerformanceValueChangedEventArgs.#ctor(System.Double)">
            <summary>
                内存性能值更改事件
            </summary>
            <param name="memoryUsage">内存性能值</param>
        </member>
        <member name="P:KJFramework.EventArgs.MemoryPerformanceValueChangedEventArgs.MemoryUsage">
            <summary>
                获取CPU使用率
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.InfomationCollector">
            <summary>
                信息收集器基类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.IInfomationCollector">
            <summary>
                信息收集器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.ICollector">
            <summary>
                收集器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.IControlable">
            <summary>
                可控制对象接口，提供了一个对象的开始，停止方法。
            </summary>
        </member>
        <member name="M:KJFramework.IControlable.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.IControlable.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.ICollector.Id">
            <summary>
                获取唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.ICollector.IsActive">
            <summary>
                获取一个值，该值表示了当前收集器是否可用
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationCollector.GetReviewer">
            <summary>
                获取评审器
            </summary>
            <returns>返回评审器</returns>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationCollector.ResetCollectInterval(System.Double)">
            <summary>
                重置收集时间
            </summary>
            <param name="interval">收集时间</param>
        </member>
        <member name="P:KJFramework.Diagnostics.IInfomationCollector.CollectInterval">
            <summary>
                收集时间间隔
                       * 时间单位： 毫秒。
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.IInfomationCollector.CollectType">
            <summary>
                获取或设置被收集信息的对象类型
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.IInfomationCollector.CreateTime">
            <summary>
                获取创建时间
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.IInfomationCollector.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.IInfomationCollector.InfomationCollectorType">
            <summary>
                获取信息收集器类型枚举
            </summary>
        </member>
        <member name="E:KJFramework.Diagnostics.IInfomationCollector.NewInfomation">
            <summary>
                新信息事件
            </summary>
        </member>
        <member name="E:KJFramework.Diagnostics.IInfomationCollector.IntervalTimeChanged">
            <summary>
                收集时间被重置事件
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.#ctor(System.Type,KJFramework.Diagnostics.IInfomationReviewer)">
            <summary>
                信息收集器抽象类，提供了相关的基本操作。
            </summary>
            <param name="collectType">收集对象</param>
            <param name="reviewere">审查器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.GetReviewer">
            <summary>
                获取评审器
            </summary>
            <returns>返回评审器</returns>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.ResetCollectInterval(System.Double)">
            <summary>
                重置收集时间
            </summary>
            <param name="interval">收集时间</param>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationCollector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.Id">
            <summary>
                获取唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.IsActive">
            <summary>
                获取一个值，该值表示了当前收集器是否可用
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.CollectInterval">
            <summary>
                收集时间间隔
                       * 时间单位： 毫秒。
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.CollectType">
            <summary>
                获取或设置被收集信息的对象类型
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.CreateTime">
            <summary>
                获取创建时间
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="P:KJFramework.Diagnostics.InfomationCollector.InfomationCollectorType">
            <summary>
                获取信息收集器类型枚举
            </summary>
        </member>
        <member name="E:KJFramework.Diagnostics.InfomationCollector.NewInfomation">
            <summary>
                新信息事件
            </summary>
        </member>
        <member name="E:KJFramework.Diagnostics.InfomationCollector.IntervalTimeChanged">
            <summary>
                收集时间被重置事件
            </summary>
        </member>
        <member name="T:KJFramework.Delegate.LightDelegate">
            <summary>
                KJFramework框架中提供的轻型委托，提供了相关的基本操作。
                    * 执行委托项时，将会使用线程池中的线程。
            </summary>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.Add(KJFramework.Delegate.ILightDelegateItem)">
            <summary>
                向委托链中添加一个委托项
            </summary>
            <param name="lightDelegateItem">委托项</param>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.Remove(KJFramework.Delegate.ILightDelegateItem)">
            <summary>
                从委托链中移除一个委托项
            </summary>
            <param name="lightDelegateItem">委托项</param>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.GetDelegates">
            <summary>
                获取委托链
            </summary>
            <returns>返回委托链</returns>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.GetDelegates(System.Func{KJFramework.Delegate.ILightDelegateItem,System.Boolean})">
            <summary>
                获取委托链
            </summary>
            <returns>返回委托链</returns>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.Execute(System.Object[])">
            <summary>
                执行
            </summary>
            <param name="objs">执行参数</param>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegate.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:KJFramework.Configurations.Configurations">
            <summary>
                配置节管理器，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Configurations.GetConfiguration``1(System.Action{``0})">
            <summary>
                获取自定义配置节
                       * 当前默认加载方式为：本地加载
            </summary>
            <typeparam name="T">自定义配置节类型</typeparam>
            <param name="action">赋值自定义配置节的动作</param>
        </member>
        <member name="T:KJFramework.Datas.IConnectionObject`1">
            <summary>
                连接对象元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">连接对象类型</typeparam>
        </member>
        <member name="P:KJFramework.Datas.IConnectionObject`1.LiveTime">
            <summary>
                获取生存时间
            </summary>
        </member>
        <member name="P:KJFramework.Datas.IConnectionObject`1.Connection">
            <summary>
                获取或设置连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Logger.BasicSingleItemLogger`1">
            <summary>
                基础的单项记录器，提供了相关的基本操作。
            </summary>
            <typeparam name="TLog">日志类型</typeparam>
        </member>
        <member name="F:KJFramework.Logger.BasicSingleItemLogger`1._log">
            <summary>
                记录项
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.#ctor">
            <summary>
                基础的应用程序错误记录器
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.#ctor(System.String)">
            <summary>
                基础的应用程序错误记录器
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件路径
                       * 如果给定的日志文件不存在，则会在该位置上新建日志文件。
                       * 如果给定的日志文件存在，则会尝试读取该日志文件。
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.Instead(`0)">
            <summary>
                使用新的记录替换现有的记录
            </summary>
            <param name="log" type="T">
                <para>
                    新纪录
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.Initialize(System.String)">
            <summary>
                使用一个日志文件来初始化日志记录器, 如果该文件不存在，则自动创建。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件全路径
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.Save">
            <summary>
                保存
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicSingleItemLogger`1.Log(`0)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="log" type="T">
                <para>
                    记录
                </para>
            </param>
        </member>
        <member name="P:KJFramework.Logger.BasicSingleItemLogger`1.LogFilePath">
            <summary>
                获取或设置记录文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.BasicSingleItemLogger`1.Enable">
            <summary>
                获取或设置记录器的可用状态
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.ServerHreatEventArgs">
            <summary>
                服务器心跳事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.ServerHreatEventArgs.#ctor(System.Int32)">
            <summary>
                服务器心跳事件
            </summary>
            <param name="ServerID" type="int">
                <para>
                    服务器编号
                </para>
            </param>
        </member>
        <member name="P:KJFramework.EventArgs.ServerHreatEventArgs.ServerID">
            <summary>
                服务器编号
            </summary>\
        </member>
        <member name="T:KJFramework.EventArgs.PerformanceProviderChangedEventArgs">
            <summary>
                性能提供器更改事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.PerformanceProviderChangedEventArgs.#ctor(KJFramework.PerformanceProvider.IPerformanceProvider,System.Int32)">
            <summary>
                性能提供器更改事件
            </summary>
            <param name="Performance" type="KJFramework.PerformanceProvider.IPerformanceProvider">
                <para>
                    新的性能提供器
                </para>
            </param>
            <param name="ServerID" type="int">
                <para>
                    服务器编号
                </para>
            </param>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceProviderChangedEventArgs.Performance">
            <summary>
                新的性能提供器
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceProviderChangedEventArgs.ServerID">
            <summary>
                服务器编号
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.PerformanceChangedEventArgs">
            <summary>
                性能更改事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.PerformanceChangedEventArgs.#ctor(System.Single,System.Single)">
            <summary>
                性能更改事件
            </summary>
            <param name="cpuUsagePercent" type="float">
                <para>
                    CPU使用率
                </para>
            </param>
            <param name="memoryUsagePercent" type="float">
                <para>
                    内存使用率
                </para>
            </param>
        </member>
        <member name="M:KJFramework.EventArgs.PerformanceChangedEventArgs.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
                性能更改事件
            </summary>
            <param name="serverID" type="int">
                <para>
                    服务器编号
                </para>
            </param>
            <param name="cpuUsagePercent" type="float">
                <para>
                    CPU使用率
                </para>
            </param>
            <param name="memoryUsagePercent" type="float">
                <para>
                    内存使用率
                </para>
            </param>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceChangedEventArgs.ServerID">
            <summary>
                服务器编号
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceChangedEventArgs.CpuUsagePercent">
            <summary>
                CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceChangedEventArgs.MemoryUsagePercent">
            <summary>
                内存使用率
            </summary>
        </member>
        <member name="T:KJFramework.Statistics.IStatistic">
            <summary>
                统计元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Statistics.IStatistic.Initialize``1(``0)">
            <summary>
                初始化
            </summary>
            <param name="element">统计类型</param>
            <typeparam name="T">统计类型</typeparam>
        </member>
        <member name="M:KJFramework.Statistics.IStatistic.Close">
            <summary>
                关闭统计
            </summary>
        </member>
        <member name="P:KJFramework.Statistics.IStatistic.StatisticType">
            <summary>
                获取统计类型
            </summary>
        </member>
        <member name="P:KJFramework.Statistics.IStatistic.IsEnable">
            <summary>
                获取或设置可用标示
            </summary>
        </member>
        <member name="T:KJFramework.Delegate.ILightDelegateItem">
            <summary>
                轻型委托项元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Delegate.ILightDelegateItem.Execute(System.Object[])">
            <summary>
                运行
            </summary>
            <param name="objs">运行参数</param>
        </member>
        <member name="P:KJFramework.Delegate.ILightDelegateItem.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="T:KJFramework.Engin.Worker.Worker`1">
            <summary>
                抽象的工作者，对一些必要的方法提供了实现。
            </summary>
            <typeparam name="T">宿主类型</typeparam>
        </member>
        <member name="T:KJFramework.Engin.Worker.IWorker`1">
            <summary>
                工作者元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">宿主类型</typeparam>
        </member>
        <member name="M:KJFramework.Engin.Worker.IWorker`1.DoWork(`0)">
            <summary>
                执行方法，使用当前线程进行方法的执行操作。
            </summary>
            <param name="item">工作宿主 [ref]</param>
            <returns>返回工作的状态</returns>
        </member>
        <member name="M:KJFramework.Engin.Worker.IWorker`1.DoWorkAsyn(`0)">
            <summary>
                执行方法，异步进行方法的执行操作。
            </summary>
            <param name="item">工作宿主 [ref]</param>
            <returns>返回工作的状态</returns>
        </member>
        <member name="P:KJFramework.Engin.Worker.IWorker`1.State">
            <summary>
                获取当前工作者的工作状态
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.IWorker`1.WorkerProcessing">
            <summary>
                工作者工作状态汇报事件
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.IWorker`1.BeginWork">
            <summary>
                工作者开始工作事件
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.IWorker`1.EndWork">
            <summary>
                工作者停止工作事件
            </summary>
        </member>
        <member name="M:KJFramework.Engin.Worker.Worker`1.#ctor">
            <summary>
                工作者的抽象实现
            </summary>
        </member>
        <member name="M:KJFramework.Engin.Worker.Worker`1.DoWork(`0)">
            <summary>
                执行方法，使用当前线程进行方法的执行操作。
            </summary>
            <param name="item">工作宿主 [ref]</param>
            <returns>返回工作的状态</returns>
        </member>
        <member name="M:KJFramework.Engin.Worker.Worker`1.DoWorkAsyn(`0)">
            <summary>
                执行方法，异步进行方法的执行操作。
            </summary>
            <param name="item">工作宿主 [ref]</param>
            <returns>返回工作的状态</returns>
        </member>
        <member name="M:KJFramework.Engin.Worker.Worker`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Engin.Worker.Worker`1.State">
            <summary>
                获取当前工作者的工作状态
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.Worker`1.WorkerProcessing">
            <summary>
                工作者工作状态汇报事件
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.Worker`1.BeginWork">
            <summary>
                工作者开始工作事件
            </summary>
        </member>
        <member name="E:KJFramework.Engin.Worker.Worker`1.EndWork">
            <summary>
                工作者停止工作事件
            </summary>
        </member>
        <member name="T:KJFramework.Plugin.IExecutable">
            <summary>
                拥有可执行效果的插件元接口，提供了相关的“执行”基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Plugin.IExecutable.OnTerminate">
            <summary>
                停止时需要做的动作
            </summary>
        </member>
        <member name="T:KJFramework.Matcher.IMatcher">
            <summary>
                匹配器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Matcher.IMatcher.Match``1(System.String,KJFramework.Matcher.Rule.IMatcherRule)">
            <summary>
                根据一个文件进行匹配操作
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="path">文件全路径</param>
            <param name="rule">匹配规则</param>
            <returns>返回匹配后的结果</returns>
        </member>
        <member name="M:KJFramework.Matcher.IMatcher.Match(System.String,System.String,KJFramework.Matcher.Rule.IMatcherRule)">
            <summary>
                匹配操作
            </summary>
            <param name="path">文件全路径</param>
            <param name="tag">附属条件</param>
            <param name="rule">匹配规则</param>
            <returns>返回匹配后的一个字典集合</returns>
        </member>
        <member name="T:KJFramework.EventArgs.TickEventArgs">
            <summary>
                超时器触发间隔事件
            </summary>
        </member>
        <member name="T:KJFramework.Engin.Scheduler.Rule.IWorkerSchedulerRule`2">
            <summary>
                工作者调度规则，提供了相关的调度规范。
            </summary>
        </member>
        <member name="M:KJFramework.Engin.Scheduler.Rule.IWorkerSchedulerRule`2.Check(System.Collections.Generic.List{`0})">
            <summary>
                调度检测，仅返回调度器自身需要的工作者集合
            </summary>
            <param name="worker">工作者集合</param>
            <returns>返回需要的工作者集合</returns>
        </member>
        <member name="P:KJFramework.Engin.Scheduler.Rule.IWorkerSchedulerRule`2.Priority">
            <summary>
                获取调度优先级
            </summary>
        </member>
        <member name="T:KJFramework.Engin.IEngin">
            <summary>
                引擎元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Engin.IEngin.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Engin.IEngin.IsFinish">
            <summary>
                获取一个值，该值指示了当前引擎是否已经完成了所有的调度工作。
            </summary>
        </member>
        <member name="T:KJFramework.Services.IWindowsService">
            <summary>
                WINDOWS服务元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Services.IWindowsService.Start">
            <summary>
                开启服务
            </summary>
            <returns>返回开启的状态</returns>
        </member>
        <member name="M:KJFramework.Services.IWindowsService.Stop">
            <summary>
                停止服务
            </summary>
            <returns>返回停止的状态</returns>
        </member>
        <member name="P:KJFramework.Services.IWindowsService.ServiceName">
            <summary>
                获取或设置服务名称
            </summary>
        </member>
        <member name="P:KJFramework.Services.IWindowsService.DisplayName">
            <summary>
                获取或设置显示名称
            </summary>
        </member>
        <member name="P:KJFramework.Services.IWindowsService.FilePath">
            <summary>
                获取或设置服务可执行文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Services.IWindowsService.DirectoryPath">
            <summary>
                获取或设置服务可执行文件目录
            </summary>
        </member>
        <member name="T:KJFramework.PerformanceProvider.PerformanceCounters">
            <summary>
                性能计数器初始化操作帮助器
            </summary>
        </member>
        <member name="M:KJFramework.PerformanceProvider.PerformanceCounters.Regist(System.Type)">
            <summary>
                注册一个性能计数器的拥有者
            </summary>
            <param name="ownerType">拥有者类型</param>
        </member>
        <member name="M:KJFramework.PerformanceProvider.PerformanceCounters.GetCounter(System.Type,System.Int32)">
            <summary>
                获取一个指定拥有者的性能计数器
            </summary>
            <param name="ownerType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:KJFramework.EventArgs.NewInfomationEventArgs">
            <summary>
                新信息事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.NewInfomationEventArgs.#ctor(System.String)">
            <summary>
                新信息事件
            </summary>
            <param name="infomation">收集到的新信息</param>
        </member>
        <member name="M:KJFramework.EventArgs.NewInfomationEventArgs.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.EventArgs.NewInfomationEventArgs.Infomation">
            <summary>
                获取收集到的信息
            </summary>
        </member>
        <member name="T:KJFramework.Datas.DBConnectionPool`1">
            <summary>
                数据库连接池
            </summary>
        </member>
        <member name="F:KJFramework.Datas.DBConnectionPool`1.Instance">
            <summary>
                数据库连接池实例
            </summary>
        </member>
        <member name="F:KJFramework.Datas.DBConnectionPool`1.DefaultLiveTime">
            <summary>
                默认的对象存活时间
            </summary>
        </member>
        <member name="M:KJFramework.Datas.DBConnectionPool`1.GetConnection(System.Guid)">
            <summary>
                获取连接对象
            </summary>
            <param name="guid">连接对象唯一标识</param>
            <returns>返回连接对象</returns>
        </member>
        <member name="M:KJFramework.Datas.DBConnectionPool`1.SetConnection(`0,System.TimeSpan)">
            <summary>
                注册一个新的DB连接
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="timeSpan">存活时间</param>
            <returns>返回注册成功后的唯一键值</returns>
        </member>
        <member name="M:KJFramework.Datas.DBConnectionPool`1.RemoveConnection(System.Guid)">
            <summary>
                移除一个数据库连接
            </summary>
            <param name="guid">连接唯一标识</param>
        </member>
        <member name="T:KJFramework.Attribute.CustomerFieldAttribute">
            <summary>
                自定义配置节属性字段标签属性
            </summary>
        </member>
        <member name="M:KJFramework.Attribute.CustomerFieldAttribute.#ctor(System.String)">
            <summary>
                自定义配置节标签属性
            </summary>
            <param name="name">配置节名称</param>
        </member>
        <member name="M:KJFramework.Attribute.CustomerFieldAttribute.#ctor(System.String,System.Object)">
            <summary>
                自定义配置节标签属性
            </summary>
            <param name="name">配置节名称</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="P:KJFramework.Attribute.CustomerFieldAttribute.Name">
            <summary>
                获取自定义配置节名称
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.CustomerFieldAttribute.DefaultValue">
            <summary>
                获取或设置默认值
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.CustomerFieldAttribute.IsList">
            <summary>
                获取或设置当前字段是否为一个集合的标示
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.CustomerFieldAttribute.ElementType">
            <summary>
                获取或设置当前内部元素的类型
                       *　仅当IsList == true的时候有效。
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.CustomerFieldAttribute.ElementName">
            <summary>
                获取或设置当前内部元素的配置项名称
                       *　仅当IsList == true的时候有效。
            </summary>
        </member>
        <member name="T:KJFramework.Timer.ITimer">
            <summary>
                超时器元接口, 提供了相关的基本操作以及相关属性结构。
            </summary>
        </member>
        <member name="P:KJFramework.Timer.ITimer.TryCount">
            <summary>
                尝试总数
            </summary>
        </member>
        <member name="P:KJFramework.Timer.ITimer.TryIndex">
            <summary>
                当前尝试次数
            </summary>
        </member>
        <member name="E:KJFramework.Timer.ITimer.Timeout">
            <summary>
                 超时器超时事件
            </summary>
            <remarks>
                当已经到达所指定的尝试次数，仍然未满足指定条件，则会触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.EventArgs.PerformanceValueChangedEventArgs`1">
            <summary>
                性能值更改事件
            </summary>
            <remarks>
                此事件提供了对于不同性能检测器的性能值反馈。
            </remarks>
        </member>
        <member name="M:KJFramework.EventArgs.PerformanceValueChangedEventArgs`1.#ctor(`0,KJFramework.Basic.Enum.PerformanceTypes)">
            <summary>
                性能值更改事件
            </summary>
            <param name="value" type="T">
                <para>
                    性能值
                </para>
            </param>
            <param name="performanceTypes">性能提供器类型</param>
            <remarks>
                此事件提供了对于不同性能检测器的性能值反馈。
            </remarks>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceValueChangedEventArgs`1.PerformanceTypes">
            <summary>
                获取性能提供器类型
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.PerformanceValueChangedEventArgs`1.Value">
            <summary>
                性能值
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.DeleteServerEventArgs">
            <summary>
                删除服务器连接对象事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.DeleteServerEventArgs.#ctor(System.Int32)">
            <summary>
                 删除服务器连接对象事件
            </summary>
            <param name="ServerID" type="int">
                <para>
                    服务器编号
                </para>
            </param>
        </member>
        <member name="P:KJFramework.EventArgs.DeleteServerEventArgs.ServerID">
            <summary>
                服务器编号
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.EndWorkEventArgs">
            <summary>
                工作者停止工作事件
            </summary>
        </member>
        <member name="T:KJFramework.Security.ICertificate">
            <summary>
                证书元接口，提供了相关的基本安全属性。
            </summary>
        </member>
        <member name="P:KJFramework.Security.ICertificate.Category">
            <summary>
                获取或设置证书类别
            </summary>
        </member>
        <member name="P:KJFramework.Security.ICertificate.Certigier">
            <summary>
                获取或设置证书授权人
            </summary>
        </member>
        <member name="P:KJFramework.Security.ICertificate.InitializeTime">
            <summary>
                获取或设置证书初始化时间
            </summary>
        </member>
        <member name="P:KJFramework.Security.ICertificate.ExpiredTime">
            <summary>
                获取或设置证书过期时间
                    * 如果过期时间为null, 则表示当前证书永不过期。
            </summary>
        </member>
        <member name="P:KJFramework.Security.ICertificate.IsExpired">
            <summary>
                获取或设置一个值，该值指示了当前证书是否已经过期了
            </summary>
        </member>
        <member name="T:KJFramework.PerformanceProvider.PerformanceValue`1">
            <summary>
                性能值父类，提供了相关的基本属性结构。
            </summary>
            <typeparam name="T">性能值类型</typeparam>
        </member>
        <member name="T:KJFramework.PerformanceProvider.IPerformanceValue`1">
            <summary>
                性能值元接口，提供了相关的基本属性结构。
            </summary>
            <typeparam name="T">性能值类型</typeparam>
        </member>
        <member name="P:KJFramework.PerformanceProvider.IPerformanceValue`1.CpuUsagePercent">
            <summary>
                获取或设置CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.PerformanceProvider.IPerformanceValue`1.MemoryUsagePercent">
            <summary>
                获取或设置内存使用率从
            </summary>
        </member>
        <member name="M:KJFramework.PerformanceProvider.PerformanceValue`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.PerformanceProvider.PerformanceValue`1.CpuUsagePercent">
            <summary>
                获取或设置CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.PerformanceProvider.PerformanceValue`1.MemoryUsagePercent">
            <summary>
                获取或设置内存使用率从
            </summary>
        </member>
        <member name="T:KJFramework.MessageStacks.IMessageStack`1">
            <summary>
                消息协议栈元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Statistics.IStatisticable`1">
            <summary>
                可统计元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Statistics.IStatisticable`1.Statistics">
            <summary>
                获取或设置统计器
            </summary>
        </member>
        <member name="T:KJFramework.Plugin.IPlugin">
            <summary>
                插件元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Plugin.IPlugin.OnLoading">
            <summary>
                加载后需要做的动作
            </summary>
        </member>
        <member name="P:KJFramework.Plugin.IPlugin.PluginInfo">
            <summary>
                获取或设置插件信息
            </summary>
        </member>
        <member name="P:KJFramework.Plugin.IPlugin.Enable">
            <summary>
                 获取或设置可用标示
            </summary>
        </member>
        <member name="P:KJFramework.Plugin.IPlugin.PluginType">
            <summary>
                获取或设置插件类型
            </summary>
        </member>
        <member name="M:KJFramework.MessageStacks.IMessageStack`1.Pickup(System.Int32)">
            <summary>
                提取一个具有指定协议编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="M:KJFramework.MessageStacks.IMessageStack`1.Pickup(System.Int32,System.Int32)">
            <summary>
                 提取一个具有指定协议编号以及服务编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <param name="serviceId">服务编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="M:KJFramework.MessageStacks.IMessageStack`1.Pickup(System.Int32,System.Int32,System.Int32)">
            <summary>
                 提取一个具有指定协议编号，服务编号以及详细服务编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <param name="serviceId">服务编号</param>
            <param name="detailServiceId">详细服务编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="P:KJFramework.MessageStacks.IMessageStack`1.Count">
            <summary>
                获取当前协议栈中的消息数量
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.IMessageStack`1.Name">
            <summary>
                获取协议栈名称
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.IMessageStack`1.Version">
            <summary>
                获取协议栈版本
            </summary>
        </member>
        <member name="E:KJFramework.MessageStacks.IMessageStack`1.PickupSuccessfully">
            <summary>
                提取消息成功事件
            </summary>
        </member>
        <member name="E:KJFramework.MessageStacks.IMessageStack`1.PickupFailed">
            <summary>
                提取消息失败事件
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog">
            <summary>
                基础的应用服务器设置记录, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.IApplicationServerSettingLog">
            <summary>
                应用服务器设置记录元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.ILog">
            <summary>
                记录对象元接口, 提供了被记录对象的基本属性结构。
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ILog.Time">
            <summary>
                获取或设置记录具体日期事件
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ILog.Name">
            <summary>
                获取或设置记录名称
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ILog.User">
            <summary>
                获取或设置记录人
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ILog.LogType">
            <summary>
                获取该记录对象的类型
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ILog.Tag">
            <summary>
                获取或设置记录辅助数据
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IApplicationServerSettingLog.ServicePort">
            <summary>
                获取或设置服务开放端口 (TCP/UDP)
            </summary>
            <remarks>
                非远程端口, 远程服务端口应该由远程服务配置文件进行设定
            </remarks>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IApplicationServerSettingLog.RemotingConfigurationFilePath">
            <summary>
                获取或设置远程服务配置文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.ServicePort">
            <summary>
                获取或设置服务开放端口 (TCP/UDP)
            </summary>
            <remarks>
                非远程端口, 远程服务端口应该由远程服务配置文件进行设定
            </remarks>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.RemotingConfigurationFilePath">
            <summary>
                获取或设置远程服务配置文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.Time">
            <summary>
                获取或设置记录具体日期事件
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.Name">
            <summary>
                获取或设置记录名称
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.User">
            <summary>
                获取或设置记录人
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.LogType">
            <summary>
                获取该记录对象的类型
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicApplicationServerSettingLog.Tag">
            <summary>
                获取或设置记录辅助数据
            </summary>
        </member>
        <member name="T:KJFramework.Encrypt.EncryptHelper">
            <summary>
                加密帮助器，提供了很多零散算法的加密服务
            </summary>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary> 
            进行RC2加密。 
            </summary> 
            <param name="pToEncrypt">要加密的字符串。</param> 
            <param name="key">初始化向量</param> 
            <param name="iv">密钥，且必须为8位。</param> 
            <returns>以Base64格式返回的加密字符串。</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary> 
            进行RC2解密。 
            </summary> 
            <param name="pToDecrypt">要解密的以Base64</param> 
            <param name="key">初始化向量</param> 
            <param name="iv">密钥，且必须为8位。</param> 
            <returns>已解密的字符串。</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.RsaEncrypt(System.Byte[],System.Boolean)">
            <summary> 
            RSA加密 
            </summary> 
            <param name="dataToEncrypt"></param> 
            <param name="doOaepPadding"></param> 
            <returns></returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.RsaDecrypt(System.Byte[],System.Boolean)">
            <summary> 
            RSA解密 
            </summary> 
            <param name="dataToDecrypt"></param> 
            <param name="doOaepPadding"></param> 
            <returns></returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.Encrypt(System.String,System.String)">
            <summary> 
            进行DES加密。 
            </summary> 
            <param name="pToEncrypt">要加密的字符串。</param> 
            <param name="sKey">密钥，且必须为8位。</param> 
            <returns>以Base64格式返回的加密字符串。</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.Decrypt(System.String,System.String)">
            <summary> 
            进行DES解密。 
            </summary> 
            <param name="pToDecrypt">要解密的以Base64</param> 
            <param name="sKey">密钥，且必须为8位。</param> 
            <returns>已解密的字符串。</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.EncryptEx(System.Byte[],System.String)">
            <summary> 
            加密或解密（对称） 
            </summary> 
            <param name="data">明文或密文</param> 
            <param name="pass">密钥</param> 
            <returns>密文或明文</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.DecryptEx(System.Byte[],System.String)">
            <summary> 
            解密 
            </summary> 
            <param name="data"></param> 
            <param name="pass"></param> 
            <returns></returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.GetKey(System.Byte[],System.Int32)">
            <summary> 
            打乱密码 
            </summary> 
            <param name="pass">密码</param> 
            <param name="kLen">密码箱长度</param> 
            <returns>打乱后的密码</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.AesEncrypt(System.String,System.Boolean)">
            <summary> 
            AES加密 
            </summary> 
            <param name="plainStr">明文字符串</param> 
            <param name="returnNull">加密失败时是否返回 null，false 返回 String.Empty</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.AesEncrypt(System.String)">
            <summary> 
            AES加密 
            </summary> 
            <param name="plainStr">明文字符串</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.AesDecrypt(System.String,System.Boolean)">
            <summary> 
            AES解密 
            </summary> 
            <param name="encryptStr">密文字符串</param> 
            <param name="returnNull">解密失败时是否返回 null，false 返回 String.Empty</param> 
            <returns>明文</returns> 
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHelper.AesDecrypt(System.String)">
            <summary> 
            AES解密 
            </summary> 
            <param name="encryptStr">密文字符串</param> 
            <returns>明文</returns> 
        </member>
        <member name="P:KJFramework.Encrypt.EncryptHelper.Key">
            <summary> 
            获取密钥 
            </summary> 
        </member>
        <member name="P:KJFramework.Encrypt.EncryptHelper.Iv">
            <summary> 
            获取向量 
            </summary> 
        </member>
        <member name="T:KJFramework.Serializers.ArrayMetadataSerializer">
            <summary>
                数组元数据序列化器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Serializers.IMetadataSerializer">
            <summary>
                元数据序列化器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Serializers.IMetadataSerializer.Serialize``1(``0)">
            <summary>
                序列化
            </summary>
            <param name="obj" type="T">
                <para>
                    被序列化的对象
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.IMetadataSerializer.Serialize(System.Type,System.Object)">
            <summary>
                序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="obj">被序列化的对象</param>
            <returns>返回序列化后的元数据</returns>
        </member>
        <member name="M:KJFramework.Serializers.IMetadataSerializer.Deserialize``1(System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.IMetadataSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="type">类型</param>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="P:KJFramework.Serializers.IMetadataSerializer.SerializerType">
            <summary>
                获取序列化器类型
            </summary>
        </member>
        <member name="M:KJFramework.Serializers.ArrayMetadataSerializer.Serialize``1(``0)">
            <summary>
                序列化
            </summary>
            <param name="obj" type="T">
                <para>
                    被序列化的对象
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.ArrayMetadataSerializer.Serialize(System.Type,System.Object)">
            <summary>
                序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="obj">被序列化的对象</param>
            <returns>返回序列化后的元数据</returns>
        </member>
        <member name="M:KJFramework.Serializers.ArrayMetadataSerializer.Deserialize``1(System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.ArrayMetadataSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="type">类型</param>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="P:KJFramework.Serializers.ArrayMetadataSerializer.SerializerType">
            <summary>
                获取序列化器类型
            </summary>
        </member>
        <member name="T:KJFramework.Installers.IServiceInstaller`1">
            <summary>
                服务安装器元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">安装对象</typeparam>
        </member>
        <member name="M:KJFramework.Installers.IServiceInstaller`1.Install(`0)">
            <summary>
                安装服务
            </summary>
            <param name="obj">安装对象</param>
            <returns>返回安装的状态</returns>
        </member>
        <member name="M:KJFramework.Installers.IServiceInstaller`1.UnInstall(System.String)">
            <summary>
                卸载服务
            </summary>
            <param name="name">服务名</param>
            <returns>返回写在状态</returns>
        </member>
        <member name="T:KJFramework.Diagnostics.IInfomationReviewer">
            <summary>
                信息评审器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationReviewer.Regist(KJFramework.Diagnostics.IInfomationCollector)">
            <summary>
                注册信息收集器
            </summary>
            <param name="collector">信息收集器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationReviewer.UnRegist(KJFramework.Diagnostics.IInfomationCollector)">
            <summary>
                注销信息收集器
            </summary>
            <param name="collector">信息收集器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationReviewer.UnRegist(System.Guid)">
            <summary>
                注册信息收集器
            </summary>
            <param name="id">信息收集器唯一标示</param>
        </member>
        <member name="M:KJFramework.Diagnostics.IInfomationReviewer.GetCollector(System.Guid)">
            <summary>
                获取具有指定唯一标示的信息收集器
            </summary>
            <param name="id">信息收集器唯一标示</param>
            <returns>返回对应的信息收集器</returns>
        </member>
        <member name="T:KJFramework.Exception.LightException">
            <summary>
                实现了IDisposable接口的轻量级异常类。
            </summary>
        </member>
        <member name="M:KJFramework.Exception.LightException.#ctor">
            <summary>
                实现了IDisposable接口的轻量级异常类。
            </summary>
        </member>
        <member name="M:KJFramework.Exception.LightException.#ctor(System.String)">
            <summary>
                实现了IDisposable接口的轻量级异常类。
            </summary>
            <param name="message">消息内容</param>
        </member>
        <member name="M:KJFramework.Exception.LightException.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:KJFramework.Configurations.Loaders.IConfigurationLoader">
            <summary>
                配置加载器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Loaders.IConfigurationLoader.Load``1(System.Action{``0})">
            <summary>
                加载配置
            </summary>
            <typeparam name="T">自定义配置节类型</typeparam>
            <param name="action">赋值自定义配置节的动作</param>
        </member>
        <member name="P:KJFramework.Configurations.Loaders.IConfigurationLoader.ConfigurationLoaderType">
            <summary>
                获取配置加载器类型
            </summary>
        </member>
        <member name="T:KJFramework.PerformanceProvider.BasicPerformanceProvider">
            <summary>
                基本的性能提供器, 提供了相关的基本属性结构
            </summary>
        </member>
        <member name="T:KJFramework.PerformanceProvider.IPerformanceProvider">
            <summary>
                性能提供器接口, 提供了相关的性能属性结构。
            </summary>
        </member>
        <member name="M:KJFramework.PerformanceProvider.IPerformanceProvider.GetPerformanceState(System.Single,System.Single)">
            <summary>
                获取当前性能状态
            </summary>
            <param name="cpuUsagePercent">CPU性能标准</param>
            <param name="memoryUsagePercent">内存性能标准</param>
            <returns>返回性能状态的枚举</returns>
        </member>
        <member name="P:KJFramework.PerformanceProvider.IPerformanceProvider.CpuUsagePercent">
            <summary>
                获取或设置CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.PerformanceProvider.IPerformanceProvider.MemoryUsagePercent">
            <summary>
                获取或设置内存使用率从
            </summary>
        </member>
        <member name="M:KJFramework.PerformanceProvider.BasicPerformanceProvider.GetPerformanceState(System.Single,System.Single)">
            <summary>
                获取当前性能状态
            </summary>
            <param name="cpuUsagePercent">CPU性能标准</param>
            <param name="memoryUsagePercent">内存性能标准</param>
            <returns>返回性能状态的枚举</returns>
        </member>
        <member name="P:KJFramework.PerformanceProvider.BasicPerformanceProvider.CpuUsagePercent">
            <summary>
                获取或设置CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.PerformanceProvider.BasicPerformanceProvider.MemoryUsagePercent">
            <summary>
                获取或设置内存使用率从
            </summary>
        </member>
        <member name="T:KJFramework.Tasks.ITask">
            <summary>
                任务元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.ITask.Cancel">
            <summary>
                取消任务
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.ITask.Execute">
            <summary>
                执行任务
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.ITask.ExecuteAsyn">
            <summary>
                异步执行任务
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.Description">
            <summary>
                获取或设置任务描述
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.Id">
            <summary>
                获取或设置任务唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.IsFinished">
            <summary>
                获取一个值，该值表示了当前任务是否已经完成
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.IsCanceled">
            <summary>
                获取一个值，该值表示了当前任务是否已经取消
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.CreateTime">
            <summary>
                获取任务创建时间
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.ExpiredTime">
            <summary>
                获取或设置任务过期时间
                        * 如果设置为null, 则表示永远不过期
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.ITask.Priority">
            <summary>
                获取或设置任务优先级
            </summary>
        </member>
        <member name="T:KJFramework.Serializers.OtherMetadataSerializer">
            <summary>
                其他类型元数据序列化器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Serializers.OtherMetadataSerializer.Serialize``1(``0)">
            <summary>
                序列化
            </summary>
            <param name="obj" type="T">
                <para>
                    被序列化的对象
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.OtherMetadataSerializer.Serialize(System.Type,System.Object)">
            <summary>
                序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="obj">被序列化的对象</param>
            <returns>返回序列化后的元数据</returns>
        </member>
        <member name="M:KJFramework.Serializers.OtherMetadataSerializer.Deserialize``1(System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.OtherMetadataSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="type">类型</param>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="P:KJFramework.Serializers.OtherMetadataSerializer.SerializerType">
            <summary>
                获取序列化器类型
            </summary>
        </member>
        <member name="T:KJFramework.Security.Policy.IRemedyPolicy`1">
            <summary>
                补救策略元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="TRemedy">补救对象</typeparam>
        </member>
        <member name="T:KJFramework.Security.Policy.IPolicy">
            <summary>
                策略接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.IPolicy.Deployed">
            <summary>
                获取一个值，该值表示了当前策略是否已经被部署
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.IPolicy.Infomation">
            <summary>
                获取策略信息
            </summary>
        </member>
        <member name="M:KJFramework.Security.Policy.IRemedyPolicy`1.Remedy(`0)">
            <summary>
                补救
            </summary>
            <returns>返回补救的结果</returns>
        </member>
        <member name="P:KJFramework.Security.Policy.IRemedyPolicy`1.MaxRemedyCount">
            <summary>
                获取或设置做大补救次数
            </summary>
        </member>
        <member name="T:KJFramework.Security.IAuthorization">
            <summary>
                授权元接口，提供了相关的基本属性结构
            </summary>
        </member>
        <member name="P:KJFramework.Security.IAuthorization.Certigier">
            <summary>
                获取授权人
            </summary>
        </member>
        <member name="P:KJFramework.Security.IAuthorization.Category">
            <summary>
                获取授权类别
            </summary>
        </member>
        <member name="P:KJFramework.Security.IAuthorization.Time">
            <summary>
                获取授权日期
            </summary>
        </member>
        <member name="T:KJFramework.Reflection.MsilParser">
            <summary>
                Microsoft MSIL Lanauage解析器
            </summary>
        </member>
        <member name="M:KJFramework.Reflection.MsilParser.ConstructInstructions(System.Reflection.Module)">
            <summary>
            Constructs the array of ILInstructions according to the IL byte code.
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:KJFramework.Reflection.MsilParser.Parse(System.Reflection.MethodInfo)">
            <summary>
                将一个.NET方法体解析为一组MSIL语言结构
            </summary>
            <param name="mi">要解析的方法</param>
            <returns>返回解析后的MSIL语言结构</returns>
        </member>
        <member name="T:KJFramework.Compress.Compressor">
            <summary>
                压缩器抽象父类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Compress.ICompressor">
            <summary>
                压缩器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Compress.ICompressor.Compress(System.Byte[])">
            <summary>
                压缩一个二进制字节数组
            </summary>
            <param name="data">被压缩的字节数组</param>
            <returns>返回压缩后的数据</returns>
        </member>
        <member name="M:KJFramework.Compress.ICompressor.DeCompress(System.Byte[])">
            <summary>
                解压缩一个二进制字节数组
            </summary>
            <param name="data">被解压缩的字节数组</param>
            <returns>返回解压缩后的数据</returns>
        </member>
        <member name="M:KJFramework.Compress.Compressor.Compress(System.Byte[])">
            <summary>
                压缩一个二进制字节数组
            </summary>
            <param name="data">被压缩的字节数组</param>
            <returns>返回压缩后的数据</returns>
        </member>
        <member name="M:KJFramework.Compress.Compressor.DeCompress(System.Byte[])">
            <summary>
                解压缩一个二进制字节数组
            </summary>
            <param name="data">被解压缩的字节数组</param>
            <returns>返回解压缩后的数据</returns>
        </member>
        <member name="T:KJFramework.Logger.LogObject.ITextLogFormatter">
            <summary>
                文字日志项格式元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ITextLogFormatter.Up">
            <summary>
               获取上分割符
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ITextLogFormatter.Down">
            <summary>
               获取上分割符
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ITextLogFormatter.LeftSplitChar">
            <summary>
                获取左侧分隔符
            </summary>
        </member>
        <member name="T:KJFramework.Loader.ILoader">
            <summary>
                装载器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Loader.ILoader.Load(System.Type,System.String,System.Object)">
            <summary>
                将自身类型作为要装载的类型，进行自动注入填充
            </summary>
            <param name="type">自身的类型 [ref]</param>
            <param name="path">文件全路径</param>
            <param name="obj">自身实例</param>
            <returns>返回装载的状态</returns>
        </member>
        <member name="M:KJFramework.Loader.ILoader.Load(System.String)">
            <summary>
                将自身类型作为要装载的类型，进行自动注入填充
            </summary>
            <param name="path">文件全路径</param>
            <returns>返回装载的状态</returns>
        </member>
        <member name="M:KJFramework.Loader.ILoader.Load``1(System.String)">
            <summary>
                将一个文件自动注入到给定类型的必要字段中
            </summary>
            <typeparam name="T">要注入的类型</typeparam>
            <param name="path">文件全路径</param>
            <returns>返回装载的后对象，如果返回null, 则表示装载失败</returns>
        </member>
        <member name="P:KJFramework.Loader.ILoader.Matcher">
            <summary>
                获取或设置匹配器
            </summary>
        </member>
        <member name="T:KJFramework.Engin.Scheduler.IWorkerScheduler`2">
            <summary>
                工作者调度器元接口，提供了相关的调度工作。
            </summary>
            <typeparam name="TWorker">工作者类型</typeparam>
            <typeparam name="THost">工作者所需要的宿主类型</typeparam>
        </member>
        <member name="M:KJFramework.Engin.Scheduler.IWorkerScheduler`2.Dispatcher(System.Collections.Generic.List{`0})">
            <summary>
                执行调度工作
            </summary>
            <param name="worker">要调度的工作者集合</param>
        </member>
        <member name="P:KJFramework.Engin.Scheduler.IWorkerScheduler`2.IsFinish">
            <summary>
                获取一个值，该值表示了当前的调度器是否已经完成了全部的调度工作
            </summary>
        </member>
        <member name="P:KJFramework.Engin.Scheduler.IWorkerScheduler`2.Rule">
            <summary>
                获取调度规则
            </summary>
        </member>
        <member name="T:KJFramework.Services.WindowsService">
            <summary>
                WINDOWS服务，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Services.WindowsService.#ctor(System.IntPtr)">
            <summary>
                WINDOWS服务，提供了相关的基本操作
            </summary>
            <param name="serviceHandle">服务句柄</param>
        </member>
        <member name="M:KJFramework.Services.WindowsService.#ctor(System.String)">
            <summary>
                WINDOWS服务，提供了相关的基本操作
            </summary>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:KJFramework.Services.WindowsService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Services.WindowsService.Start">
            <summary>
                开启服务
            </summary>
            <returns>返回开启的状态</returns>
        </member>
        <member name="M:KJFramework.Services.WindowsService.Stop">
            <summary>
                停止服务
            </summary>
            <returns>返回停止的状态</returns>
        </member>
        <member name="P:KJFramework.Services.WindowsService.ServiceName">
            <summary>
                获取或设置服务名称
            </summary>
        </member>
        <member name="P:KJFramework.Services.WindowsService.DisplayName">
            <summary>
                获取或设置显示名称
            </summary>
        </member>
        <member name="P:KJFramework.Services.WindowsService.FilePath">
            <summary>
                获取或设置服务可执行文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Services.WindowsService.DirectoryPath">
            <summary>
                获取或设置服务可执行文件目录
            </summary>
        </member>
        <member name="T:KJFramework.Reflection.Reflector">
            <summary>
                反射器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.#cctor">
            <summary>
                反射器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.GeneratMethodSignature(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Reflection.MethodAttributes)">
            <summary>
                根据一个指定的方法信息，动态生成对于指定类型的该方法签名
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="methodInfo">参照的方法模板</param>
            <param name="methodAttributes">方法属性</param>
            <returns>返回生成后的方法生成器</returns>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.Create(System.String)">
            <summary>
                根据一个程序集名称动态创建一个程序集生成器
                    *　该方法生成出来的程序集生成器的访问权限为：Run
            </summary>
            <param name="name">程序集名称</param>
            <returns>返回程序集生成器</returns>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.Create(System.String,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
                根据一个程序集名称动态创建一个程序集生成器
            </summary>
            <param name="name">程序集名称</param>
            <param name="assemblyBuilderAccess">访问权限</param>
            <returns>返回程序集生成器</returns>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.Create(System.AppDomain,System.String,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
                根据一个程序集名称动态在指定的应用程序域中创建一个程序集生成器
            </summary>
            <param name="demain">应用程序域</param>
            <param name="name">程序集名称</param>
            <param name="assemblyBuilderAccess">访问权限</param>
            <returns>返回程序集生成器</returns>
        </member>
        <member name="M:KJFramework.Reflection.Reflector.ProcessSpecialTypes(System.String)">
            <summary>
            Retrieve the friendly name of a type
            </summary>
            <param name="typeName">
            The complete name to the type
            </param>
            <returns>
            The simplified name of the type (i.e. "int" instead f System.Int32)
            </returns>
        </member>
        <member name="T:KJFramework.Reflection.MsilInstruction">
            <summary>
                Microsoft MSIL Lanauage 结构
               <para>* 此结构保存每一条MSIL指令的相关信息。</para>
            </summary>
        </member>
        <member name="T:KJFramework.Reflection.IMsilInstruction">
            <summary>
                Microsoft MSIL Lanauage 结构元接口
               <para>* 此结构保存每一条MSIL指令的相关信息。</para>
            </summary>
        </member>
        <member name="M:KJFramework.Reflection.IMsilInstruction.GetCode">
            <summary>
                输出关于此条指令的可视化语句
            </summary>
            <returns>返回可视化语句</returns>
        </member>
        <member name="P:KJFramework.Reflection.IMsilInstruction.Code">
            <summary>
                获取或设置指令
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.IMsilInstruction.Operand">
            <summary>
                获取或设置操作
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.IMsilInstruction.OperandData">
            <summary>
                相关操作元数据
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.IMsilInstruction.Offset">
            <summary>
                当前指令的偏移地址
            </summary>
        </member>
        <member name="M:KJFramework.Reflection.MsilInstruction.GetCode">
            <summary>
                输出关于此条指令的可视化语句
            </summary>
            <returns>返回可视化语句</returns>
        </member>
        <member name="M:KJFramework.Reflection.MsilInstruction.GetExpandedOffset(System.Int64)">
            <summary>
            Add enough zeros to a number as to be represented on 4 characters
            </summary>
            <param name="offset">
            The number that must be represented on 4 characters
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:KJFramework.Reflection.MsilInstruction.Code">
            <summary>
                获取或设置指令
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.MsilInstruction.Operand">
            <summary>
                获取或设置操作
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.MsilInstruction.OperandData">
            <summary>
                相关操作元数据
            </summary>
        </member>
        <member name="P:KJFramework.Reflection.MsilInstruction.Offset">
            <summary>
                当前指令的偏移地址
            </summary>
        </member>
        <member name="T:KJFramework.PerformanceProvider.PerformanceValue">
            <summary>
                性能值父类，提供了相关的基本属性结构。
            </summary>
        </member>
        <member name="M:KJFramework.PerformanceProvider.PerformanceValue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.PerformanceProvider.PerformanceValue.CpuUsagePercent">
            <summary>
                获取或设置CPU使用率
            </summary>
        </member>
        <member name="P:KJFramework.PerformanceProvider.PerformanceValue.MemoryUsagePercent">
            <summary>
                获取或设置内存使用率从
            </summary>
        </member>
        <member name="T:KJFramework.Configurations.CustomerConfig">
            <summary>
                客户自定义配置节
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.CustomerConfig.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <returns>
            The created section handler object.
            </returns>
            <param name="parent">Parent object.
                            </param><param name="configContext">Configuration context object.
                            </param><param name="section">Section XML node.
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:KJFramework.Configurations.Items.ConfigurationSettingsItem">
            <summary>
                配置相关设置项
            </summary>
        </member>
        <member name="F:KJFramework.Configurations.Items.ConfigurationSettingsItem.LogPath">
            <summary>
                日志记录位置
            </summary>
        </member>
        <member name="T:KJFramework.Engin.IWorkerEngin`2">
            <summary>
                工作者工作引擎，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Engin.IWorkerEngin`2.AddScheduler(KJFramework.Engin.Scheduler.IWorkerScheduler{`0,`1})">
            <summary>
                添加调度者
            </summary>
            <param name="scheduler">新的调度者</param>
            <returns>返回加入的状态</returns>
        </member>
        <member name="M:KJFramework.Engin.IWorkerEngin`2.AddWorker(`0)">
            <summary>
                添加工作者
            </summary>
            <param name="worker">新的工作者</param>
            <returns>返回添加的状态</returns>
        </member>
        <member name="P:KJFramework.Engin.IWorkerEngin`2.SchedulerCount">
            <summary>
                最多支持的调度者数量
                    * 默认为 5
            </summary>
        </member>
        <member name="T:KJFramework.Security.Policy.PolicyInfomation">
            <summary>
                策略信息
            </summary>
        </member>
        <member name="T:KJFramework.Security.Policy.IPolicyInfomation">
            <summary>
                策略信息接口，提供了相关的基本属性。
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.IPolicyInfomation.Name">
            <summary>
                获取或设置名称
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.IPolicyInfomation.Version">
            <summary>
                获取或设略版本
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.IPolicyInfomation.Description">
            <summary>
                获取或设置描述信息
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.PolicyInfomation.Name">
            <summary>
                获取或设置名称
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.PolicyInfomation.Version">
            <summary>
                获取或设略版本
            </summary>
        </member>
        <member name="P:KJFramework.Security.Policy.PolicyInfomation.Description">
            <summary>
                获取或设置描述信息
            </summary>
        </member>
        <member name="T:KJFramework.Observers.IObserver`1">
            <summary>
                观察者元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">观察类型</typeparam>
        </member>
        <member name="M:KJFramework.Observers.IObserver`1.Notify(`0)">
            <summary>
                通知
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="E:KJFramework.Observers.IObserver`1.Notifyed">
            <summary>
                通知事件
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.LightMultiArgEventArgs`1">
            <summary>
                KJFramework提供的轻量级多参数事件，使用该事件可以省去重新编写特定事件类的事件。
            </summary>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="T:KJFramework.EventArgs.CanDisposeEventArgs">
            <summary>
                支持注销的事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.CanDisposeEventArgs.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.EventArgs.LightMultiArgEventArgs`1.#ctor(`0[])">
            <summary>
                KJFramework提供的轻量级多参数事件，使用该事件可以省去重新编写特定事件类的事件。
            </summary>
            <param name="target">参数</param>
        </member>
        <member name="P:KJFramework.EventArgs.LightMultiArgEventArgs`1.Target">
            <summary>
                获取目标
            </summary>
        </member>
        <member name="T:KJFramework.Collections.ConcurrentQueueEventProcessor`1">
            <summary>
                并发队列事件处理器，提供了相关的基本操作。
            </summary>
            <typeparam name="T">内部存储的值</typeparam>
        </member>
        <member name="T:KJFramework.Collections.ConcurrentEventProcessor`1">
            <summary>
                并发事件处理器，提供了相关的基本操作。
            </summary>
            <typeparam name="T">内部存储的值</typeparam>
        </member>
        <member name="T:KJFramework.Collections.IConcurrentEventProcessor`1">
            <summary>
                并发事件处理器元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="T">内部存储的值</typeparam>
        </member>
        <member name="M:KJFramework.Collections.IConcurrentEventProcessor`1.Add(`0)">
            <summary>
                添加一个对象到内部集合
            </summary>
            <param name="obj">要添加的对象</param>
        </member>
        <member name="M:KJFramework.Collections.IConcurrentEventProcessor`1.Start">
            <summary>
                开始处理
            </summary>
        </member>
        <member name="M:KJFramework.Collections.IConcurrentEventProcessor`1.Stop">
            <summary>
                关闭当前处理器, 并释放所有资源
            </summary>
        </member>
        <member name="P:KJFramework.Collections.IConcurrentEventProcessor`1.MaxThread">
            <summary>
                获取最大线程
            </summary>
        </member>
        <member name="P:KJFramework.Collections.IConcurrentEventProcessor`1.Action">
            <summary>
                获取内部执行逻辑的代码
            </summary>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.#ctor(System.Int32)">
            <summary>
                并发时间处理器，提供了相关的基本操作。
            </summary>
            <param name="maxThread">最大线程数</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.ThreadProc">
            <summary>
                内部线程轮询函数
            </summary>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.IsEmpty">
            <summary>
                检测当前容器是否为空
            </summary>
            <returns>返回是否为空的一个标示</returns>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.Add(`0)">
            <summary>
                添加一个对象到内部集合
            </summary>
            <param name="obj">要添加的对象</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.Pickup">
            <summary>
                提取一个集合内拥有的元素
            </summary>
            <returns>返回指定元素</returns>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.Start">
            <summary>
                开始处理
            </summary>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentEventProcessor`1.Stop">
            <summary>
                关闭当前处理器, 并释放所有资源
            </summary>
        </member>
        <member name="P:KJFramework.Collections.ConcurrentEventProcessor`1.MaxThread">
            <summary>
                获取最大线程
            </summary>
        </member>
        <member name="P:KJFramework.Collections.ConcurrentEventProcessor`1.Action">
            <summary>
                获取内部执行逻辑的代码
            </summary>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentQueueEventProcessor`1.#ctor(System.Int32)">
            <summary>
                并发队列事件处理器，提供了相关的基本操作
            </summary>
            <param name="maxThread">最大线程数</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentQueueEventProcessor`1.IsEmpty">
            <summary>
                检测当前容器是否为空
            </summary>
            <returns>返回是否为空的一个标示</returns>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentQueueEventProcessor`1.Add(`0)">
            <summary>
                添加一个对象到内部集合
            </summary>
            <param name="obj">要添加的对象</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentQueueEventProcessor`1.Pickup">
            <summary>
                提取一个集合内拥有的元素
            </summary>
            <returns>返回指定元素</returns>
        </member>
        <member name="T:KJFramework.Attribute.PerformanceCounterAttribute">
            <summary>
                性能计数器标签，用于标记当前类所需要的性能计数器
            </summary>
        </member>
        <member name="M:KJFramework.Attribute.PerformanceCounterAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
                性能计数器标签，用于标记当前类所需要的性能计数器
                <para>* 使用此构造将会创建一个系统内置类型的性能计数器</para>
            </summary>
            <param name="id">性能计数器编号，可通过此编号来获取相应的性能计数器</param>
            <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
            <param name="counterName">性能计数器的名称。</param>
        </member>
        <member name="M:KJFramework.Attribute.PerformanceCounterAttribute.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
                性能计数器标签，用于标记当前类所需要的性能计数器
                <para>* 使用此构造将会创建一个系统内置类型的性能计数器</para>
            </summary>
            <param name="id">性能计数器编号，可通过此编号来获取相应的性能计数器</param>
            <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
            <param name="counterName">性能计数器的名称。</param>
            <param name="readOnly">若要以只读模式访问计数器，则为 true；若要以读/写模式访问计数器，则为 false。</param>
        </member>
        <member name="M:KJFramework.Attribute.PerformanceCounterAttribute.#ctor(System.Int32,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
                性能计数器标签，用于标记当前类所需要的性能计数器
                <para>* 使用此构造将会创建一个自定义的性能计数器</para>
            </summary>
            <param name="id">性能计数器编号，可通过此编号来获取相应的性能计数器</param>
            <param name="counterName">性能计数器名称</param>
            <param name="counterType">性能计数器类型</param>
        </member>
        <member name="M:KJFramework.Attribute.PerformanceCounterAttribute.#ctor(System.Int32,System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
                性能计数器标签，用于标记当前类所需要的性能计数器
                <para>* 使用此构造将会创建一个自定义的性能计数器</para>
            </summary>
            <param name="id">性能计数器编号，可通过此编号来获取相应的性能计数器</param>
            <param name="counterName">性能计数器名称</param>
            <param name="counterHelp">性能计数器帮助信息</param>
            <param name="counterType">性能计数器类型</param>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.CategoryName">
            <summary>
                获取或设置分组名称
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.CounterName">
            <summary>
                获取或设置性能计数器名称
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.ReadOnly">
            <summary>
                获取或设置一个值， 该值标示了当前性能计数器是否为只读
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.IsSystemCounter">
            <summary>
                获取一个值, 该值表示了当前的计数器标签是否代表了一个系统类型的性能计数器 
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.CounterType">
            <summary>
                获取自定义的性能计数器类别
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.PerformanceCounterAttribute.CounterHelp">
            <summary>
                获取自定义的性能计数器帮助信息
            </summary>
        </member>
        <member name="T:KJFramework.Timer.Timer">
            <summary>
                提供了支持2种超时策略的超时器。
            </summary>
        </member>
        <member name="P:KJFramework.Timer.Timer.TryCount">
            <summary>
                尝试总数
            </summary>
        </member>
        <member name="P:KJFramework.Timer.Timer.TryIndex">
            <summary>
                当前尝试次数
            </summary>
        </member>
        <member name="E:KJFramework.Timer.Timer.Timeout">
            <summary>
                 超时器超时事件
            </summary>
            <remarks>
                当已经到达所指定的尝试次数，仍然未满足指定条件，则会触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.Timer.LightTimer">
            <summary>
                轻量级超时器，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Timer.LightTimer.#ctor(System.Int32,System.Int32)">
            <summary>
                轻量级超时器，提供了相关的基本操作
            </summary>
            <param name="interval">触发间隔</param>
            <param name="timeoutCount">超时次数</param>
        </member>
        <member name="M:KJFramework.Timer.LightTimer.NewTimer(System.Int32,System.Int32)">
            <summary>
                创建一个新的轻量级超时器
            </summary>
            <param name="interval">触发间隔</param>
            <param name="timeoutCount">超时次数</param>
        </member>
        <member name="M:KJFramework.Timer.LightTimer.Start(System.Action,System.Action)">
            <summary>
                开始
            </summary>
            <param name="intervalAction">触发动作</param>
            <param name="timeoutAction">超时动作</param>
        </member>
        <member name="M:KJFramework.Timer.LightTimer.Stop">
            <summary>
                停止
            </summary>
        </member>
        <member name="P:KJFramework.Timer.LightTimer.Interval">
            <summary>
                获取或设置间隔时间
                    * 时间：毫秒
            </summary>
        </member>
        <member name="P:KJFramework.Timer.LightTimer.TimeoutCount">
            <summary>
                获取或设置超时次数
                    * 时间：毫秒
            </summary>
        </member>
        <member name="P:KJFramework.Timer.LightTimer.IntervalAction">
            <summary>
                获取或设置时间间隔动作
            </summary>
        </member>
        <member name="P:KJFramework.Timer.LightTimer.TimeoutAction">
            <summary>
                获取或设置到达指定超时次数动作
            </summary>
        </member>
        <member name="T:KJFramework.Timer.CodeTimer">
            <summary>
              代码计时器，提供了一种计算代码执行时间的方式
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.SerializableDebugLogList">
            <summary>
                可序列化的错误记录集合，用于序列化后保存成记录文件。
            </summary>
        </member>
        <member name="F:KJFramework.Logger.LogObject.SerializableDebugLogList.Logs">
            <summary>
                错误记录集合
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.ITextLog">
            <summary>
                日志文本记录项源接口，提供了相关的属性结构。
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.IDebugLog">
            <summary>
                错误记录对象元接口, 提供了基本的属性结构
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IDebugLog.StrackMessage">
            <summary>
                堆栈消息
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IDebugLog.DebugMessage">
            <summary>
                调试消息
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IDebugLog.Location">
            <summary>
                异常位置
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.IDebugLog.Grade">
            <summary>
                异常等级
            </summary>
        </member>
        <member name="M:KJFramework.Logger.LogObject.ITextLog.GetLogContent">
            <summary>
                获取当前要写入日志的内容。
                    * [注] 这里可以直接返回带有格式的日志内容。
            </summary>
            <returns>返回日志的内容</returns>
        </member>
        <member name="M:KJFramework.Logger.LogObject.ITextLog.GetHead">
            <summary>
                获取日志头部信息
            </summary>
            <returns>返回头部信息</returns>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ITextLog.IsHead">
            <summary>
                获取或设置当前记录项是否当作头部记录项。
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.ITextLog.Formatter">
            <summary>
                获取或设置日志记录项格式
            </summary>
        </member>
        <member name="T:KJFramework.Logger.IMultiItemLogger`1">
            <summary>
                多条数据记录器元接口, 提供了对于多条记录同时存在的相关操作支持。
            </summary>
        </member>
        <member name="M:KJFramework.Logger.IMultiItemLogger`1.GetLog">
            <summary>
                获取当前所有的记录项
            </summary>
            <returns>
                返回null, 表示不存在记录项
            </returns>
        </member>
        <member name="M:KJFramework.Logger.IMultiItemLogger`1.GetLog(System.DateTime,System.DateTime)">
            <summary>
                获取在指定时间范围内的异常记录
            </summary>
            <param name="startTime" type="System.DateTime">
                <para>
                    起始时间
                </para>
            </param>
            <param name="endTime" type="System.DateTime">
                <para>
                    结束时间
                </para>
            </param>
            <returns>
                返回null, 表示不存在指定时间范围内的异常。
            </returns>
        </member>
        <member name="T:KJFramework.Exception.LogFilePathUnCorrectException">
            <summary>
                日志文件路径格式不正确异常
            </summary>
        </member>
        <member name="M:KJFramework.Exception.LogFilePathUnCorrectException.#ctor">
            <summary>
                日志文件未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.PluginConfigChangedEventArgs">
            <summary>
                插件配置文件更改事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.PluginConfigChangedEventArgs.#ctor">
            <summary>
                插件配置文件更改事件
            </summary>
        </member>
        <member name="T:KJFramework.Encrypt.EncrptyRijndaelHelper">
            <summary>
                Rijndael对称加密算法类
            </summary>
        </member>
        <member name="M:KJFramework.Encrypt.EncrptyRijndaelHelper.#cctor">
            <summary>
            对称加密类的构造函数
            </summary>
        </member>
        <member name="M:KJFramework.Encrypt.EncrptyRijndaelHelper.GetLegalKey">
            <summary>
            获得密钥
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncrptyRijndaelHelper.GetLegalIv">
            <summary>
            获得初始向量IV
            </summary>
            <returns>初试向量IV</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncrptyRijndaelHelper.Encrypto(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="source">待加密的串</param>
            <returns>经过加密的串</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncrptyRijndaelHelper.Decrypto(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="source">待解密的串</param>
            <returns>经过解密的串</returns>
        </member>
        <member name="T:KJFramework.Security.IToken">
            <summary>
                令牌元接口，提供了相关的属性结构。
            </summary>
        </member>
        <member name="P:KJFramework.Security.IToken.Content">
            <summary>
                获取令牌内容
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.IFunctionInfomationCollector">
            <summary>
                功能信息收集器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.IFunctionInfomationCollector.Notify``1(System.Object[])">
            <summary>
                通知
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="args">参数</param>
            <returns>返回通知的结果</returns>
        </member>
        <member name="T:KJFramework.Core.Native.Native">
            <summary>
                KJFramework底层调用核心
                    * 更多的是对于系统底层API的封装。
            </summary>
            <summary>
                KJFramework底层调用核心
                    * 更多的是对于系统底层API的封装。
            </summary>
            <summary>
                KJFramework底层调用核心
                    * 更多的是对于系统底层API的封装。
            </summary>
        </member>
        <member name="T:KJFramework.Core.Native.Native.Win32API">
            <summary>
                提供了Windows中对于部分API的引用
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.SetWindowsHookEx(System.Int32,KJFramework.Core.Native.Native.Win32API.HookPro,System.IntPtr,System.Int32)">
            <summary>
                安装钩子原型
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                卸载钩子原型
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                回调钩子原型
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.CopyMemory(KJFramework.Core.Native.Native.KBDLLHOOKSTRUCT@,System.IntPtr,System.Int32)">
            <summary>
                复制内存原型
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.OpenThread(System.UInt32,System.Boolean,System.UInt32)">
            <summary>
               打开一个进程
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.TerminateThread(System.IntPtr,System.UInt32)">
            <summary>
               终止进程
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.GetDesktopWindow">
            <summary>
                获取桌面句柄
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.GetWindowDC(System.IntPtr)">
            <summary>
                通过桌面句柄得到桌面DC句柄
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.ReleaseDC(System.Int32,System.Int32)">
            <summary>
                释放DC
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.SetThreadAffinityMask(System.IntPtr,System.UIntPtr)">
            <summary>
              SetThreadAffinityMask 指定hThread 运行在 核心 dwThreadAffinityMask
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Win32API.GetCurrentThread">
            <summary>
              得到当前线程的handler  
            </summary>
        </member>
        <member name="T:KJFramework.Core.Native.Native.Network">
            <summary>
                封装了对于系统底层通讯的API调用。
            </summary>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Network.GetTcpOpenPort">
            <summary>
                返回当前所有处于监听状态的TCP端口列表
            </summary>
            <returns>返回一个数组集合</returns>
        </member>
        <member name="M:KJFramework.Core.Native.Native.Network.GetUdpOpenPort">
            <summary>
                返回当前所有处于监听状态的UDP端口列表
            </summary>
            <returns>返回一个数组集合</returns>
        </member>
        <member name="T:KJFramework.Datas.IDatabase">
            <summary>
                数据库对象元接口，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.GetTable(System.String)">
            <summary>
                获取数据库中指定表的数据集
            </summary>
            <param name="tableName">数据库表名称</param>
            <returns>返回表中的数据集</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.GetTables(System.String[])">
            <summary>
                获取多个数据表的数据集
            </summary>
            <param name="tables">数据库表名称集合</param>
            <returns>返回多个数据集</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.ExecuteNonQuery(System.String,System.String)">
            <summary>
                执行一个操作并返回受影响的行数
            </summary>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.ExecuteScalar``1(System.String,System.String)">
            <summary>
                执行一个操作并返回结果的首行首列
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回结果的首行首列</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.ExecuteReader(System.String,System.String)">
            <summary>
                执行一个操作并返回结果读取器
            </summary>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回读取器</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.SpExecuteReader(System.String,System.String[],System.Object[])">
            <summary>
                执行一个存储过程
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="parameters">参数集合</param>
            <param name="values">值集合</param>
            <returns>返回执行后的结果</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.SpExecuteNonQuery(System.String,System.String[],System.Object[])">
            <summary>
                执行一个存储过程
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="parameters">参数集合</param>
            <param name="values">值集合</param>
            <returns>返回执行后的结果</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.Execute(System.String)">
            <summary>
                执行一条指定的SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.Open">
            <summary>
                打开数据库
            </summary>
        </member>
        <member name="M:KJFramework.Datas.IDatabase.Close">
            <summary>
                关闭数据库
            </summary>
        </member>
        <member name="P:KJFramework.Datas.IDatabase.CommandTimeout">
            <summary>
                获取或设置命令超时时间
            </summary>
        </member>
        <member name="T:KJFramework.Datas.ConnectionObject`1">
            <summary>
                连接对象
            </summary>
            <typeparam name="T">内部连接对象类型</typeparam>
        </member>
        <member name="M:KJFramework.Datas.ConnectionObject`1.#ctor(System.TimeSpan)">
            <summary>
                连接对象
            </summary>
            <param name="timeSpan">存活时间</param>
        </member>
        <member name="P:KJFramework.Datas.ConnectionObject`1.LiveTime">
            <summary>
                获取生存时间
            </summary>
        </member>
        <member name="P:KJFramework.Datas.ConnectionObject`1.Connection">
            <summary>
                获取或设置连接对象
            </summary>
        </member>
        <member name="T:KJFramework.Configurations.Objects.FieldWithName">
            <summary>
                字段类型与名称临时结构体
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Objects.FieldWithName.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Configurations.Objects.FieldWithName.FieldInfo">
            <summary>
                获取或设置字段类型
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Objects.FieldWithName.Name">
            <summary>
                获取或设置字段名称
            </summary>
        </member>
        <member name="T:KJFramework.Logger.BasicDebugLogger">
            <summary>
                基础的应用程序错误记录器
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.#ctor">
            <summary>
                基础的应用程序错误记录器
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.#ctor(System.String)">
            <summary>
                基础的应用程序错误记录器
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件路径
                       * 如果给定的日志文件不存在，则会在该位置上新建日志文件。
                       * 如果给定的日志文件存在，则会尝试读取该日志文件。
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Log(KJFramework.Logger.LogObject.IDebugLog)">
            <summary>
                将指定记录类型添加到记录集合中
            </summary>
            <param name="log" type="T">
                <para>
                    记录
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Log(System.Exception)">
            <summary>
                使用默认的警告等级来记录错误。
            </summary>
            <param name="e" type="System.Exception">
                <para>
                    异常对象
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Log(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                使用一个指定的等级来记录错误。
            </summary>
            <param name="e" type="System.Exception">
                <para>
                    异常对象
                </para>
            </param>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    错误等级
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.GetLog(KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                获取具有指定异常等级异常记录集合
            </summary>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    异常等级
                </para>
            </param>
            <returns>
                返回null, 表示不存在该等级的异常。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.GetLog(System.DateTime,System.DateTime,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                获取在指定时间范围内并且具有指定异常等级的异常记录
            </summary>
            <param name="startTime" type="System.DateTime">
                <para>
                    起始时间
                </para>
            </param>
            <param name="endTime" type="System.DateTime">
                <para>
                    结束时间
                </para>
            </param>
            <param name="grade" type="KJFramework.Basic.Enum.DebugGrade">
                <para>
                    异常等级
                </para>
            </param>
            <returns>
                返回null, 表示不存在指定时间范围内的异常。
            </returns>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Log(System.String,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                使用指定的异常等级，将指定文字添加到记录集合中
                    * 记录时会将当前时间自动追加到记录信息头部。
            </summary>
            <param name="text">要记录的文字</param>
            <param name="grade">异常等级</param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Initialize(System.String)">
            <summary>
                使用一个日志文件来初始化日志记录器, 如果该文件不存在，则自动创建。
            </summary>
            <param name="logFilePath" type="string">
                <para>
                    日志文件全路径
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.Save">
            <summary>
                保存
            </summary>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.GetLog">
            <summary>
                获取所有异常记录
            </summary>
            <returns>返回异常记录列表</returns>
        </member>
        <member name="M:KJFramework.Logger.BasicDebugLogger.GetLog(System.DateTime,System.DateTime)">
            <summary>
                返回在开始日期到截至日期中存在的异常记录
            </summary>
            <param name="startTime">开始日期</param>
            <param name="endTime">截止日期</param>
            <returns>返回异常记录列表</returns>
        </member>
        <member name="P:KJFramework.Logger.BasicDebugLogger.LogFilePath">
            <summary>
                获取或设置记录文件路径
            </summary>
        </member>
        <member name="P:KJFramework.Logger.BasicDebugLogger.Enable">
            <summary>
                获取或设置记录器的可用状态
            </summary>
        </member>
        <member name="T:KJFramework.Encrypt.EncryptTEAHelper">
            <summary>
                提供了关于TEA加密算法的相关操作
            </summary>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.Encrypt(System.Byte[])">
            <summary>
                按照TEA加密算法，加密字节数组
            </summary>
            <param name="data" type="byte[]">
                <para>
                    要加密的字节数组
                </para>
            </param>
            <returns>
                返回加密后的字节数组
            </returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.Decrypt(System.Byte[])">
            <summary>
                按照TEA加密算法，解密字节数组
            </summary>
            <param name="data" type="byte[]">
                <para>
                    要解密的字节数组
                </para>
            </param>
            <returns>
                返回解密后的字节数组
            </returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.EncryptToString(System.String)">
            <summary>
                加密指定的字符串
            </summary>
            <param name="data">要加密的字符串</param>
            <returns>返回加密后的结果</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.DecryptFromString(System.String)">
            <summary>
                解密指定字符串
            </summary>
            <param name="data">要解密的字符串</param>
            <returns>返回解密后的结果</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.Encrypt(System.UInt32[],System.UInt32[])">
            <summary>
                将2个32位无符号整数集合混合加密
            </summary>
            <param name="v">第一个集合</param>
            <param name="k">第二个集合</param>
            <returns>返回加密后的结果</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptTEAHelper.Decrypt(System.UInt32[],System.UInt32[])">
            <summary>
                将2个32位无符号整数集合混合解密
            </summary>
            <param name="v">第一个集合</param>
            <param name="k">第二个集合</param>
            <returns>返回解密后的结果</returns>
        </member>
        <member name="P:KJFramework.Encrypt.EncryptTEAHelper.key">
            <summary>
                密钥
            </summary>
            <remarks>
                如果当前不指定, 则使用默认密钥
            </remarks>
        </member>
        <member name="T:KJFramework.Helpers.TypeHelper">
            <summary>
                类型帮助器，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetFields``1(System.Type)">
            <summary>
                获取一个类型中所有带有指定属性标记的字段集合
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="type">类型</param>
            <returns>返回相应的字段集合</returns>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetFields(System.Type)">
            <summary>
                获取一个类型中所有字段的相关信息
            </summary>
            <param name="type">类型</param>
            <returns>返回所有的字段集合</returns>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetProperties(System.Type)">
            <summary>
                获取一个类型中所有字段的相关信息
            </summary>
            <param name="type">类型</param>
            <returns>返回所有的字段集合</returns>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.SetValue(System.Object,System.Reflection.FieldInfo,System.Object)">
            <summary>
                将一个指定的对象赋值到一个字段类型中
            </summary>
            <param name="org">被复制的原有对象</param>
            <param name="fieldInfo">字段类型</param>
            <param name="value">赋值对象</param>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetMethods``1(``0)">
            <summary>
                从一个指定的类型中获取该类型的所有方法信息
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="target">要获取的对象</param>
            <returns>返回获取到的方法信息集合</returns>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetMethods``1(``0,System.String)">
            <summary>
                从一个指定的类型中获取该类型的指定方法信息
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="target">要获取的对象</param>
            <param name="name">指定方法的名称</param>
            <returns>返回获取到的方法信息集合</returns>
        </member>
        <member name="M:KJFramework.Helpers.TypeHelper.GetParameteres(System.Reflection.MethodInfo)">
            <summary>
                获取一个方法中的所有参数信息
            </summary>
            <param name="methodInfo">获取的对象</param>
            <returns>返回参数信息集合</returns>
        </member>
        <member name="T:KJFramework.Diagnostics.Collectors.ProcessInfomationCollector">
            <summary>
                进程信息收集器， 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.ProcessInfomationCollector.#ctor(KJFramework.Diagnostics.IInfomationReviewer)">
            <summary>
                进程信息收集器， 提供了相关的基本操作
            </summary>
            <param name="reviewere">审查器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.ProcessInfomationCollector.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.ProcessInfomationCollector.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="T:KJFramework.Extend.PerformanceCounterExtend">
            <summary>
                性能计数器获取方式的扩展类
            </summary>
        </member>
        <member name="M:KJFramework.Extend.PerformanceCounterExtend.GetPerformanceCounter(KJFramework.PerformanceProvider.IPerformanceCounterOwner,System.Int32)">
            <summary>
                获取具有指定编号的性能计数器
            </summary>
            <param name="id">性能计数器编号</param>
            <returns>返回性能计数器</returns>
        </member>
        <member name="T:KJFramework.Configurations.CustomerSection`1">
            <summary>
                第三方自定义配置节父类，提供了相关的基本操作。
            </summary>
            <typeparam name="T">配置节类型</typeparam>
        </member>
        <member name="T:KJFramework.Configurations.ICustomerSection">
            <summary>
                第三方自定义配置节元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.CustomerSection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Configurations.CustomerSection`1.Current">
            <summary>
                获取当前配置节
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.BasicTextLogFormat">
            <summary>
                基础的日志记录项格式，提供了所有分隔符为“空”的分割格式。
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLogFormat.Up">
            <summary>
               获取上分割符
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLogFormat.Down">
            <summary>
               获取上分割符
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLogFormat.LeftSplitChar">
            <summary>
                获取左侧分隔符
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.BasicTextLog">
            <summary>
                基础的文字异常日志项，提供了相关的基本操作。
                       * 此日志项输出格式已经间接的支持了“日志查看器”。
            </summary>
        </member>
        <member name="M:KJFramework.Logger.LogObject.BasicTextLog.#ctor(System.Exception,KJFramework.Basic.Enum.DebugGrade)">
            <summary>
                基础的文字异常日志项，提供了相关的基本操作。
            </summary>
            <param name="exception">异常对象</param>
            <param name="debugGrade">异常等级</param>
        </member>
        <member name="M:KJFramework.Logger.LogObject.BasicTextLog.#ctor(System.Exception,KJFramework.Basic.Enum.DebugGrade,KJFramework.Logger.LogObject.ITextLogFormatter)">
            <summary>
                基础的文字异常日志项，提供了相关的基本操作。
            </summary>
            <param name="exception">异常对象</param>
            <param name="debugGrade">异常等级</param>
            <param name="format">记录项格式</param>
        </member>
        <member name="M:KJFramework.Logger.LogObject.BasicTextLog.GetLogContent">
            <summary>
                获取当前要写入日志的内容。
                    * [注] 这里可以直接返回带有格式的日志内容。
            </summary>
            <returns>返回日志的内容</returns>
        </member>
        <member name="M:KJFramework.Logger.LogObject.BasicTextLog.GetHead">
            <summary>
                获取日志头部信息
            </summary>
            <returns>返回头部信息</returns>
        </member>
        <member name="M:KJFramework.Logger.LogObject.BasicTextLog.GetGradeText">
            <summary>
                根据等级枚举值返回相应的等级描述文字
            </summary>
            <returns>返回等级描述文字</returns>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.IsHead">
            <summary>
                获取或设置当前记录项是否当作头部记录项。
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Formatter">
            <summary>
                获取或设置日志记录项格式
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.StrackMessage">
            <summary>
                堆栈消息
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.DebugMessage">
            <summary>
                调试消息
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Location">
            <summary>
                异常位置
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Grade">
            <summary>
                异常等级
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Time">
            <summary>
                获取或设置记录具体日期事件
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Name">
            <summary>
                获取或设置记录名称
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.User">
            <summary>
                获取或设置记录人
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.LogType">
            <summary>
                获取该记录对象的类型
            </summary>
        </member>
        <member name="P:KJFramework.Logger.LogObject.BasicTextLog.Tag">
            <summary>
                获取或设置记录辅助数据
            </summary>
        </member>
        <member name="T:KJFramework.Statistics.DBStatistic">
            <summary>
                数据库统计器
            </summary>
        </member>
        <member name="T:KJFramework.Statistics.Statistic">
            <summary>
                统计器抽象类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Statistics.Statistic.#ctor">
            <summary>
                统计器抽象类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Statistics.Statistic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Statistics.Statistic.Initialize``1(``0)">
            <summary>
                初始化
            </summary>
            <param name="element">统计类型</param>
            <typeparam name="T">统计类型</typeparam>
        </member>
        <member name="M:KJFramework.Statistics.Statistic.Close">
            <summary>
                关闭统计
            </summary>
        </member>
        <member name="P:KJFramework.Statistics.Statistic.StatisticType">
            <summary>
                获取统计类型
            </summary>
        </member>
        <member name="P:KJFramework.Statistics.Statistic.IsEnable">
            <summary>
                获取或设置可用标示
            </summary>
        </member>
        <member name="M:KJFramework.Statistics.DBStatistic.Initialize``1(``0)">
            <summary>
                初始化
            </summary>
            <param name="element">统计类型</param>
            <typeparam name="T">统计类型</typeparam>
        </member>
        <member name="M:KJFramework.Statistics.DBStatistic.Close">
            <summary>
                关闭统计
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.LightSingleArgEventArgs`1">
            <summary>
                KJFramework提供的轻量级单一参数事件，使用该事件可以省去重新编写特定事件类的事件。
            </summary>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:KJFramework.EventArgs.LightSingleArgEventArgs`1.#ctor(`0)">
            <summary>
                KJFramework提供的轻量级单一参数事件，使用该事件可以省去重新编写特定事件类的事件。
            </summary>
            <param name="target">参数</param>
        </member>
        <member name="P:KJFramework.EventArgs.LightSingleArgEventArgs`1.Target">
            <summary>
                获取目标
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.Collectors.FunctionInfomationCollector">
            <summary>
                功能信息收集器抽象类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.FunctionInfomationCollector.#ctor(System.Type,KJFramework.Diagnostics.IInfomationReviewer)">
            <summary>
                功能信息收集器抽象类，提供了相关的基本操作。
            </summary>
            <param name="collectType">收集对象类型</param>
            <param name="reviewere">信息评审器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.FunctionInfomationCollector.Notify``1(System.Object[])">
            <summary>
                通知
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="args">参数</param>
            <returns>返回通知的结果</returns>
        </member>
        <member name="T:KJFramework.Configurations.Objects.InnerXmlNodeInfomation">
            <summary>
                内部的XML节点信息临时结构
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Objects.InnerXmlNodeInfomation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Configurations.Objects.InnerXmlNodeInfomation.Name">
            <summary>
                获取或设置XML节点名称
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Objects.InnerXmlNodeInfomation.OutputXml">
            <summary>
                获取或设置该节点的XML元数据
            </summary>
        </member>
        <member name="T:KJFramework.Configurations.Objects.FieldWithAttribute`1">
            <summary>
                获取字段的标记属性时的临时数据结构
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Objects.FieldWithAttribute`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Configurations.Objects.FieldWithAttribute`1.FieldInfo">
            <summary>
                获取或设置字段信息
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Objects.FieldWithAttribute`1.Attribute">
            <summary>
                获取或设置字段标记属性
            </summary>
        </member>
        <member name="T:KJFramework.Collections.ConcurrentBagEventProcessor`1">
            <summary>
                并发事件处理器，提供了相关的基本操作。
            </summary>
            <typeparam name="T">内部存储的值</typeparam>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentBagEventProcessor`1.#ctor(System.Int32)">
            <summary>
                并发事件处理器，提供了相关的基本操作
            </summary>
            <param name="maxThread">最大线程数</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentBagEventProcessor`1.IsEmpty">
            <summary>
                检测当前容器是否为空
            </summary>
            <returns>返回是否为空的一个标示</returns>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentBagEventProcessor`1.Add(`0)">
            <summary>
                添加一个对象到内部集合
            </summary>
            <param name="obj">要添加的对象</param>
        </member>
        <member name="M:KJFramework.Collections.ConcurrentBagEventProcessor`1.Pickup">
            <summary>
                提取一个集合内拥有的元素
            </summary>
            <returns>返回指定元素</returns>
        </member>
        <member name="T:KJFramework.Attribute.InjectionAttribute">
            <summary>
                允许注入标签, 为今后的自动加载提供了必要的属性。
            </summary>
        </member>
        <member name="M:KJFramework.Attribute.InjectionAttribute.#ctor(System.String)">
            <summary>
                允许注入标签, 为今后的自动加载提供了必要的属性。
            </summary>
            <param name="name">匹配名称</param>
        </member>
        <member name="P:KJFramework.Attribute.InjectionAttribute.Name">
            <summary>
                获取或设置注入的匹配名称
            </summary>
        </member>
        <member name="T:KJFramework.Timer.CallBackTimeout">
            <summary>
                提供了所需超时事件的 KFramework.Timer 包装类
            </summary>
        </member>
        <member name="T:KJFramework.Timer.ITimeout">
            <summary>
                超时计算元接口, 提供了相应的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Timer.ITimeout.Start">
            <summary>
                开始
            </summary>
        </member>
        <member name="M:KJFramework.Timer.ITimeout.Stop">
            <summary>
                停止
            </summary>
        </member>
        <member name="P:KJFramework.Timer.ITimeout.Enable">
            <summary>
               获取当前超时器的可用状态。
            </summary>
        </member>
        <member name="F:KJFramework.Timer.CallBackTimeout._runFlag">
            <summary>
                运行标志位
            </summary>
        </member>
        <member name="F:KJFramework.Timer.CallBackTimeout._timer">
            <summary>
                内部包含的TO_Timer对象
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                提供了公共操作的超时计算与处理
            </summary>
            <param name="key" type="string">
                <para>
                    超时器的唯一标示
                </para>
            </param>
            <param name="interval" type="int">
                <para>
                    超时器触发间隔 [单位: 毫秒]
                </para>
            </param>
            <param name="tryCount" type="int">
                <para>
                    超时器总共重试次数,如果为-1则代表永久尝试
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.Run">
            <summary>
                内部超时器运行保证。
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.CurrentTimer">
            <summary>
                得到当前超时计时器事件类的Timer对象
            </summary>
            <returns>
                返回Timer对象
            </returns>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.OnOnTick(System.EventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.OnOnTryFull(KJFramework.Timer.CallBackTimeout.OnTryFullEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.Start">
            <summary>
                开始
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.Stop">
            <summary>
                停止
            </summary>
        </member>
        <member name="P:KJFramework.Timer.CallBackTimeout.Timerstarttype">
            <summary>
                超时器运行类型
                默认类型为： 立即启动
            </summary>
        </member>
        <member name="P:KJFramework.Timer.CallBackTimeout.Key">
            <summary>
                获取或设置唯一标示
            </summary>
        </member>
        <member name="E:KJFramework.Timer.CallBackTimeout.OnTick">
            <summary>
                TODO: Describe the purpose of this event here
            </summary>
        </member>
        <member name="E:KJFramework.Timer.CallBackTimeout.OnTryFull">
            <summary>
                TODO: Describe the purpose of this event here
            </summary>
        </member>
        <member name="P:KJFramework.Timer.CallBackTimeout.Enable">
            <summary>
               获取当前超时器的可用状态。
            </summary>
        </member>
        <member name="T:KJFramework.Timer.CallBackTimeout.PublicDelegate">
            <summary>
                超时委托
            </summary>
        </member>
        <member name="T:KJFramework.Timer.CallBackTimeout.OnTryFullEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:KJFramework.Timer.CallBackTimeout.OnTryFullEventArgs.#ctor(KJFramework.Timer.CallBackTimeout)">
            <summary>
                Use this constructor to initialize the event arguments
                object with the custom event fields
            </summary>
        </member>
        <member name="F:KJFramework.Timer.CallBackTimeout.OnTryFullEventArgs.TimerPack">
            <summary>
                TODO: Describe the purpose of this event argument here
            </summary>
        </member>
        <member name="T:KJFramework.Plugin.PluginInfomation">
            <summary>
                插件信息基础结构体
            </summary>
        </member>
        <member name="F:KJFramework.Plugin.PluginInfomation.ServiceName">
            <summary>
                服务名称
            </summary>
        </member>
        <member name="F:KJFramework.Plugin.PluginInfomation.CatalogName">
            <summary>
                插件分类名称
            </summary>
        </member>
        <member name="F:KJFramework.Plugin.PluginInfomation.Description">
            <summary>
                插件描述
            </summary>
        </member>
        <member name="F:KJFramework.Plugin.PluginInfomation.Version">
            <summary>
                插件版本
            </summary>
        </member>
        <member name="T:KJFramework.Logger.LogObject.BasicDebugLog">
            <summary>
                基础的应用程序重复记录对象
            </summary>
        </member>
        <member name="T:KJFramework.Exception.XmlTextWriterNotFoundException">
            <summary>
                内置XML写入对象未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Exception.XmlTextWriterNotFoundException.#ctor">
            <summary>
                内置XML写入对象未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.Exception.SaveLogFileException">
            <summary>
                保存日志文件失败异常
            </summary>
        </member>
        <member name="M:KJFramework.Exception.SaveLogFileException.#ctor">
            <summary>
                保存日志文件失败异常
            </summary>
        </member>
        <member name="T:KJFramework.Exception.LogObjectHasNullException">
            <summary>
                给定的记录对象为空异常
            </summary>
        </member>
        <member name="M:KJFramework.Exception.LogObjectHasNullException.#ctor">
            <summary>
                给定的记录对象为空异常
            </summary>
        </member>
        <member name="T:KJFramework.Encrypt.EncryptHashHelper">
            <summary>
                 提供了基础的HASH加密操作
            </summary>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHashHelper.HashString(System.String)">
            <summary>
            使用utf8编码将字符串散列
            </summary>
            <param name="sourceString">要散列的字符串</param>
            <returns>散列后的字符串</returns>
        </member>
        <member name="M:KJFramework.Encrypt.EncryptHashHelper.HashString(System.Text.Encoding,System.String)">
            <summary>
            使用指定的编码将字符串散列
            </summary>
            <param name="encode">编码</param>
            <param name="sourceString">要散列的字符串</param>
            <returns>散列后的字符串</returns>
        </member>
        <member name="T:KJFramework.Security.Token">
            <summary>
                令牌，提供了相关的基本安全属性。
            </summary>
        </member>
        <member name="M:KJFramework.Security.Token.#ctor(System.Byte[])">
            <summary>
                令牌，提供了相关的基本安全属性。
            </summary>
            <param name="content">令牌内容</param>
        </member>
        <member name="P:KJFramework.Security.Token.Content">
            <summary>
                获取令牌内容
            </summary>
        </member>
        <member name="T:KJFramework.Diagnostics.InfomationReviewer">
            <summary>
                信息审查器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationReviewer.Regist(KJFramework.Diagnostics.IInfomationCollector)">
            <summary>
                注册信息收集器
            </summary>
            <param name="collector">信息收集器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationReviewer.UnRegist(KJFramework.Diagnostics.IInfomationCollector)">
            <summary>
                注销信息收集器
            </summary>
            <param name="collector">信息收集器</param>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationReviewer.UnRegist(System.Guid)">
            <summary>
                注册信息收集器
            </summary>
            <param name="id">信息收集器唯一标示</param>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationReviewer.GetCollector(System.Guid)">
            <summary>
                获取具有指定唯一标示的信息收集器
            </summary>
            <param name="id">信息收集器唯一标示</param>
            <returns>返回对应的信息收集器</returns>
        </member>
        <member name="M:KJFramework.Diagnostics.InfomationReviewer.CreateCollector(System.Type,KJFramework.Basic.Enum.InfomationCollectorTypes)">
            <summary>
                创建一个新的信息收集器
            </summary>
            <param name="collectType">收集对象</param>
            <param name="collectorTypes">收集器类型</param>
            <returns>返回一个新的信息收集器</returns>
        </member>
        <member name="T:KJFramework.Datas.Database">
            <summary>
                数据库对象父类，提供了相关的基本面操作。
            </summary>
        </member>
        <member name="M:KJFramework.Datas.Database.#ctor(System.String)">
            <summary>
                数据库对象抽象父类，提供了相关的基本面操作。
            </summary>
            <param name="sqlConn">数据库连接字符串</param>
        </member>
        <member name="M:KJFramework.Datas.Database.#ctor(System.String,System.Int32)">
            <summary>
                数据库对象抽象父类，提供了相关的基本面操作。
            </summary>
            <param name="sqlConn">数据库连接字符串</param>
            <param name="commandTimeout">命令执行超时时间</param>
        </member>
        <member name="M:KJFramework.Datas.Database.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Datas.Database.GetTable(System.String)">
            <summary>
                获取数据库中指定表的数据集
            </summary>
            <param name="tableName">数据库表名称</param>
            <returns>返回表中的数据集</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.GetTables(System.String[])">
            <summary>
                获取多个数据表的数据集
            </summary>
            <param name="tables">数据库表名称集合</param>
            <returns>返回多个数据集</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.ExecuteNonQuery(System.String,System.String)">
            <summary>
                执行一个操作并返回受影响的行数
            </summary>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.ExecuteScalar``1(System.String,System.String)">
            <summary>
                执行一个操作并返回结果的首行首列
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回结果的首行首列</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.ExecuteReader(System.String,System.String)">
            <summary>
                执行一个操作并返回结果读取器
            </summary>
            <param name="tabeName">把数据库表名称</param>
            <param name="condition">条件语句</param>
            <returns>返回读取器</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.SpExecuteReader(System.String,System.String[],System.Object[])">
            <summary>
                执行一个存储过程
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="parameters">参数集合</param>
            <param name="values">值集合</param>
            <returns>返回执行后的结果</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.SpExecuteNonQuery(System.String,System.String[],System.Object[])">
            <summary>
                执行一个存储过程
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="parameters">参数集合</param>
            <param name="values">值集合</param>
            <returns>返回执行后的结果</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.Execute(System.String)">
            <summary>
                执行一条指定的SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:KJFramework.Datas.Database.Open">
            <summary>
                打开数据库
            </summary>
        </member>
        <member name="M:KJFramework.Datas.Database.Close">
            <summary>
                关闭数据库
            </summary>
        </member>
        <member name="M:KJFramework.Datas.Database.CreateConnection">
            <summary>
                创建一个新的数据库连接
            </summary>
            <returns>返回新的数据库连接</returns>
        </member>
        <member name="P:KJFramework.Datas.Database.Statistics">
            <summary>
                获取或设置统计器
            </summary>
        </member>
        <member name="P:KJFramework.Datas.Database.CommandTimeout">
            <summary>
                获取或设置命令超时时间
            </summary>
        </member>
        <member name="E:KJFramework.Datas.Database.CommandExecuted">
            <summary>
                命令执行成功事件
            </summary>
        </member>
        <member name="T:KJFramework.Exception.LogFilePathNotFoundException">
            <summary>
                日志文件未找到异常
            </summary>
        </member>
        <member name="M:KJFramework.Exception.LogFilePathNotFoundException.#ctor">
            <summary>
                日志文件未找到异常
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.TimeoutEventArgs">
            <summary>
                 超时器超时事件
            </summary>
            <remarks>
                当已经到达所指定的尝试次数，仍然未满足指定条件，则会触发该事件。
            </remarks>
        </member>
        <member name="T:KJFramework.PerformanceProvider.IPerformanceCounterOwner">
            <summary>
                性能计数器拥有者元接口
            </summary>
        </member>
        <member name="T:KJFramework.Extend.Converter.DateTimeConverter">
            <summary>
                时间扩展类，提供了相关的扩展方法。
            </summary>
        </member>
        <member name="M:KJFramework.Extend.Converter.DateTimeConverter.ExConvertToDateTime(System.Double)">
            <summary>
                将Unix时间戳转换为DateTime类型时间
            </summary>
            <param name="d">double 型数字</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:KJFramework.Extend.Converter.DateTimeConverter.ExConvertToInt(System.DateTime)">
            <summary>
                将c# DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time">时间</param>
            <returns>double</returns>
        </member>
        <member name="T:KJFramework.EventArgs.CpuPerformanceValueChangedEventArgs">
            <summary>
                CPU性能值更改事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.CpuPerformanceValueChangedEventArgs.#ctor(System.Double)">
            <summary>
                CPU性能值更改事件
            </summary>
            <param name="cpuUsage">CPU性能值</param>
        </member>
        <member name="P:KJFramework.EventArgs.CpuPerformanceValueChangedEventArgs.CpuUsage">
            <summary>
                获取CPU使用率
            </summary>
        </member>
        <member name="T:KJFramework.Helpers.ConfigurationHelper">
            <summary>
                配置项帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Helpers.ConfigurationHelper.GetApplicationConfiguration">
            <summary>
                获取应用程序的配套EXE配置文件
            </summary>
            <returns>返回配置项</returns>
        </member>
        <member name="T:KJFramework.Helpers.AttributeHelper">
            <summary>
                标记属性帮助器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Helpers.AttributeHelper.GetCustomerAttribute``1(System.Type)">
            <summary>
                获取一个类型的中的指定标记属性
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="type">获取的对象</param>
            <returns>返回指定的标记属性</returns>
        </member>
        <member name="M:KJFramework.Helpers.AttributeHelper.GetCustomerAttributes``1(System.Type)">
            <summary>
                获取一个类型的中的指定标记属性
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="type">获取的对象</param>
            <returns>返回指定的标记属性</returns>
        </member>
        <member name="M:KJFramework.Helpers.AttributeHelper.GetCustomerAttribute``1(System.Reflection.FieldInfo)">
            <summary>
                获取一个字段的中的指定标记属性
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="field">获取的对象</param>
            <returns>返回指定的标记属性</returns>
        </member>
        <member name="M:KJFramework.Helpers.AttributeHelper.GetCustomerAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
                获取一个字段的中的指定标记属性
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="property">获取的对象</param>
            <returns>返回指定的标记属性</returns>
        </member>
        <member name="M:KJFramework.Helpers.AttributeHelper.GetCustomerAttribute``1(System.Reflection.MethodInfo)">
            <summary>
                获取一个方法的中的指定标记属性
            </summary>
            <typeparam name="T">标记属性类型</typeparam>
            <param name="methodInfo">获取的方法</param>
            <returns>返回指定的标记属性</returns>
        </member>
        <member name="T:KJFramework.Datas.SqlDBConnectionPool">
            <summary>
                SQL SERVER数据库连接缓存池
                <para>* Lazy check</para>
            </summary>
        </member>
        <member name="M:KJFramework.Datas.SqlDBConnectionPool.GetConnection(System.Guid)">
            <summary>
                获取连接对象
            </summary>
            <param name="guid">连接对象唯一标识</param>
            <returns>返回连接对象</returns>
        </member>
        <member name="T:KJFramework.Configurations.Objects.PropertyWithName">
            <summary>
                属性类型与名称临时结构体
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Objects.PropertyWithName.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Configurations.Objects.PropertyWithName.PropertyInfo">
            <summary>
                获取或设置属性类型
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Objects.PropertyWithName.Name">
            <summary>
                获取或设置属性名称
            </summary>
        </member>
        <member name="T:KJFramework.Zip.ZlibCompress">
            <summary>
                Zlib压缩算法压缩应用类
            </summary>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            拷贝复制流字节
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.CompressFile(System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="fileName">被压缩文件名（必须输入绝对路径）</param>
            <param name="compressedFileName">压缩后保存的文件名（必须输入绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.DecompressFile(System.String,System.String)">
            <summary>
            解压文件
            </summary>
            <param name="compressedFileName">被解压文件名（必须输入绝对路径）</param>
            <param name="decompressFileName">解压后保存的文件名（必须输入绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.CompressBytes(System.Byte[])">
            <summary>
            压缩byte数组数据
            </summary>
            <param name="sourceByte">需要被压缩的Byte数组数据</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.DecompressBytes(System.Byte[])">
            <summary>
            解压byte数据数据
            </summary>
            <param name="sourceByte">需要被解压的byte数组数据</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.CompressStream(System.IO.Stream)">
            <summary>
            压缩流
            </summary>
            <param name="sourceStream">需要被压缩的流数据</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.DecompressStream(System.IO.Stream)">
            <summary>
            解压流
            </summary>
            <param name="sourceStream">需要被解缩的流数据</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.CompressString(System.String)">
            <summary>
            压缩字符串
            </summary>
            <param name="sourceString">需要被压缩的字符串</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Zip.ZlibCompress.DecompressString(System.String)">
            
            <summary>
            解压字符串
            </summary>
            <param name="sourceString">需要被解压的字符串</param>
            <returns></returns>
        </member>
        <member name="T:KJFramework.Matcher.Rule.IMatcherRule">
            <summary>
                匹配器匹配规则元接口，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Matcher.Rule.IMatcherRule.Check(System.String)">
            <summary>
                匹配检查
            </summary>
            <param name="arg">要匹配的内容</param>
            <returns>返回匹配结果</returns>
        </member>
        <member name="P:KJFramework.Matcher.Rule.IMatcherRule.Count">
            <summary>
                获取匹配项的数量
            </summary>
        </member>
        <member name="T:KJFramework.IRecordable`2">
            <summary>
                可记录的元接口，提供了与记录相关的基本操作。
            </summary>
            <typeparam name="TLogger">记录器类型</typeparam>
            <typeparam name="TLog">记录项类型</typeparam>
        </member>
        <member name="P:KJFramework.IRecordable`2.Logger">
            <summary>
                获取或设置记录器
            </summary>
        </member>
        <member name="T:KJFramework.Factory.IFactory`1">
            <summary>
                工厂元接口，提供了对于相关对象的基础创造方法。
            </summary>
            <typeparam name="TProduct"></typeparam>
        </member>
        <member name="M:KJFramework.Factory.IFactory`1.Create">
            <summary>
                创造对象
                    * 使用此方法的前提是，要创造的对象必须具有默认的无参构造函数
            </summary>
            <returns>返回创造后的新对象</returns>
        </member>
        <member name="T:KJFramework.EventArgs.WorkerProcessingEventArgs">
            <summary>
                工作者工作状态汇报事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.WorkerProcessingEventArgs.#ctor(System.String)">
            <summary>
                工作者工作状态汇报事件
            </summary>
            <param name="state">工作状态信息</param>
        </member>
        <member name="M:KJFramework.EventArgs.WorkerProcessingEventArgs.#ctor(System.Nullable{KJFramework.Basic.Enum.ProcessingTypes})">
            <summary>
                工作者工作状态汇报事件
            </summary>
            <param name="processingType">信息状态</param>
        </member>
        <member name="M:KJFramework.EventArgs.WorkerProcessingEventArgs.#ctor(System.String,System.Nullable{KJFramework.Basic.Enum.ProcessingTypes})">
            <summary>
                工作者工作状态汇报事件
            </summary>
            <param name="state">工作状态信息</param>
            <param name="processingType">信息状态</param>
        </member>
        <member name="P:KJFramework.EventArgs.WorkerProcessingEventArgs.State">
            <summary>
                获取当前的工作状态信息
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.WorkerProcessingEventArgs.ProcessingType">
            <summary>
                获取信息状态
            </summary>
        </member>
        <member name="T:KJFramework.Tasks.Task">
            <summary>
                 任务抽象类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.Task.Cancel">
            <summary>
                取消任务
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.Task.Execute">
            <summary>
                执行任务
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.Task.ExecuteAsyn">
            <summary>
                异步执行任务
            </summary>
        </member>
        <member name="M:KJFramework.Tasks.Task.Execute(System.Object)">
            <summary>
                内部异步执行方法
            </summary>
            <param name="arg">线程参数</param>
        </member>
        <member name="M:KJFramework.Tasks.Task.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:KJFramework.Tasks.Task.Description">
            <summary>
                获取或设置任务描述
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.Id">
            <summary>
                获取或设置任务唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.IsFinished">
            <summary>
                获取一个值，该值表示了当前任务是否已经完成
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.IsCanceled">
            <summary>
                获取一个值，该值表示了当前任务是否已经取消
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.CreateTime">
            <summary>
                获取任务创建时间
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.ExpiredTime">
            <summary>
                获取或设置任务过期时间
                        * 如果设置为null, 则表示永远不过期
            </summary>
        </member>
        <member name="P:KJFramework.Tasks.Task.Priority">
            <summary>
                获取或设置任务优先级
            </summary>
        </member>
        <member name="T:KJFramework.Observers.IObservable`2">
            <summary>
                可观察的元接口，提供了相关的基本操作。
            </summary>
            <typeparam name="TKey">观察唯一键值</typeparam>
            <typeparam name="TValue">观察类型</typeparam>
        </member>
        <member name="M:KJFramework.Observers.IObservable`2.GetObserver(`0)">
            <summary>
                获取一个具有指定KEY的观察者
            </summary>
            <param name="key">目标KEY</param>
            <returns>返回观察者</returns>
        </member>
        <member name="P:KJFramework.Observers.IObservable`2.Observers">
            <summary>
                获取观察者列表
            </summary>
        </member>
        <member name="T:KJFramework.Extend.Converter.StringConverter">
            <summary>
                字符串扩展类，提供了相关的扩展方法。
            </summary>
        </member>
        <member name="M:KJFramework.Extend.Converter.StringConverter.ExIsNullOrEmpty(System.String)">
            <summary>
                判断当前字符串是否为空或者null
            </summary>
            <param name="self">自身内容</param>
            <returns>返回判断口的状态</returns>
        </member>
        <member name="M:KJFramework.Extend.Converter.StringConverter.ExConvertToDateTime(System.String)">
            <summary>
                将一个字符串转换为日期
                    * 要求该字符串必须具有日期格式。
            </summary>
            <param name="self">自身内容</param>
            <returns>返回转换后的日期对象</returns>
        </member>
        <member name="M:KJFramework.Extend.Converter.StringConverter.ExConvertToInt(System.String)">
            <summary>
                讲一个字符串转换为整数
                    * 要求该字符串必须整数内容。
            </summary>
            <param name="self">自身内容</param>
            <returns>返回转换后的整数</returns>
        </member>
        <member name="M:KJFramework.Extend.Converter.StringConverter.ExGetFullPath(System.String)">
            <summary>
                将一个相对路径转换为绝对路径
            </summary>
            <param name="self">自身内容</param>
            <returns>返回转换后的全路径</returns>
        </member>
        <member name="T:KJFramework.Diagnostics.Collectors.ThreadInfomationCollector">
            <summary>
                线程信息信息收集器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.ThreadInfomationCollector.Start">
            <summary>
                开始执行
            </summary>
        </member>
        <member name="M:KJFramework.Diagnostics.Collectors.ThreadInfomationCollector.Stop">
            <summary>
                停止执行
            </summary>
        </member>
        <member name="T:KJFramework.Configurations.Loaders.LocalConfigurationLoader">
            <summary>
                本地配置文件加载器，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Loaders.LocalConfigurationLoader.#ctor">
            <summary>
                本地配置文件加载器，提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Loaders.LocalConfigurationLoader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Configurations.Loaders.LocalConfigurationLoader.DisposeStatistics">
            <summary>
                注销统计器
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Loaders.LocalConfigurationLoader.ConfigurationLoaderType">
            <summary>
                获取配置加载器类型
            </summary>
        </member>
        <member name="E:KJFramework.Configurations.Loaders.LocalConfigurationLoader.LoadSuccessfully">
            <summary>
                加载成功
            </summary>
        </member>
        <member name="E:KJFramework.Configurations.Loaders.LocalConfigurationLoader.LoadFailed">
            <summary>
                加载失败
            </summary>
        </member>
        <member name="P:KJFramework.Configurations.Loaders.LocalConfigurationLoader.Statistics">
            <summary>
                获取或设置统计器
            </summary>
        </member>
        <member name="T:KJFramework.Compress.DeflateCompressor">
            <summary>
                Deflate压缩器的基础实现，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Compress.DeflateCompressor.Compress(System.Byte[])">
            <summary>
                压缩一个二进制字节数组
            </summary>
            <param name="data">被压缩的字节数组</param>
            <returns>返回压缩后的数据</returns>
        </member>
        <member name="M:KJFramework.Compress.DeflateCompressor.DeCompress(System.Byte[])">
            <summary>
                解压缩一个二进制字节数组
            </summary>
            <param name="data">被解压缩的字节数组</param>
            <returns>返回解压缩后的数据</returns>
        </member>
        <member name="T:KJFramework.Observers.Observer`1">
            <summary>
                观察者抽象父类，提供了相关的基本操作。
            </summary>
            <typeparam name="T">观察类型</typeparam>
        </member>
        <member name="M:KJFramework.Observers.Observer`1.Notify(`0)">
            <summary>
                通知
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:KJFramework.Observers.Observer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:KJFramework.Observers.Observer`1.Notifyed">
            <summary>
                通知事件
            </summary>
        </member>
        <member name="T:KJFramework.Serializers.ClassMetadataSerializer">
            <summary>
                类元数据序列化器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Serializers.ClassMetadataSerializer.Serialize``1(``0)">
            <summary>
                序列化
            </summary>
            <param name="obj" type="T">
                <para>
                    被序列化的对象
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.ClassMetadataSerializer.Serialize(System.Type,System.Object)">
            <summary>
                序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="obj">被序列化的对象</param>
            <returns>返回序列化后的元数据</returns>
        </member>
        <member name="M:KJFramework.Serializers.ClassMetadataSerializer.Deserialize``1(System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="M:KJFramework.Serializers.ClassMetadataSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
                反序列化
            </summary>
            <param name="type">类型</param>
            <param name="data" type="byte[]">
                <para>
                    元数据
                </para>
            </param>
            <exception cref="N:KJFramework.Exception">饭序列化失败</exception>
        </member>
        <member name="P:KJFramework.Serializers.ClassMetadataSerializer.SerializerType">
            <summary>
                获取序列化器类型
            </summary>
        </member>
        <member name="T:KJFramework.MessageStacks.MessageStack`1">
            <summary>
                消息协议栈抽象类，提供了相关的基本操作
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:KJFramework.MessageStacks.MessageStack`1.OnLoading">
            <summary>
                加载后需要做的动作
            </summary>
        </member>
        <member name="M:KJFramework.MessageStacks.MessageStack`1.Dispose">
            <summary>
                注销
            </summary>
        </member>
        <member name="M:KJFramework.MessageStacks.MessageStack`1.Pickup(System.Int32)">
            <summary>
                提取一个具有指定协议编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="M:KJFramework.MessageStacks.MessageStack`1.Pickup(System.Int32,System.Int32)">
            <summary>
                 提取一个具有指定协议编号以及服务编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <param name="serviceId">服务编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="M:KJFramework.MessageStacks.MessageStack`1.Pickup(System.Int32,System.Int32,System.Int32)">
            <summary>
                 提取一个具有指定协议编号，服务编号以及详细服务编号的消息
            </summary>
            <param name="protocolId">协议编号</param>
            <param name="serviceId">服务编号</param>
            <param name="detailServiceId">详细服务编号</param>
            <returns>返回指定消息</returns>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Statistics">
            <summary>
                获取或设置统计器
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Key">
            <summary>
            获取或设置用来约束所有对象的唯一标示
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.PluginInfo">
            <summary>
                获取或设置插件信息
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Enable">
            <summary>
                 获取或设置可用标示
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.PluginType">
            <summary>
                获取或设置插件类型
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Count">
            <summary>
                获取当前协议栈中的消息数量
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Name">
            <summary>
                获取协议栈名称
            </summary>
        </member>
        <member name="P:KJFramework.MessageStacks.MessageStack`1.Version">
            <summary>
                获取协议栈版本
            </summary>
        </member>
        <member name="E:KJFramework.MessageStacks.MessageStack`1.PickupSuccessfully">
            <summary>
                提取消息成功事件
            </summary>
        </member>
        <member name="E:KJFramework.MessageStacks.MessageStack`1.PickupFailed">
            <summary>
                提取消息失败事件
            </summary>
        </member>
        <member name="T:KJFramework.Plugin.IPluginManagement`1">
            <summary>
                插件管理器元接口, 提供了相关的基本操作
            </summary>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Load(System.String,System.Type)">
            <summary>
                获取指定目录中的，并且按照指定类型进行加载
            </summary>
            <param name="path" type="string">
                <para>
                    目录
                </para>
            </param>
            <param name="pluginType" type="System.Type">
                <para>
                    类型
                </para>
            </param>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Add(System.String)">
            <summary>
                按照全地址加载插件
            </summary>
            <param name="path" type="string">
                <para>
                    插件的全地址
                </para>
            </param>
            <returns>
                返回false,表示加载失败
            </returns>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Add(`0)">
            <summary>
                按照类型加载插件
            </summary>
            <param name="pluginType" type="System.Type">
                <para>
                    类型
                </para>
            </param>
            <returns>
                返回false,表示加载失败
            </returns>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Remove(System.String)">
            <summary>
                卸载具有指定名称的插件
            </summary>
            <param name="name" type="string">
                <para>
                    名称
                </para>
            </param>
            <returns>
                返回false,表示卸载失败
            </returns>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Remove(System.Int32)">
            <summary>
                卸载具有指定ID的插件
            </summary>
            <param name="id" type="int">
                <para>
                    id
                </para>
            </param>
            <returns>
                返回false,表示卸载失败
            </returns>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.Clear">
            <summary>
                清除所有已加载的插件
            </summary>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.GetPluginList(System.String)">
            <summary>
                获取具有指定插件类别的插件链表
            </summary>
            <param name="catalogName" type="string">
                <para>
                    插件类别
                </para>
            </param>
            <returns>
                返回null, 表示不存在当前插件类别
            </returns>
        </member>
        <member name="M:KJFramework.Plugin.IPluginManagement`1.GetEnumerable">
            <summary>
                返回当前插件集合的迭代器
            </summary>
            <returns>返回插件集合的迭代器</returns>
        </member>
        <member name="P:KJFramework.Plugin.IPluginManagement`1.Count">
            <summary>
                获取当前插件数目
            </summary>
        </member>
        <member name="T:KJFramework.Plugin.IConfiger">
            <summary>
                配置器元接口, 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Plugin.IConfiger.Save">
            <summary>
                保存配置
            </summary>
            <returns>
                返回false, 表示保存失败。
            </returns>
        </member>
        <member name="P:KJFramework.Plugin.IConfiger.ConfigFile">
            <summary>
                获取配置文件路径
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.ChangeServiceListEventArgs">
            <summary>
                更换服务列表事件
            </summary>
        </member>
        <member name="M:KJFramework.EventArgs.ChangeServiceListEventArgs.#ctor(System.Int32,System.Collections.ArrayList)">
            <summary>
                更换服务列表事件
            </summary>
            <param name="ServerID" type="int">
                <para>
                    服务器编号
                </para>
            </param>
            <param name="NewServiceList" type="System.Collections.ArrayList">
                <para>
                    更换的新服务ID列表
                </para>
            </param>
        </member>
        <member name="P:KJFramework.EventArgs.ChangeServiceListEventArgs.ServerID">
            <summary>
                服务器编号
            </summary>
        </member>
        <member name="P:KJFramework.EventArgs.ChangeServiceListEventArgs.NewServiceList">
            <summary>
                更换的新服务ID列表
            </summary>
        </member>
        <member name="T:KJFramework.EventArgs.BeginWorkEventArgs">
            <summary>
                工作者开始工作事件
            </summary>
        </member>
        <member name="T:KJFramework.Logger.Logs">
            <summary>
                KJFramework内部提供的全局文本日志记录器
            </summary>
        </member>
        <member name="F:KJFramework.Logger.Logs.Logger">
            <summary>
                全局的日志记录器
            </summary>
        </member>
        <member name="F:KJFramework.Logger.Logs.Name">
            <summary>
                日志记录签署人名称
            </summary>
        </member>
        <member name="T:KJFramework.Delegate.LightDelegateItem">
            <summary>
                轻型委托项，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegateItem.#ctor(System.Action{System.Object[]})">
            <summary>
                轻型委托项，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegateItem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Delegate.LightDelegateItem.Execute(System.Object[])">
            <summary>
                运行
            </summary>
            <param name="objs">运行参数</param>
        </member>
        <member name="P:KJFramework.Delegate.LightDelegateItem.Tag">
            <summary>
                获取或设置附属属性
            </summary>
        </member>
        <member name="T:KJFramework.Configurations.Statistics.LocalConfigurationLoaderStatistics">
            <summary>
                本地配置文件加载器统计器
            </summary>
        </member>
        <member name="M:KJFramework.Configurations.Statistics.LocalConfigurationLoaderStatistics.Initialize``1(``0)">
            <summary>
                初始化
            </summary>
            <param name="element">统计类型</param>
            <typeparam name="T">统计类型</typeparam>
        </member>
        <member name="M:KJFramework.Configurations.Statistics.LocalConfigurationLoaderStatistics.Close">
            <summary>
                关闭统计
            </summary>
        </member>
        <member name="T:KJFramework.Attribute.CustomerSectionAttribute">
            <summary>
                自定义配置节标签属性
            </summary>
        </member>
        <member name="M:KJFramework.Attribute.CustomerSectionAttribute.#ctor(System.String)">
            <summary>
                自定义配置节标签属性
            </summary>
            <param name="name">配置节名称</param>
        </member>
        <member name="P:KJFramework.Attribute.CustomerSectionAttribute.Name">
            <summary>
                获取自定义配置节名称
            </summary>
        </member>
        <member name="P:KJFramework.Attribute.CustomerSectionAttribute.RemoteConfig">
            <summary>
                获取或设置一个值，该值标示了当前的配置节是否从远程获取
            </summary>
        </member>
    </members>
</doc>
