**********************************************************************************
*
*	KJFramework.Data.Synchronization 轻量级数据同步框架
*
**********************************************************************************

[说明]
    KJFramework框架中内置了一套，高可用、高复用、高性能的跨进程、跨机器数据同步框架。
使用此框架，将使得用户不在为多进程中的缓存能力不一致而发愁，此框架的设计遵循
发布者(Publisher)/订阅者(Subscriber)模式，在底层的消息协议定制中，我们极度优化了序列化后的大小，
从而节省网络通信流量。为了更加方便的使用二进制协议，我们为二进制协议使用了之前的KJFramework.Message
框架来实现。在底层通信上，我们也作出了极致性的优化方案，确保最小化的通信成本。
    在设计此框架的时候，我们在每一个可能会影响用户使用的地方都会进行仔细的分析和考虑，在同步数据的时候
采用了KEY/VALUE的方式，并且，KEY和VALUE的类型都可以进行自定义，这样的话也就最大化了数据同步的灵活性。
并且，我们为发布者(Publisher)还定义了类别，也就是说，我们可以在一个进程中同时定义多个具有不同类别的发布者，
这样一来，在订阅数据的时候，也就可以根据不同的类别来订阅，这样的设计恰恰体现出了高可用性和高灵活性。
    在使用发布者的时候，我们允许在同一个进程中的多个发布者使用同一个网络资源，这样的做法，为可能具有
多发布者的需求提供了便利，最大化的节省了系统资源。
	目前此内置框架被初步定义在命名空间：KJFramework.Data.Synchronization内，拥有独立Assembly.



---------------------------------------------------------------------------------
-	2012-02-02 进度
---------------------------------------------------------------------------------
1. 完成了框架的设计图(UML Design)
2. 初步完成了对于框架内部通信消息协议的设计
3. 初步的编写了接口层面上的代码


---------------------------------------------------------------------------------
-	2012-02-08 进度
---------------------------------------------------------------------------------
1. 初步设计了事务
2. 初步完成了系统资源池的设计
3. 初步完成了协议栈的设计
4. 初步完成了网络资源的代码编写
5. 经过仔细设计后决定，Publisher内部应该含有Listener, 而别人CONNECT的操作处理应该由Publisher来使用
   而Subscriber内部应该含有的是IMessageTransportChannel<BaseMessage>


下一步要做的事情:
---------------------------------------------------------------------------------
1. 完成Publisher
2. 完成Subscriber
3. 初步完成信令级别的调试






---------------------------------------------------------------------------------
-	2012-03-13 进度
---------------------------------------------------------------------------------
1. 重新设计了IPublisherResourceStub接口
2. 重新编写了SystemResourcePool和IPublisherResourceStub之间的对接工作
3. 底层的同步数据协议key, value分开，而不再像原来一样合成为一个整体
4. 重新设计了ILocalDataSubscriber





---------------------------------------------------------------------------------
-	2012-03-14 进度
---------------------------------------------------------------------------------
1. 初步完成了DataPublisher的编写
2. 初步完成了LocalDataSubscriber的编写
3. 初步完成了PublisherResourceStub的编写
4. 已经衔接了PublisherResourceStub与DataPublisher的工作
5. 已经衔接了DataPublisher与LocalDataSubscriber的工作
6. 重新设计了IRemoteDataSubscriber
7. 初步完成了RemoteDataSubscriber的编写





---------------------------------------------------------------------------------
-	2012-03-26 进度
---------------------------------------------------------------------------------
1. 为当前数据同步框架，开始计划加入广播者能力(IRemoteDataBroadcaster<K, V>)
    一个广播者除了提供订阅者的所有能力之外，还需要提供一个可以供外部发送广播消息的能力接口
	a). 广播者，可支持多个中心节点
	b). 广播者的每一次广播，都应该带有广播标识，这样的话，才能在客户端滤重
2. 根据框架设计，最终决定，把数据订阅者设计为单体订阅能力对象，也就是说，它不具备多发布者同时
    订阅的能力。 而一个广播者被设计为可以支持同时订阅多个具有相同能力的发布者。



	

---------------------------------------------------------------------------------
-	2012-05-17 进度
---------------------------------------------------------------------------------
1. 为TransactionIdentity加入了可阅读的ToString方法
2. 为MessageIdentity加入了可阅读的ToString方法
3. 修改了Publisher接到Boardcaster消息的逻辑，改后为：
    a). 先回复Boardcast RSP.
	b). 再转发到每一个相关的Subscriber



---------------------------------------------------------------------------------
-	2012-12-04 进度
---------------------------------------------------------------------------------
1. 删除了此项目中所有的事务，转而使用了KJFramework.Net.Transaction项目进行事务方面的统一支持
2. 规整了现有的所有单元测试，并且让它们测试通过
3. 修改了PublisherResourceStub中事件没有释放，而导致的潜在内存泄露问题
4. 清理了无用的代码