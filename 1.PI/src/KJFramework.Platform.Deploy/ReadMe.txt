##################################################################
# 项目介绍：
# (1). KJFramework.Platform.Deploy.SMC用来做最小化主机的控制单元(Sub Machine Service Controller)
# (2). KJFramework.Platform.Deploy.DSC用来做服务中心(Dynamic Service Center)
# (3). KJFramework.Platform.Deploy.DSN最小化部署单元(Deploy Service Node)
##################################################################



----------------------------------------------------------------------------------------
- 2011年1月23日 项目进度
----------------------------------------------------------------------------------------
1. 开始编写SMC程序(Sub Machine Service Controller)，并建立如下项目：
	(1).KJFramework.Platform.Deploy.SMC
	(2).KJFramework.Platform.Deploy.SMC.Common
	(3).KJFramework.Platform.Deploy.SMC.Contracts
	(4).KJFramework.Platform.Deploy.SMC.ProtocolStack
	(5).KJFramework.Platform.Deploy.SMC.Test
	(6).KJFramework.Platform.Deploy.SMC.Test.Client
	(7).KJFramework.Platform.Deploy.SMC.CP.Basic
2. 初步建立了SMC与后台动态服务的通讯协议栈
3. 初步搭建了已动态服务组件为架构基础的程序结构
4. 初步建立Basic组件，用于开放RPC服务
5. 编写了SMC程序的入口点
6. 编写了SMC服务的配置文件以及一些相关的程序类库



----------------------------------------------------------------------------------------
- 2011年1月24日 项目进度
----------------------------------------------------------------------------------------
1. 将连接动态服务和Service Center的代码由服务内部改为了动态组件内部。
2. 创建动态组件：KJFramework.Platform.Deploy.SMC.CP.Connector



----------------------------------------------------------------------------------------
- 2011年1月25日 项目进度
----------------------------------------------------------------------------------------
1. 为动态服务协议栈增加了新的功能消息
	(1).DynamicServiceGetComponentHealthRequestMessage <--此消息支持主动查询动态服务组件的健康状态
	(2).DynamicServiceUpdateProcessingMessage <--此消息支持动态的分发组件更新的状态信息
2. 为所有的功能处理器建立了单元测试
3. 建立了可维护的动态预服务项目，用于替换原有基础组件，今后所有动态服务都使用这个组件
4. 初步建立了动态服务与SMC之间的连接管理、注册、心跳
5. 为动态服务创建了新的配置节"MDDS"



----------------------------------------------------------------------------------------
- 2011年1月30日 项目进度
----------------------------------------------------------------------------------------
1. 初步的完成了动态服务与SMC之间的所有交互动作
2. 动态服务的动态更新功能已经完成

下一步的工作：
-----------------------------------------------
1. 建立服务中心项目(Service Center)
2. 完成服务中心的协议栈， 这其中包括了如下的基础动作。
   (1).注册SMC
   (2).注销SMC
   (3).重置服务的心跳
   (4).获取服务状态
   (5).获取服务组件状态
   (6).心跳
   (7).更新服务(or 组件)
   (8).状态的变更消息 (比如健康状态，更新状态)


----------------------------------------------------------------------------------------
- 2011年2月3日 项目进度
----------------------------------------------------------------------------------------
1. 初步搭建了服务中心的协议栈
2. 初步编写了部分SMC -> DSC的支撑以及通知功能
3. 初步编写了SMC注册到DSC的流程，以及重连流程




----------------------------------------------------------------------------------------
- 2011年2月11日 项目进度
----------------------------------------------------------------------------------------
1. 完成了SMC重连DSC的逻辑
2. 修改了部分DSC的协议栈
3. 初步完成了SMC对于DSC通讯逻辑的所有消息处理器 
4. 初步搭建了DSC
5. 编写了小部分DSC消息处理器


----------------------------------------------------------------------------------------
- 2011年2月15日 项目进度
----------------------------------------------------------------------------------------
1. 完成了所有DSC->SMC的通讯逻辑
2. 修正了DSC获取不到某个服务组件最后一次更新时间的BUG
3. 在DSC与SMC通信的协议栈中，新支持了检测当前某个服务是否支持应用程序域性能检测的报告项

下一步要做的工作：
------------------------------------------------------------------
1. 移除Shell的主动心跳机制，改为被动接受心跳请求。
2. 在SMC端加入心跳检测的逻辑，如果某个服务出现心跳异常，则适时报告DSC。
3. 在SMC端的Basic组件中加入对于开放CONNECT.服务地址的获取方式。


----------------------------------------------------------------------------------------
- 2011年2月18日 项目进度
----------------------------------------------------------------------------------------
1. 增加了SMC监控Dynamic Service心跳的能力，并可以汇报给DSC
2. 在SMC,DSC中增加了获取指定服务文件详细信息的能力
3. 重新设计了DSC->SMC的重置心跳时间逻辑。
4. 支持了无宿主依赖特性(KJFramework.Dynamic框架支持)



----------------------------------------------------------------------------------------
- 2011年2月22日 项目进度
----------------------------------------------------------------------------------------
1. 增加了DSN项目(Deploy Service Node)
2. 为DSN初步设计了协议栈
3. 为DSN设计了DataBus, 用于存储文件二进制数据
4. 为DSN设计了可分包的传输流程
5. 初步完成了DSN的所有消息处理器
7. 为DSN建立了2个Component:
	(1).KJFramework.Platform.Deploy.DSN.CP.Connector   <-- 用于与服务中心建立连接，并保持通讯
	(2).KJFramework.Platform.Deploy.DSN.CP.Deployer     <-- 用于等待部署者的连接，接收文件二进制数据包以及执行部署命令 
8. 为DSN建立了独立的文件传输测试项目(KJFramework.Platform.Deploy.DSN.Test.Client)
9. 初步的测试了DSN的文件传输步骤(Begin transfer, Transfer data, End transfer)
10. 为DSN的组件KJFramework.Platform.Deploy.DSN.CP.Deployer，设计了汇报器接口，用于部署服务同时汇报状态
10. 为DSN的组件KJFramework.Platform.Deploy.DSN.CP.Deployer，设计了部署者接口，用于组合不同的部署步骤进行操作




----------------------------------------------------------------------------------------
- 2011年2月27日 项目进度
----------------------------------------------------------------------------------------
1. 为DSN增加了反部署能力，提供了卸载服务的功能
2. 更新DSN卸载服务的逻辑，加入了杀进程的功能
3. 更新了DSN的协议栈
4. 为DSN设计了分包传输文件的协议与功能
5. 初步完成了DSN的功能设计
6. DSN加入了启动服务的功能
7. DSN加入了停止服务的功能

----------------------------------------------------------------------------------------
- 2011年3月1日 项目进度
----------------------------------------------------------------------------------------
1. 为DSN加入了获取服务列表的能力
2. 更新了DSN的协议栈
3. 更新了DSN.Test的能力
4. 为了多监控端的支持，更新了所有流程的协议栈
5. 初步建立了与客户端的协议栈
6. 通过使用组件隧道技术，初步的搭建了组件互通的基础设施

下一步要做的工作：
---------------------------------------------------------------------------------------
1. 提高部署服务和卸载服务的成功率
2. 为客户端准备DSC和DSN的协议栈




----------------------------------------------------------------------------------------
- 2011年3月3日 项目进度
----------------------------------------------------------------------------------------
1. 初步编写了DSC中所有需要通知给客户端的转发代码
2. 初步编写了所有Client Component中所有需要转发给Connectr Component的逻辑
3. 初步验证了隧道的可行性
4. 初步将DSC的回馈信息通过组建隧道(Tunnel)技术转发给了Client Component



----------------------------------------------------------------------------------------
- 2011年3月4日 项目进度
----------------------------------------------------------------------------------------
1. 编写了相应的客户端测试程序(Client Proxy)
2. 基本调试通过了客户端代理程序与DSC之间的通讯逻辑
3. 修改了DSC和ClientProxy的协议栈，使DSC支持了查询部署节点信息的功能
4. 修改了可维护性动态服务(Maintenancable Dynamic Service)中无法回传ClientTag的BUG

下一步要做的工作：
---------------------------------------------------------------------------------------
1. 修改DSC协议栈，使其支持客户端代理直接查询资料的能力
2. 初步设计可构建的客户端综合控制工具




----------------------------------------------------------------------------------------
- 2011年3月7日 项目进度
----------------------------------------------------------------------------------------
1. 为DSC加入了可以让客户端直接查询资料的能力
2. 更新了ClientProxy, DSCProtocolStack的协议栈
3. 修改了DSC通知Client状态的一个BUG， 修改后的状态为：当DSC不知道要通知的消息属于哪个Client时，将会采取广播的策略。




----------------------------------------------------------------------------------------
- 2011年3月10日 项目进度
----------------------------------------------------------------------------------------
1. 修改了可维护服务(Maintenancable Dynamic Service)内部更新的一个BUG, 修复后已经支持单组件力度的更新了
2. 更新DSC和ClientProxy的协议栈，增加了MachineName字段，用于初步支持未来对于SMC和DSN的更新支持




----------------------------------------------------------------------------------------
- 2011年3月14日 项目进度
----------------------------------------------------------------------------------------
1. 修改了可维护服务，SMC, DSC的协议栈，从消息头中加入了一个TaskId字段，用于标示任务编号。



----------------------------------------------------------------------------------------
- 2011年3月20日 项目进度
----------------------------------------------------------------------------------------
1. 创建了元数据项目：KJFramework.Platform.Deploy.Metadata， 用于统一解决方案中所有用到的传输对象
2. 初步的支持了可维护服务外壳版本号可知可控。
3. 初步的支持了向上级汇报服务详细信息时，加入了该服务的相关性能列



----------------------------------------------------------------------------------------
- 2011年3月24日 项目进度
----------------------------------------------------------------------------------------
1. 更新了SMC的协议栈，支持了当注册SMC时，SMC负责回传一系列可控的地址列表给Shell
2. 修改了当可控服务断开监控后，无法汇报给服务中心的BUG
3. 修改了当可控服务断开监控后，获取服务状态不正确的BUG
4. 将可维护服务中的一些字符串变成了内部资源



下一步要做的:
-----------------------------------------------------------------
1. 为可维护服务设计最基础的报警项，以及使整个部署平台支持报警功能
2. 初步设计配置站节点(Configuration Station Node)








----------------------------------------------------------------------------------------
- 2011年3月30日 项目进度
----------------------------------------------------------------------------------------
1. 初步设计了配置站节点(Configuration Station Node)
2. 建立了CSN相关项目
3. 建立并初步完成CSN的基础组件：KJFramework.Platform.Deploy.CSN.CP.Basic
    此组件用于建立于DSC之间的通讯，并保持与DSC之间的存活心跳
4. 建立了组件：KJFramework.Platform.Deploy.CSN.CP.Connector
	此组件用于接受动态服务的连接，并提供动态配置信息的分发
5. 建立了组件：KJFramework.Platform.Deploy.CSN.CP.DBMatcher
	此组件用于衔接后台DB，并且支持配置信息的缓存功能
	



----------------------------------------------------------------------------------------
- 2011年3月31日 项目进度
----------------------------------------------------------------------------------------
1. 开始编写组件：KJFramework.Platform.Deploy.CSN.CP.Connector
2. 为CSN设计了DB配置订阅对象结构
3. 将配置订阅的逻辑与数据库解耦合， 也就是说今后一个配置订阅者不一定非要在DB中订阅，也可以在某个CACHE机器中订阅信息，
    所以，说“配置订阅者”已经不是特别正确了，应该再广泛一层，称之为信息订阅者。
4. 修改了DBMatcher组建的名称为：KJFramework.Platform.Deploy.CSN.CP.DataMatcher
5. 为信息订阅者设计了订阅者管理器
6. 为信息订阅者设计了订阅者工厂




----------------------------------------------------------------------------------------
- 2011年4月2日 项目进度
----------------------------------------------------------------------------------------
1. 为CSN添加了客户端测试项目
2. 实现了DBSubscribeObject， 用于保存关于数据库方面的订阅信息
3. 初步调试通过了注册CSN的逻辑





----------------------------------------------------------------------------------------
- 2011年4月18日 项目进度
----------------------------------------------------------------------------------------
1. 初步设计了DBMatcher的缓存机制
2. 初步实现了GetDataTable奴婢甘苦不过
3. 添加了DBMatcher的测试项目
4. 完成了关于数据缓存区域的设计
5. 完成了缓存数据工厂的设计




----------------------------------------------------------------------------------------
- 2011年4月19日 项目进度
----------------------------------------------------------------------------------------
1. 为CSN设计了配置传输器
2. 为CSN设计了配置传输步骤
	通过传输步骤接口(ITransmitteStep)，能够非常有效的解耦合一个分包传输的流程。 当然，我们也可以在今后为不同角色的传输任务
	来搭配不同类型和动作传输步骤。
3. 为CSN设计了配置传输管理器(ConfigTransmitterManager)
4. 为CSN设计了传输器上下文
5. 修改了CSN.Connector的Tunnel实现，改为了使用配置传输器来解耦合分发流程