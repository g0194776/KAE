using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Xml;
using KJFramework.ServiceModel.Bussiness.VSPlugin.Contracts;

namespace KJFramework.ServiceModel.Bussiness.VSPlugin.Generators
{
    /// <summary>
    ///     契约生成器，提供了相关的基本操作
    /// </summary>
    public class ContractGenerator : IContractGenerator
    {
        #region Members

        private string _path;
        private CodeCompileUnit _unit = new CodeCompileUnit();
        private CodeNamespace _nameSpaces = new CodeNamespace("KJFramework.ServiceModel.AutoGenerated");
        private CodeTypeDeclaration _type;

        #endregion

        #region Constructor

        /// <summary>
        ///     契约生成器，提供了相关的基本操作
        /// </summary>
        /// <param name="path">
        ///      文件地址
        ///     <para>比如: c:\</para>
        /// </param>
        public ContractGenerator(string path)
        {
            if (string.IsNullOrEmpty(path)) throw new ArgumentNullException("path");
            if (!Directory.Exists(path)) throw new DirectoryNotFoundException("path");
            _path = path;
        }

        #endregion

        #region Implementation of IContractGenerator

        /// <summary>
        ///     为指定远程服务生成本地契约文件
        /// </summary>
        /// <param name="service">远程服务</param>
        public void Generate(IRemotingService service)
        {
            if (service == null) throw new ArgumentNullException("service");
            string path = _path + service.Infomation.FullName + ".cs";
            _type = new CodeTypeDeclaration(service.Infomation.FullName);
            _nameSpaces.Imports.Add(new CodeNamespaceImport("System"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("System.IO"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("KJFramework.Messages"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("KJFramework.ServiceModel.Objects"));
            _nameSpaces.Imports.Add(new CodeNamespaceImport("KJFramework.ServiceModel.Core.Attributes"));
            _type.IsInterface = true;
            _type.CustomAttributes.Add(new CodeAttributeDeclaration("ServiceContract"));
            IList<IMethod> previewMethods = service.GetPreviewMethods();
            if (previewMethods != null)
            {
                foreach (IMethod method in previewMethods) Generate(service.Infomation.EndPoint, method);
            }
            try
            {
                _nameSpaces.Types.Add(_type);
                _unit.Namespaces.Add(_nameSpaces);
                CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
                CodeGeneratorOptions options = new CodeGeneratorOptions { BracingStyle = "C" };
                options.BlankLinesBetweenMembers = true;
                using (StreamWriter sw = new StreamWriter(path))
                    provider.GenerateCodeFromCompileUnit(_unit, sw, options);
                //add to sol.
                Connect.CurrentProject.ProjectItems.AddFromFileCopy(path);
            }
            catch
            {
            }
        }

        #endregion

        #region Methods

        private void Generate(string endPoint, IMethod method)
        {
            CodeMemberMethod codeMethod = new CodeMemberMethod();
            codeMethod.CustomAttributes.Add(new CodeAttributeDeclaration("Operation",
                                                                                 new CodeAttributeArgument("MethodToken", new CodePrimitiveExpression(int.Parse(method.MethodToken))),
                                                                                 new CodeAttributeArgument("IsAsync", new CodePrimitiveExpression(method.IsAsync)),
                                                                                 new CodeAttributeArgument("IsOneWay", new CodePrimitiveExpression(method.IsOneway))));
            codeMethod.ReturnType = new CodeTypeReference(method.ReturnType == "void" ? "System.Void" : method.ReturnType);
            codeMethod.Name = method.Name;
            //ret value.
            if (method.ReferenceId != null) Generate(endPoint, method.ReferenceId);
            //parameters.
            if (method.Arguments != null)
            {
                foreach (IArgument argument in method.Arguments)
                {
                    codeMethod.Parameters.Add(new CodeParameterDeclarationExpression(argument.Type, argument.Name));
                    //customer argument.
                    if (argument.ReferenceId != null) Generate(endPoint, argument.ReferenceId);
                }
            }
            _type.Members.Add(codeMethod);
        }

        private void Generate(string endPoint, string referenceId)
        {
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(string.Format(endPoint + "/Metadata/ArgumentDescription.aspx?Id=" + referenceId));
                request.Method = "GET";
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                using (StreamReader stream = new StreamReader(response.GetResponseStream()))
                {
                    string metadata = stream.ReadToEnd();
                    XmlDocument document = new XmlDocument();
                    document.LoadXml(metadata);
                    string className = document.ChildNodes[0].Attributes["name"].Value;
                    string id = document.ChildNodes[0].Attributes["id"].Value;
                    string path = _path + className + ".cs";
                    ISourceFileGenerator generator = new DefaultSourceFileGenerator(className, _path);
                    if(document.ChildNodes[0].ChildNodes.Count > 0)
                    {
                        foreach (XmlNode node in document.ChildNodes[0].ChildNodes)
                        {
                            generator.GenerateProperty(node.Attributes["type"].InnerText,
                                                       node.Attributes["name"].InnerText,
                                                       int.Parse(node.Attributes["id"].InnerText),
                                                       bool.Parse(node.Attributes["require"].InnerText));
                            //ref type.
                            XmlAttribute attr = node.Attributes["reference"];
                            if(attr != null)
                                Generate(endPoint, attr.InnerText);
                        }
                    }
                    generator.Generate();
                }
                response.Close();
            }
            catch{}
        }

        #endregion
    }
}